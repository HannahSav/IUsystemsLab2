
SDK_UART_l2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000048c0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000016b8  08004a50  08004a50  00014a50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006108  08006108  000200e0  2**0
                  CONTENTS
  4 .ARM          00000008  08006108  08006108  00016108  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006110  08006110  000200e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006110  08006110  00016110  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006114  08006114  00016114  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000e0  20000000  08006118  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200e0  2**0
                  CONTENTS
 10 .bss          00000518  200000e0  200000e0  000200e0  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200005f8  200005f8  000200e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200e0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000afbc  00000000  00000000  00020110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002006  00000000  00000000  0002b0cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a30  00000000  00000000  0002d0d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002049a  00000000  00000000  0002db08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d6e4  00000000  00000000  0004dfa2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c2098  00000000  00000000  0005b686  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011d71e  2**0
                  CONTENTS, READONLY
 20 .debug_ranges 00000930  00000000  00000000  0011d770  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00002cbc  00000000  00000000  0011e0a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000e0 	.word	0x200000e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004a38 	.word	0x08004a38

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000e4 	.word	0x200000e4
 80001cc:	08004a38 	.word	0x08004a38

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b088      	sub	sp, #32
 8000578:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800057a:	f107 030c 	add.w	r3, r7, #12
 800057e:	2200      	movs	r2, #0
 8000580:	601a      	str	r2, [r3, #0]
 8000582:	605a      	str	r2, [r3, #4]
 8000584:	609a      	str	r2, [r3, #8]
 8000586:	60da      	str	r2, [r3, #12]
 8000588:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800058a:	2300      	movs	r3, #0
 800058c:	60bb      	str	r3, [r7, #8]
 800058e:	4b20      	ldr	r3, [pc, #128]	; (8000610 <MX_GPIO_Init+0x9c>)
 8000590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000592:	4a1f      	ldr	r2, [pc, #124]	; (8000610 <MX_GPIO_Init+0x9c>)
 8000594:	f043 0308 	orr.w	r3, r3, #8
 8000598:	6313      	str	r3, [r2, #48]	; 0x30
 800059a:	4b1d      	ldr	r3, [pc, #116]	; (8000610 <MX_GPIO_Init+0x9c>)
 800059c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800059e:	f003 0308 	and.w	r3, r3, #8
 80005a2:	60bb      	str	r3, [r7, #8]
 80005a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005a6:	2300      	movs	r3, #0
 80005a8:	607b      	str	r3, [r7, #4]
 80005aa:	4b19      	ldr	r3, [pc, #100]	; (8000610 <MX_GPIO_Init+0x9c>)
 80005ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ae:	4a18      	ldr	r2, [pc, #96]	; (8000610 <MX_GPIO_Init+0x9c>)
 80005b0:	f043 0304 	orr.w	r3, r3, #4
 80005b4:	6313      	str	r3, [r2, #48]	; 0x30
 80005b6:	4b16      	ldr	r3, [pc, #88]	; (8000610 <MX_GPIO_Init+0x9c>)
 80005b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ba:	f003 0304 	and.w	r3, r3, #4
 80005be:	607b      	str	r3, [r7, #4]
 80005c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005c2:	2300      	movs	r3, #0
 80005c4:	603b      	str	r3, [r7, #0]
 80005c6:	4b12      	ldr	r3, [pc, #72]	; (8000610 <MX_GPIO_Init+0x9c>)
 80005c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ca:	4a11      	ldr	r2, [pc, #68]	; (8000610 <MX_GPIO_Init+0x9c>)
 80005cc:	f043 0302 	orr.w	r3, r3, #2
 80005d0:	6313      	str	r3, [r2, #48]	; 0x30
 80005d2:	4b0f      	ldr	r3, [pc, #60]	; (8000610 <MX_GPIO_Init+0x9c>)
 80005d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d6:	f003 0302 	and.w	r3, r3, #2
 80005da:	603b      	str	r3, [r7, #0]
 80005dc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80005de:	2200      	movs	r2, #0
 80005e0:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 80005e4:	480b      	ldr	r0, [pc, #44]	; (8000614 <MX_GPIO_Init+0xa0>)
 80005e6:	f001 fbbf 	bl	8001d68 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80005ea:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80005ee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005f0:	2301      	movs	r3, #1
 80005f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f4:	2300      	movs	r3, #0
 80005f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005f8:	2300      	movs	r3, #0
 80005fa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80005fc:	f107 030c 	add.w	r3, r7, #12
 8000600:	4619      	mov	r1, r3
 8000602:	4804      	ldr	r0, [pc, #16]	; (8000614 <MX_GPIO_Init+0xa0>)
 8000604:	f001 f9fc 	bl	8001a00 <HAL_GPIO_Init>

}
 8000608:	bf00      	nop
 800060a:	3720      	adds	r7, #32
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}
 8000610:	40023800 	.word	0x40023800
 8000614:	40020c00 	.word	0x40020c00

08000618 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 800061c:	4b12      	ldr	r3, [pc, #72]	; (8000668 <MX_I2C1_Init+0x50>)
 800061e:	4a13      	ldr	r2, [pc, #76]	; (800066c <MX_I2C1_Init+0x54>)
 8000620:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000622:	4b11      	ldr	r3, [pc, #68]	; (8000668 <MX_I2C1_Init+0x50>)
 8000624:	4a12      	ldr	r2, [pc, #72]	; (8000670 <MX_I2C1_Init+0x58>)
 8000626:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000628:	4b0f      	ldr	r3, [pc, #60]	; (8000668 <MX_I2C1_Init+0x50>)
 800062a:	2200      	movs	r2, #0
 800062c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800062e:	4b0e      	ldr	r3, [pc, #56]	; (8000668 <MX_I2C1_Init+0x50>)
 8000630:	2200      	movs	r2, #0
 8000632:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000634:	4b0c      	ldr	r3, [pc, #48]	; (8000668 <MX_I2C1_Init+0x50>)
 8000636:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800063a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800063c:	4b0a      	ldr	r3, [pc, #40]	; (8000668 <MX_I2C1_Init+0x50>)
 800063e:	2200      	movs	r2, #0
 8000640:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000642:	4b09      	ldr	r3, [pc, #36]	; (8000668 <MX_I2C1_Init+0x50>)
 8000644:	2200      	movs	r2, #0
 8000646:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000648:	4b07      	ldr	r3, [pc, #28]	; (8000668 <MX_I2C1_Init+0x50>)
 800064a:	2200      	movs	r2, #0
 800064c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800064e:	4b06      	ldr	r3, [pc, #24]	; (8000668 <MX_I2C1_Init+0x50>)
 8000650:	2200      	movs	r2, #0
 8000652:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000654:	4804      	ldr	r0, [pc, #16]	; (8000668 <MX_I2C1_Init+0x50>)
 8000656:	f001 fbbb 	bl	8001dd0 <HAL_I2C_Init>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d001      	beq.n	8000664 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000660:	f000 fcb6 	bl	8000fd0 <Error_Handler>
  }

}
 8000664:	bf00      	nop
 8000666:	bd80      	pop	{r7, pc}
 8000668:	200000fc 	.word	0x200000fc
 800066c:	40005400 	.word	0x40005400
 8000670:	000186a0 	.word	0x000186a0

08000674 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b08a      	sub	sp, #40	; 0x28
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800067c:	f107 0314 	add.w	r3, r7, #20
 8000680:	2200      	movs	r2, #0
 8000682:	601a      	str	r2, [r3, #0]
 8000684:	605a      	str	r2, [r3, #4]
 8000686:	609a      	str	r2, [r3, #8]
 8000688:	60da      	str	r2, [r3, #12]
 800068a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	4a19      	ldr	r2, [pc, #100]	; (80006f8 <HAL_I2C_MspInit+0x84>)
 8000692:	4293      	cmp	r3, r2
 8000694:	d12c      	bne.n	80006f0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000696:	2300      	movs	r3, #0
 8000698:	613b      	str	r3, [r7, #16]
 800069a:	4b18      	ldr	r3, [pc, #96]	; (80006fc <HAL_I2C_MspInit+0x88>)
 800069c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069e:	4a17      	ldr	r2, [pc, #92]	; (80006fc <HAL_I2C_MspInit+0x88>)
 80006a0:	f043 0302 	orr.w	r3, r3, #2
 80006a4:	6313      	str	r3, [r2, #48]	; 0x30
 80006a6:	4b15      	ldr	r3, [pc, #84]	; (80006fc <HAL_I2C_MspInit+0x88>)
 80006a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006aa:	f003 0302 	and.w	r3, r3, #2
 80006ae:	613b      	str	r3, [r7, #16]
 80006b0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80006b2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80006b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80006b8:	2312      	movs	r3, #18
 80006ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006bc:	2301      	movs	r3, #1
 80006be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006c0:	2303      	movs	r3, #3
 80006c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80006c4:	2304      	movs	r3, #4
 80006c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006c8:	f107 0314 	add.w	r3, r7, #20
 80006cc:	4619      	mov	r1, r3
 80006ce:	480c      	ldr	r0, [pc, #48]	; (8000700 <HAL_I2C_MspInit+0x8c>)
 80006d0:	f001 f996 	bl	8001a00 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80006d4:	2300      	movs	r3, #0
 80006d6:	60fb      	str	r3, [r7, #12]
 80006d8:	4b08      	ldr	r3, [pc, #32]	; (80006fc <HAL_I2C_MspInit+0x88>)
 80006da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006dc:	4a07      	ldr	r2, [pc, #28]	; (80006fc <HAL_I2C_MspInit+0x88>)
 80006de:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80006e2:	6413      	str	r3, [r2, #64]	; 0x40
 80006e4:	4b05      	ldr	r3, [pc, #20]	; (80006fc <HAL_I2C_MspInit+0x88>)
 80006e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80006ec:	60fb      	str	r3, [r7, #12]
 80006ee:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80006f0:	bf00      	nop
 80006f2:	3728      	adds	r7, #40	; 0x28
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	40005400 	.word	0x40005400
 80006fc:	40023800 	.word	0x40023800
 8000700:	40020400 	.word	0x40020400

08000704 <Compare>:
size_t i = 0;
char num_char[12];
size_t num_len = 4;


bool Compare(char a[], char b[], int i){
 8000704:	b480      	push	{r7}
 8000706:	b087      	sub	sp, #28
 8000708:	af00      	add	r7, sp, #0
 800070a:	60f8      	str	r0, [r7, #12]
 800070c:	60b9      	str	r1, [r7, #8]
 800070e:	607a      	str	r2, [r7, #4]
	for(int j = 0;  j < i; j++){
 8000710:	2300      	movs	r3, #0
 8000712:	617b      	str	r3, [r7, #20]
 8000714:	e00e      	b.n	8000734 <Compare+0x30>
		if(a[j] != b[j])
 8000716:	697b      	ldr	r3, [r7, #20]
 8000718:	68fa      	ldr	r2, [r7, #12]
 800071a:	4413      	add	r3, r2
 800071c:	781a      	ldrb	r2, [r3, #0]
 800071e:	697b      	ldr	r3, [r7, #20]
 8000720:	68b9      	ldr	r1, [r7, #8]
 8000722:	440b      	add	r3, r1
 8000724:	781b      	ldrb	r3, [r3, #0]
 8000726:	429a      	cmp	r2, r3
 8000728:	d001      	beq.n	800072e <Compare+0x2a>
			return false;
 800072a:	2300      	movs	r3, #0
 800072c:	e007      	b.n	800073e <Compare+0x3a>
	for(int j = 0;  j < i; j++){
 800072e:	697b      	ldr	r3, [r7, #20]
 8000730:	3301      	adds	r3, #1
 8000732:	617b      	str	r3, [r7, #20]
 8000734:	697a      	ldr	r2, [r7, #20]
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	429a      	cmp	r2, r3
 800073a:	dbec      	blt.n	8000716 <Compare+0x12>
	}
	return true;
 800073c:	2301      	movs	r3, #1
}
 800073e:	4618      	mov	r0, r3
 8000740:	371c      	adds	r7, #28
 8000742:	46bd      	mov	sp, r7
 8000744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000748:	4770      	bx	lr
	...

0800074c <ReadCommand>:

void ReadCommand(char consist[], int len){
 800074c:	b580      	push	{r7, lr}
 800074e:	b086      	sub	sp, #24
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
 8000754:	6039      	str	r1, [r7, #0]

		if(iter == 11){
 8000756:	4ba0      	ldr	r3, [pc, #640]	; (80009d8 <ReadCommand+0x28c>)
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	2b0b      	cmp	r3, #11
 800075c:	d142      	bne.n	80007e4 <ReadCommand+0x98>
			if(Compare(str_buff, "set mode 1.", 11)){
 800075e:	220b      	movs	r2, #11
 8000760:	499e      	ldr	r1, [pc, #632]	; (80009dc <ReadCommand+0x290>)
 8000762:	489f      	ldr	r0, [pc, #636]	; (80009e0 <ReadCommand+0x294>)
 8000764:	f7ff ffce 	bl	8000704 <Compare>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d015      	beq.n	800079a <ReadCommand+0x4e>
				HAL_UART_Transmit(&huart6, (uint8_t*)"\n\rmode with stops\n\r>>", 21, 5);
 800076e:	2305      	movs	r3, #5
 8000770:	2215      	movs	r2, #21
 8000772:	499c      	ldr	r1, [pc, #624]	; (80009e4 <ReadCommand+0x298>)
 8000774:	489c      	ldr	r0, [pc, #624]	; (80009e8 <ReadCommand+0x29c>)
 8000776:	f002 fc20 	bl	8002fba <HAL_UART_Transmit>

				oled_SetCursor(0, 28);
 800077a:	211c      	movs	r1, #28
 800077c:	2000      	movs	r0, #0
 800077e:	f000 fe0d 	bl	800139c <oled_SetCursor>
				oled_WriteString("with stops   ", Font_7x10, Black);
 8000782:	4a9a      	ldr	r2, [pc, #616]	; (80009ec <ReadCommand+0x2a0>)
 8000784:	2300      	movs	r3, #0
 8000786:	ca06      	ldmia	r2, {r1, r2}
 8000788:	4899      	ldr	r0, [pc, #612]	; (80009f0 <ReadCommand+0x2a4>)
 800078a:	f000 fde1 	bl	8001350 <oled_WriteString>
				oled_UpdateScreen();
 800078e:	f000 fccf 	bl	8001130 <oled_UpdateScreen>

				now_mode = 1;
 8000792:	4b98      	ldr	r3, [pc, #608]	; (80009f4 <ReadCommand+0x2a8>)
 8000794:	2201      	movs	r2, #1
 8000796:	701a      	strb	r2, [r3, #0]

	}
	/*TODO:

	 */
}
 8000798:	e119      	b.n	80009ce <ReadCommand+0x282>
			}else if(Compare(str_buff, "set mode 2.", 11)){
 800079a:	220b      	movs	r2, #11
 800079c:	4996      	ldr	r1, [pc, #600]	; (80009f8 <ReadCommand+0x2ac>)
 800079e:	4890      	ldr	r0, [pc, #576]	; (80009e0 <ReadCommand+0x294>)
 80007a0:	f7ff ffb0 	bl	8000704 <Compare>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d015      	beq.n	80007d6 <ReadCommand+0x8a>
				HAL_UART_Transmit(&huart6, (uint8_t*)"\n\rmode without stops\n\r>>", 25, 5);
 80007aa:	2305      	movs	r3, #5
 80007ac:	2219      	movs	r2, #25
 80007ae:	4993      	ldr	r1, [pc, #588]	; (80009fc <ReadCommand+0x2b0>)
 80007b0:	488d      	ldr	r0, [pc, #564]	; (80009e8 <ReadCommand+0x29c>)
 80007b2:	f002 fc02 	bl	8002fba <HAL_UART_Transmit>
				oled_SetCursor(0, 28);
 80007b6:	211c      	movs	r1, #28
 80007b8:	2000      	movs	r0, #0
 80007ba:	f000 fdef 	bl	800139c <oled_SetCursor>
				oled_WriteString("without stops", Font_7x10, Black);
 80007be:	4a8b      	ldr	r2, [pc, #556]	; (80009ec <ReadCommand+0x2a0>)
 80007c0:	2300      	movs	r3, #0
 80007c2:	ca06      	ldmia	r2, {r1, r2}
 80007c4:	488e      	ldr	r0, [pc, #568]	; (8000a00 <ReadCommand+0x2b4>)
 80007c6:	f000 fdc3 	bl	8001350 <oled_WriteString>
				oled_UpdateScreen();
 80007ca:	f000 fcb1 	bl	8001130 <oled_UpdateScreen>
				now_mode = 0;
 80007ce:	4b89      	ldr	r3, [pc, #548]	; (80009f4 <ReadCommand+0x2a8>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	701a      	strb	r2, [r3, #0]
}
 80007d4:	e0fb      	b.n	80009ce <ReadCommand+0x282>
				HAL_UART_Transmit(&huart6, (uint8_t*)error, 40, 5);
 80007d6:	2305      	movs	r3, #5
 80007d8:	2228      	movs	r2, #40	; 0x28
 80007da:	498a      	ldr	r1, [pc, #552]	; (8000a04 <ReadCommand+0x2b8>)
 80007dc:	4882      	ldr	r0, [pc, #520]	; (80009e8 <ReadCommand+0x29c>)
 80007de:	f002 fbec 	bl	8002fba <HAL_UART_Transmit>
}
 80007e2:	e0f4      	b.n	80009ce <ReadCommand+0x282>
		}else if(iter >= 14 && iter < 25){
 80007e4:	4b7c      	ldr	r3, [pc, #496]	; (80009d8 <ReadCommand+0x28c>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	2b0d      	cmp	r3, #13
 80007ea:	f240 80a3 	bls.w	8000934 <ReadCommand+0x1e8>
 80007ee:	4b7a      	ldr	r3, [pc, #488]	; (80009d8 <ReadCommand+0x28c>)
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	2b18      	cmp	r3, #24
 80007f4:	f200 809e 	bhi.w	8000934 <ReadCommand+0x1e8>
			if(Compare(str_buff, "set timeout", 11)){
 80007f8:	220b      	movs	r2, #11
 80007fa:	4983      	ldr	r1, [pc, #524]	; (8000a08 <ReadCommand+0x2bc>)
 80007fc:	4878      	ldr	r0, [pc, #480]	; (80009e0 <ReadCommand+0x294>)
 80007fe:	f7ff ff81 	bl	8000704 <Compare>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	f000 808e 	beq.w	8000926 <ReadCommand+0x1da>
				int number = 0;
 800080a:	2300      	movs	r3, #0
 800080c:	613b      	str	r3, [r7, #16]
				for(j = 12; j < iter - 1; j++){
 800080e:	230c      	movs	r3, #12
 8000810:	617b      	str	r3, [r7, #20]
 8000812:	e027      	b.n	8000864 <ReadCommand+0x118>
					number = number * 10;
 8000814:	693a      	ldr	r2, [r7, #16]
 8000816:	4613      	mov	r3, r2
 8000818:	009b      	lsls	r3, r3, #2
 800081a:	4413      	add	r3, r2
 800081c:	005b      	lsls	r3, r3, #1
 800081e:	613b      	str	r3, [r7, #16]
					if((str_buff[j] - '0') > 9){
 8000820:	4a6f      	ldr	r2, [pc, #444]	; (80009e0 <ReadCommand+0x294>)
 8000822:	697b      	ldr	r3, [r7, #20]
 8000824:	4413      	add	r3, r2
 8000826:	781b      	ldrb	r3, [r3, #0]
 8000828:	2b39      	cmp	r3, #57	; 0x39
 800082a:	d906      	bls.n	800083a <ReadCommand+0xee>
						HAL_UART_Transmit(&huart6, (uint8_t*)"\n\rneed a number in the end. try again\n\r>>", 41, 5);
 800082c:	2305      	movs	r3, #5
 800082e:	2229      	movs	r2, #41	; 0x29
 8000830:	4976      	ldr	r1, [pc, #472]	; (8000a0c <ReadCommand+0x2c0>)
 8000832:	486d      	ldr	r0, [pc, #436]	; (80009e8 <ReadCommand+0x29c>)
 8000834:	f002 fbc1 	bl	8002fba <HAL_UART_Transmit>
						break;
 8000838:	e01a      	b.n	8000870 <ReadCommand+0x124>
					number = number + (str_buff[j] - '0');
 800083a:	4a69      	ldr	r2, [pc, #420]	; (80009e0 <ReadCommand+0x294>)
 800083c:	697b      	ldr	r3, [r7, #20]
 800083e:	4413      	add	r3, r2
 8000840:	781b      	ldrb	r3, [r3, #0]
 8000842:	3b30      	subs	r3, #48	; 0x30
 8000844:	693a      	ldr	r2, [r7, #16]
 8000846:	4413      	add	r3, r2
 8000848:	613b      	str	r3, [r7, #16]
					now_time_out = number;
 800084a:	4a71      	ldr	r2, [pc, #452]	; (8000a10 <ReadCommand+0x2c4>)
 800084c:	693b      	ldr	r3, [r7, #16]
 800084e:	6013      	str	r3, [r2, #0]
					sprintf(num_char, "%d", now_time_out);
 8000850:	4b6f      	ldr	r3, [pc, #444]	; (8000a10 <ReadCommand+0x2c4>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	461a      	mov	r2, r3
 8000856:	496f      	ldr	r1, [pc, #444]	; (8000a14 <ReadCommand+0x2c8>)
 8000858:	486f      	ldr	r0, [pc, #444]	; (8000a18 <ReadCommand+0x2cc>)
 800085a:	f003 fc77 	bl	800414c <siprintf>
				for(j = 12; j < iter - 1; j++){
 800085e:	697b      	ldr	r3, [r7, #20]
 8000860:	3301      	adds	r3, #1
 8000862:	617b      	str	r3, [r7, #20]
 8000864:	4b5c      	ldr	r3, [pc, #368]	; (80009d8 <ReadCommand+0x28c>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	1e5a      	subs	r2, r3, #1
 800086a:	697b      	ldr	r3, [r7, #20]
 800086c:	429a      	cmp	r2, r3
 800086e:	d8d1      	bhi.n	8000814 <ReadCommand+0xc8>
				if(j >= iter - 1){
 8000870:	4b59      	ldr	r3, [pc, #356]	; (80009d8 <ReadCommand+0x28c>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	1e5a      	subs	r2, r3, #1
 8000876:	697b      	ldr	r3, [r7, #20]
 8000878:	429a      	cmp	r2, r3
 800087a:	f200 80a7 	bhi.w	80009cc <ReadCommand+0x280>
					num_len = iter - 13;
 800087e:	4b56      	ldr	r3, [pc, #344]	; (80009d8 <ReadCommand+0x28c>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	3b0d      	subs	r3, #13
 8000884:	4a65      	ldr	r2, [pc, #404]	; (8000a1c <ReadCommand+0x2d0>)
 8000886:	6013      	str	r3, [r2, #0]
					now_time_out = number;
 8000888:	4a61      	ldr	r2, [pc, #388]	; (8000a10 <ReadCommand+0x2c4>)
 800088a:	693b      	ldr	r3, [r7, #16]
 800088c:	6013      	str	r3, [r2, #0]
					sprintf(num_char, "%d", now_time_out);
 800088e:	4b60      	ldr	r3, [pc, #384]	; (8000a10 <ReadCommand+0x2c4>)
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	461a      	mov	r2, r3
 8000894:	495f      	ldr	r1, [pc, #380]	; (8000a14 <ReadCommand+0x2c8>)
 8000896:	4860      	ldr	r0, [pc, #384]	; (8000a18 <ReadCommand+0x2cc>)
 8000898:	f003 fc58 	bl	800414c <siprintf>
					HAL_UART_Transmit(&huart6, (uint8_t*)"\n\rTimeout ", 10, 25);
 800089c:	2319      	movs	r3, #25
 800089e:	220a      	movs	r2, #10
 80008a0:	495f      	ldr	r1, [pc, #380]	; (8000a20 <ReadCommand+0x2d4>)
 80008a2:	4851      	ldr	r0, [pc, #324]	; (80009e8 <ReadCommand+0x29c>)
 80008a4:	f002 fb89 	bl	8002fba <HAL_UART_Transmit>
					HAL_UART_Transmit(&huart6, (uint8_t*)num_char, num_len, 25);
 80008a8:	4b5c      	ldr	r3, [pc, #368]	; (8000a1c <ReadCommand+0x2d0>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	b29a      	uxth	r2, r3
 80008ae:	2319      	movs	r3, #25
 80008b0:	4959      	ldr	r1, [pc, #356]	; (8000a18 <ReadCommand+0x2cc>)
 80008b2:	484d      	ldr	r0, [pc, #308]	; (80009e8 <ReadCommand+0x29c>)
 80008b4:	f002 fb81 	bl	8002fba <HAL_UART_Transmit>
					HAL_UART_Transmit(&huart6, (uint8_t*)"\n\r>>", 4, 25);
 80008b8:	2319      	movs	r3, #25
 80008ba:	2204      	movs	r2, #4
 80008bc:	4959      	ldr	r1, [pc, #356]	; (8000a24 <ReadCommand+0x2d8>)
 80008be:	484a      	ldr	r0, [pc, #296]	; (80009e8 <ReadCommand+0x29c>)
 80008c0:	f002 fb7b 	bl	8002fba <HAL_UART_Transmit>
					oled_SetCursor(56, 38);
 80008c4:	2126      	movs	r1, #38	; 0x26
 80008c6:	2038      	movs	r0, #56	; 0x38
 80008c8:	f000 fd68 	bl	800139c <oled_SetCursor>
					oled_WriteString(num_char, Font_7x10, Black);
 80008cc:	4a47      	ldr	r2, [pc, #284]	; (80009ec <ReadCommand+0x2a0>)
 80008ce:	2300      	movs	r3, #0
 80008d0:	ca06      	ldmia	r2, {r1, r2}
 80008d2:	4851      	ldr	r0, [pc, #324]	; (8000a18 <ReadCommand+0x2cc>)
 80008d4:	f000 fd3c 	bl	8001350 <oled_WriteString>
					oled_SetCursor(56 + j - 12, 38);
 80008d8:	697b      	ldr	r3, [r7, #20]
 80008da:	b2db      	uxtb	r3, r3
 80008dc:	332c      	adds	r3, #44	; 0x2c
 80008de:	b2db      	uxtb	r3, r3
 80008e0:	2126      	movs	r1, #38	; 0x26
 80008e2:	4618      	mov	r0, r3
 80008e4:	f000 fd5a 	bl	800139c <oled_SetCursor>
					for(int str_i = j-12; str_i < 8; str_i++){
 80008e8:	697b      	ldr	r3, [r7, #20]
 80008ea:	3b0c      	subs	r3, #12
 80008ec:	60fb      	str	r3, [r7, #12]
 80008ee:	e014      	b.n	800091a <ReadCommand+0x1ce>
						oled_SetCursor(56 + 7*str_i, 38);
 80008f0:	68fb      	ldr	r3, [r7, #12]
 80008f2:	b2db      	uxtb	r3, r3
 80008f4:	461a      	mov	r2, r3
 80008f6:	00d2      	lsls	r2, r2, #3
 80008f8:	1ad3      	subs	r3, r2, r3
 80008fa:	b2db      	uxtb	r3, r3
 80008fc:	3338      	adds	r3, #56	; 0x38
 80008fe:	b2db      	uxtb	r3, r3
 8000900:	2126      	movs	r1, #38	; 0x26
 8000902:	4618      	mov	r0, r3
 8000904:	f000 fd4a 	bl	800139c <oled_SetCursor>
						oled_WriteString(" ", Font_7x10, Black);
 8000908:	4a38      	ldr	r2, [pc, #224]	; (80009ec <ReadCommand+0x2a0>)
 800090a:	2300      	movs	r3, #0
 800090c:	ca06      	ldmia	r2, {r1, r2}
 800090e:	4846      	ldr	r0, [pc, #280]	; (8000a28 <ReadCommand+0x2dc>)
 8000910:	f000 fd1e 	bl	8001350 <oled_WriteString>
					for(int str_i = j-12; str_i < 8; str_i++){
 8000914:	68fb      	ldr	r3, [r7, #12]
 8000916:	3301      	adds	r3, #1
 8000918:	60fb      	str	r3, [r7, #12]
 800091a:	68fb      	ldr	r3, [r7, #12]
 800091c:	2b07      	cmp	r3, #7
 800091e:	dde7      	ble.n	80008f0 <ReadCommand+0x1a4>
					oled_UpdateScreen();
 8000920:	f000 fc06 	bl	8001130 <oled_UpdateScreen>
			if(Compare(str_buff, "set timeout", 11)){
 8000924:	e052      	b.n	80009cc <ReadCommand+0x280>
				HAL_UART_Transmit(&huart6, (uint8_t*)error, 40, 5);
 8000926:	2305      	movs	r3, #5
 8000928:	2228      	movs	r2, #40	; 0x28
 800092a:	4936      	ldr	r1, [pc, #216]	; (8000a04 <ReadCommand+0x2b8>)
 800092c:	482e      	ldr	r0, [pc, #184]	; (80009e8 <ReadCommand+0x29c>)
 800092e:	f002 fb44 	bl	8002fba <HAL_UART_Transmit>
			if(Compare(str_buff, "set timeout", 11)){
 8000932:	e04b      	b.n	80009cc <ReadCommand+0x280>
		}else if(iter == 2){
 8000934:	4b28      	ldr	r3, [pc, #160]	; (80009d8 <ReadCommand+0x28c>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	2b02      	cmp	r3, #2
 800093a:	d140      	bne.n	80009be <ReadCommand+0x272>
			if(Compare(str_buff, "?.", 2)){
 800093c:	2202      	movs	r2, #2
 800093e:	493b      	ldr	r1, [pc, #236]	; (8000a2c <ReadCommand+0x2e0>)
 8000940:	4827      	ldr	r0, [pc, #156]	; (80009e0 <ReadCommand+0x294>)
 8000942:	f7ff fedf 	bl	8000704 <Compare>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d040      	beq.n	80009ce <ReadCommand+0x282>
				HAL_UART_Transmit(&huart6, (uint8_t*)"\n\rINFO:", 7, 5);
 800094c:	2305      	movs	r3, #5
 800094e:	2207      	movs	r2, #7
 8000950:	4937      	ldr	r1, [pc, #220]	; (8000a30 <ReadCommand+0x2e4>)
 8000952:	4825      	ldr	r0, [pc, #148]	; (80009e8 <ReadCommand+0x29c>)
 8000954:	f002 fb31 	bl	8002fba <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart6, (uint8_t*)"\n\r  -", 5, 5);
 8000958:	2305      	movs	r3, #5
 800095a:	2205      	movs	r2, #5
 800095c:	4935      	ldr	r1, [pc, #212]	; (8000a34 <ReadCommand+0x2e8>)
 800095e:	4822      	ldr	r0, [pc, #136]	; (80009e8 <ReadCommand+0x29c>)
 8000960:	f002 fb2b 	bl	8002fba <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart6, (uint8_t*)consist, len, 5);
 8000964:	683b      	ldr	r3, [r7, #0]
 8000966:	b29a      	uxth	r2, r3
 8000968:	2305      	movs	r3, #5
 800096a:	6879      	ldr	r1, [r7, #4]
 800096c:	481e      	ldr	r0, [pc, #120]	; (80009e8 <ReadCommand+0x29c>)
 800096e:	f002 fb24 	bl	8002fba <HAL_UART_Transmit>
				if(now_mode == 1)
 8000972:	4b20      	ldr	r3, [pc, #128]	; (80009f4 <ReadCommand+0x2a8>)
 8000974:	781b      	ldrb	r3, [r3, #0]
 8000976:	2b00      	cmp	r3, #0
 8000978:	d006      	beq.n	8000988 <ReadCommand+0x23c>
					HAL_UART_Transmit(&huart6, (uint8_t*)"  -mode 1\n\r", 11, 5);
 800097a:	2305      	movs	r3, #5
 800097c:	220b      	movs	r2, #11
 800097e:	492e      	ldr	r1, [pc, #184]	; (8000a38 <ReadCommand+0x2ec>)
 8000980:	4819      	ldr	r0, [pc, #100]	; (80009e8 <ReadCommand+0x29c>)
 8000982:	f002 fb1a 	bl	8002fba <HAL_UART_Transmit>
 8000986:	e005      	b.n	8000994 <ReadCommand+0x248>
					HAL_UART_Transmit(&huart6, (uint8_t*)"  -mode 2\n\r", 11, 5);
 8000988:	2305      	movs	r3, #5
 800098a:	220b      	movs	r2, #11
 800098c:	492b      	ldr	r1, [pc, #172]	; (8000a3c <ReadCommand+0x2f0>)
 800098e:	4816      	ldr	r0, [pc, #88]	; (80009e8 <ReadCommand+0x29c>)
 8000990:	f002 fb13 	bl	8002fba <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart6, (uint8_t*)"  -timeout ", 11, 5);
 8000994:	2305      	movs	r3, #5
 8000996:	220b      	movs	r2, #11
 8000998:	4929      	ldr	r1, [pc, #164]	; (8000a40 <ReadCommand+0x2f4>)
 800099a:	4813      	ldr	r0, [pc, #76]	; (80009e8 <ReadCommand+0x29c>)
 800099c:	f002 fb0d 	bl	8002fba <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart6, (uint8_t*)num_char, num_len, 5);
 80009a0:	4b1e      	ldr	r3, [pc, #120]	; (8000a1c <ReadCommand+0x2d0>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	b29a      	uxth	r2, r3
 80009a6:	2305      	movs	r3, #5
 80009a8:	491b      	ldr	r1, [pc, #108]	; (8000a18 <ReadCommand+0x2cc>)
 80009aa:	480f      	ldr	r0, [pc, #60]	; (80009e8 <ReadCommand+0x29c>)
 80009ac:	f002 fb05 	bl	8002fba <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart6, (uint8_t*)" \n\r>>", 5, 5);
 80009b0:	2305      	movs	r3, #5
 80009b2:	2205      	movs	r2, #5
 80009b4:	4923      	ldr	r1, [pc, #140]	; (8000a44 <ReadCommand+0x2f8>)
 80009b6:	480c      	ldr	r0, [pc, #48]	; (80009e8 <ReadCommand+0x29c>)
 80009b8:	f002 faff 	bl	8002fba <HAL_UART_Transmit>
}
 80009bc:	e007      	b.n	80009ce <ReadCommand+0x282>
			HAL_UART_Transmit(&huart6, (uint8_t*)error, 40, 5);
 80009be:	2305      	movs	r3, #5
 80009c0:	2228      	movs	r2, #40	; 0x28
 80009c2:	4910      	ldr	r1, [pc, #64]	; (8000a04 <ReadCommand+0x2b8>)
 80009c4:	4808      	ldr	r0, [pc, #32]	; (80009e8 <ReadCommand+0x29c>)
 80009c6:	f002 faf8 	bl	8002fba <HAL_UART_Transmit>
}
 80009ca:	e000      	b.n	80009ce <ReadCommand+0x282>
			if(Compare(str_buff, "set timeout", 11)){
 80009cc:	bf00      	nop
}
 80009ce:	bf00      	nop
 80009d0:	3718      	adds	r7, #24
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	20000188 	.word	0x20000188
 80009dc:	08004a50 	.word	0x08004a50
 80009e0:	2000016c 	.word	0x2000016c
 80009e4:	08004a5c 	.word	0x08004a5c
 80009e8:	200005a4 	.word	0x200005a4
 80009ec:	20000000 	.word	0x20000000
 80009f0:	08004a74 	.word	0x08004a74
 80009f4:	20000068 	.word	0x20000068
 80009f8:	08004a84 	.word	0x08004a84
 80009fc:	08004a90 	.word	0x08004a90
 8000a00:	08004aac 	.word	0x08004aac
 8000a04:	20000010 	.word	0x20000010
 8000a08:	08004abc 	.word	0x08004abc
 8000a0c:	08004ac8 	.word	0x08004ac8
 8000a10:	20000064 	.word	0x20000064
 8000a14:	08004af4 	.word	0x08004af4
 8000a18:	2000018c 	.word	0x2000018c
 8000a1c:	2000006c 	.word	0x2000006c
 8000a20:	08004af8 	.word	0x08004af8
 8000a24:	08004b04 	.word	0x08004b04
 8000a28:	08004b0c 	.word	0x08004b0c
 8000a2c:	08004b10 	.word	0x08004b10
 8000a30:	08004b14 	.word	0x08004b14
 8000a34:	08004b1c 	.word	0x08004b1c
 8000a38:	08004b24 	.word	0x08004b24
 8000a3c:	08004b30 	.word	0x08004b30
 8000a40:	08004b3c 	.word	0x08004b3c
 8000a44:	08004b48 	.word	0x08004b48

08000a48 <CheckRead>:

void CheckRead(char consist[], int len, int now_i_light){
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b086      	sub	sp, #24
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	60f8      	str	r0, [r7, #12]
 8000a50:	60b9      	str	r1, [r7, #8]
 8000a52:	607a      	str	r2, [r7, #4]
	 char symb = '7';
 8000a54:	2337      	movs	r3, #55	; 0x37
 8000a56:	75fb      	strb	r3, [r7, #23]
	 if(HAL_UART_Receive(&huart6, &symb, 1, 1) == HAL_OK){
 8000a58:	f107 0117 	add.w	r1, r7, #23
 8000a5c:	2301      	movs	r3, #1
 8000a5e:	2201      	movs	r2, #1
 8000a60:	481b      	ldr	r0, [pc, #108]	; (8000ad0 <CheckRead+0x88>)
 8000a62:	f002 fb43 	bl	80030ec <HAL_UART_Receive>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d110      	bne.n	8000a8e <CheckRead+0x46>
		 HAL_UART_Transmit(&huart6, &symb, 1, 1);
 8000a6c:	f107 0117 	add.w	r1, r7, #23
 8000a70:	2301      	movs	r3, #1
 8000a72:	2201      	movs	r2, #1
 8000a74:	4816      	ldr	r0, [pc, #88]	; (8000ad0 <CheckRead+0x88>)
 8000a76:	f002 faa0 	bl	8002fba <HAL_UART_Transmit>
		 buff[iter] = symb;
 8000a7a:	4b16      	ldr	r3, [pc, #88]	; (8000ad4 <CheckRead+0x8c>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	7df9      	ldrb	r1, [r7, #23]
 8000a80:	4a15      	ldr	r2, [pc, #84]	; (8000ad8 <CheckRead+0x90>)
 8000a82:	54d1      	strb	r1, [r2, r3]
		 iter++;
 8000a84:	4b13      	ldr	r3, [pc, #76]	; (8000ad4 <CheckRead+0x8c>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	3301      	adds	r3, #1
 8000a8a:	4a12      	ldr	r2, [pc, #72]	; (8000ad4 <CheckRead+0x8c>)
 8000a8c:	6013      	str	r3, [r2, #0]
	 }
	 if(symb == '.' || iter >= 25){
 8000a8e:	7dfb      	ldrb	r3, [r7, #23]
 8000a90:	2b2e      	cmp	r3, #46	; 0x2e
 8000a92:	d003      	beq.n	8000a9c <CheckRead+0x54>
 8000a94:	4b0f      	ldr	r3, [pc, #60]	; (8000ad4 <CheckRead+0x8c>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	2b18      	cmp	r3, #24
 8000a9a:	d915      	bls.n	8000ac8 <CheckRead+0x80>
		 if(iter >= 25)
 8000a9c:	4b0d      	ldr	r3, [pc, #52]	; (8000ad4 <CheckRead+0x8c>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	2b18      	cmp	r3, #24
 8000aa2:	d906      	bls.n	8000ab2 <CheckRead+0x6a>
			 HAL_UART_Transmit(&huart6, (uint8_t*)error, 40, 5);
 8000aa4:	2305      	movs	r3, #5
 8000aa6:	2228      	movs	r2, #40	; 0x28
 8000aa8:	490c      	ldr	r1, [pc, #48]	; (8000adc <CheckRead+0x94>)
 8000aaa:	4809      	ldr	r0, [pc, #36]	; (8000ad0 <CheckRead+0x88>)
 8000aac:	f002 fa85 	bl	8002fba <HAL_UART_Transmit>
 8000ab0:	e007      	b.n	8000ac2 <CheckRead+0x7a>
		 else
		 {
			 strcpy(str_buff,buff);
 8000ab2:	4909      	ldr	r1, [pc, #36]	; (8000ad8 <CheckRead+0x90>)
 8000ab4:	480a      	ldr	r0, [pc, #40]	; (8000ae0 <CheckRead+0x98>)
 8000ab6:	f003 fb69 	bl	800418c <strcpy>
			 ReadCommand(consist, len);
 8000aba:	68b9      	ldr	r1, [r7, #8]
 8000abc:	68f8      	ldr	r0, [r7, #12]
 8000abe:	f7ff fe45 	bl	800074c <ReadCommand>
		 }
		 iter = 0;
 8000ac2:	4b04      	ldr	r3, [pc, #16]	; (8000ad4 <CheckRead+0x8c>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	601a      	str	r2, [r3, #0]
	 }
}
 8000ac8:	bf00      	nop
 8000aca:	3718      	adds	r7, #24
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	200005a4 	.word	0x200005a4
 8000ad4:	20000188 	.word	0x20000188
 8000ad8:	20000150 	.word	0x20000150
 8000adc:	20000010 	.word	0x20000010
 8000ae0:	2000016c 	.word	0x2000016c

08000ae4 <Phore>:

void Phore(){
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b086      	sub	sp, #24
 8000ae8:	af00      	add	r7, sp, #0
	int i, j;
	  while (1)
	  {
	   /*горит зеленый*/

	      oled_SetCursor(0, 18);
 8000aea:	2112      	movs	r1, #18
 8000aec:	2000      	movs	r0, #0
 8000aee:	f000 fc55 	bl	800139c <oled_SetCursor>
	      oled_WriteString("green    ", Font_7x10, Black);
 8000af2:	4aaa      	ldr	r2, [pc, #680]	; (8000d9c <Phore+0x2b8>)
 8000af4:	2300      	movs	r3, #0
 8000af6:	ca06      	ldmia	r2, {r1, r2}
 8000af8:	48a9      	ldr	r0, [pc, #676]	; (8000da0 <Phore+0x2bc>)
 8000afa:	f000 fc29 	bl	8001350 <oled_WriteString>
	      oled_UpdateScreen();
 8000afe:	f000 fb17 	bl	8001130 <oled_UpdateScreen>

	      HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 8000b02:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b06:	48a7      	ldr	r0, [pc, #668]	; (8000da4 <Phore+0x2c0>)
 8000b08:	f001 f947 	bl	8001d9a <HAL_GPIO_TogglePin>

	      for(i = 0; i < now_time_out/2; i++){
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	617b      	str	r3, [r7, #20]
 8000b10:	e00a      	b.n	8000b28 <Phore+0x44>
	    	  HAL_Delay(1);
 8000b12:	2001      	movs	r0, #1
 8000b14:	f000 fe1c 	bl	8001750 <HAL_Delay>
	    	  CheckRead("green\n\r", 7, i);
 8000b18:	697a      	ldr	r2, [r7, #20]
 8000b1a:	2107      	movs	r1, #7
 8000b1c:	48a2      	ldr	r0, [pc, #648]	; (8000da8 <Phore+0x2c4>)
 8000b1e:	f7ff ff93 	bl	8000a48 <CheckRead>
	      for(i = 0; i < now_time_out/2; i++){
 8000b22:	697b      	ldr	r3, [r7, #20]
 8000b24:	3301      	adds	r3, #1
 8000b26:	617b      	str	r3, [r7, #20]
 8000b28:	4ba0      	ldr	r3, [pc, #640]	; (8000dac <Phore+0x2c8>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	0fda      	lsrs	r2, r3, #31
 8000b2e:	4413      	add	r3, r2
 8000b30:	105b      	asrs	r3, r3, #1
 8000b32:	461a      	mov	r2, r3
 8000b34:	697b      	ldr	r3, [r7, #20]
 8000b36:	4293      	cmp	r3, r2
 8000b38:	dbeb      	blt.n	8000b12 <Phore+0x2e>
	      }
	   /*мигает зеленый*/

	      oled_SetCursor(0,18);
 8000b3a:	2112      	movs	r1, #18
 8000b3c:	2000      	movs	r0, #0
 8000b3e:	f000 fc2d 	bl	800139c <oled_SetCursor>
	      oled_WriteString("blinking", Font_7x10, Black);
 8000b42:	4a96      	ldr	r2, [pc, #600]	; (8000d9c <Phore+0x2b8>)
 8000b44:	2300      	movs	r3, #0
 8000b46:	ca06      	ldmia	r2, {r1, r2}
 8000b48:	4899      	ldr	r0, [pc, #612]	; (8000db0 <Phore+0x2cc>)
 8000b4a:	f000 fc01 	bl	8001350 <oled_WriteString>
	      oled_UpdateScreen();
 8000b4e:	f000 faef 	bl	8001130 <oled_UpdateScreen>

	      for(i = 0; i < 7; ++i)
 8000b52:	2300      	movs	r3, #0
 8000b54:	617b      	str	r3, [r7, #20]
 8000b56:	e020      	b.n	8000b9a <Phore+0xb6>
	      {
	    	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 8000b58:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b5c:	4891      	ldr	r0, [pc, #580]	; (8000da4 <Phore+0x2c0>)
 8000b5e:	f001 f91c 	bl	8001d9a <HAL_GPIO_TogglePin>
	    	  for(j = 0; j < now_time_out/10; j++){
 8000b62:	2300      	movs	r3, #0
 8000b64:	613b      	str	r3, [r7, #16]
 8000b66:	e00a      	b.n	8000b7e <Phore+0x9a>
	    		  HAL_Delay(1);//300
 8000b68:	2001      	movs	r0, #1
 8000b6a:	f000 fdf1 	bl	8001750 <HAL_Delay>
	    		  CheckRead("blinking green\n\r", 17, i);
 8000b6e:	697a      	ldr	r2, [r7, #20]
 8000b70:	2111      	movs	r1, #17
 8000b72:	4890      	ldr	r0, [pc, #576]	; (8000db4 <Phore+0x2d0>)
 8000b74:	f7ff ff68 	bl	8000a48 <CheckRead>
	    	  for(j = 0; j < now_time_out/10; j++){
 8000b78:	693b      	ldr	r3, [r7, #16]
 8000b7a:	3301      	adds	r3, #1
 8000b7c:	613b      	str	r3, [r7, #16]
 8000b7e:	4b8b      	ldr	r3, [pc, #556]	; (8000dac <Phore+0x2c8>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	4a8d      	ldr	r2, [pc, #564]	; (8000db8 <Phore+0x2d4>)
 8000b84:	fb82 1203 	smull	r1, r2, r2, r3
 8000b88:	1092      	asrs	r2, r2, #2
 8000b8a:	17db      	asrs	r3, r3, #31
 8000b8c:	1ad3      	subs	r3, r2, r3
 8000b8e:	693a      	ldr	r2, [r7, #16]
 8000b90:	429a      	cmp	r2, r3
 8000b92:	dbe9      	blt.n	8000b68 <Phore+0x84>
	      for(i = 0; i < 7; ++i)
 8000b94:	697b      	ldr	r3, [r7, #20]
 8000b96:	3301      	adds	r3, #1
 8000b98:	617b      	str	r3, [r7, #20]
 8000b9a:	697b      	ldr	r3, [r7, #20]
 8000b9c:	2b06      	cmp	r3, #6
 8000b9e:	dddb      	ble.n	8000b58 <Phore+0x74>
	    	  }
	      }
	    /*горит оранжевый*/

	      oled_SetCursor(0, 18);
 8000ba0:	2112      	movs	r1, #18
 8000ba2:	2000      	movs	r0, #0
 8000ba4:	f000 fbfa 	bl	800139c <oled_SetCursor>
	      oled_WriteString("yellow  ", Font_7x10, Black);
 8000ba8:	4a7c      	ldr	r2, [pc, #496]	; (8000d9c <Phore+0x2b8>)
 8000baa:	2300      	movs	r3, #0
 8000bac:	ca06      	ldmia	r2, {r1, r2}
 8000bae:	4883      	ldr	r0, [pc, #524]	; (8000dbc <Phore+0x2d8>)
 8000bb0:	f000 fbce 	bl	8001350 <oled_WriteString>
	      oled_UpdateScreen();
 8000bb4:	f000 fabc 	bl	8001130 <oled_UpdateScreen>

	      HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 8000bb8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000bbc:	4879      	ldr	r0, [pc, #484]	; (8000da4 <Phore+0x2c0>)
 8000bbe:	f001 f8ec 	bl	8001d9a <HAL_GPIO_TogglePin>
	      for(i = 0; i < now_time_out/5; i++){
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	617b      	str	r3, [r7, #20]
 8000bc6:	e00a      	b.n	8000bde <Phore+0xfa>
	    	  HAL_Delay(1); //600
 8000bc8:	2001      	movs	r0, #1
 8000bca:	f000 fdc1 	bl	8001750 <HAL_Delay>
	    	  CheckRead("yellow\n\r", 8, i);
 8000bce:	697a      	ldr	r2, [r7, #20]
 8000bd0:	2108      	movs	r1, #8
 8000bd2:	487b      	ldr	r0, [pc, #492]	; (8000dc0 <Phore+0x2dc>)
 8000bd4:	f7ff ff38 	bl	8000a48 <CheckRead>
	      for(i = 0; i < now_time_out/5; i++){
 8000bd8:	697b      	ldr	r3, [r7, #20]
 8000bda:	3301      	adds	r3, #1
 8000bdc:	617b      	str	r3, [r7, #20]
 8000bde:	4b73      	ldr	r3, [pc, #460]	; (8000dac <Phore+0x2c8>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	4a75      	ldr	r2, [pc, #468]	; (8000db8 <Phore+0x2d4>)
 8000be4:	fb82 1203 	smull	r1, r2, r2, r3
 8000be8:	1052      	asrs	r2, r2, #1
 8000bea:	17db      	asrs	r3, r3, #31
 8000bec:	1ad3      	subs	r3, r2, r3
 8000bee:	697a      	ldr	r2, [r7, #20]
 8000bf0:	429a      	cmp	r2, r3
 8000bf2:	dbe9      	blt.n	8000bc8 <Phore+0xe4>
	      }
	      HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 8000bf4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000bf8:	486a      	ldr	r0, [pc, #424]	; (8000da4 <Phore+0x2c0>)
 8000bfa:	f001 f8ce 	bl	8001d9a <HAL_GPIO_TogglePin>
	    /*горит красный*/

	      oled_SetCursor(0, 18);
 8000bfe:	2112      	movs	r1, #18
 8000c00:	2000      	movs	r0, #0
 8000c02:	f000 fbcb 	bl	800139c <oled_SetCursor>
	      oled_WriteString("red     ", Font_7x10, Black);
 8000c06:	4a65      	ldr	r2, [pc, #404]	; (8000d9c <Phore+0x2b8>)
 8000c08:	2300      	movs	r3, #0
 8000c0a:	ca06      	ldmia	r2, {r1, r2}
 8000c0c:	486d      	ldr	r0, [pc, #436]	; (8000dc4 <Phore+0x2e0>)
 8000c0e:	f000 fb9f 	bl	8001350 <oled_WriteString>
	      oled_UpdateScreen();
 8000c12:	f000 fa8d 	bl	8001130 <oled_UpdateScreen>

	      HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 8000c16:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c1a:	4862      	ldr	r0, [pc, #392]	; (8000da4 <Phore+0x2c0>)
 8000c1c:	f001 f8bd 	bl	8001d9a <HAL_GPIO_TogglePin>
	      i = now_time_out*2;
 8000c20:	4b62      	ldr	r3, [pc, #392]	; (8000dac <Phore+0x2c8>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	005b      	lsls	r3, r3, #1
 8000c26:	617b      	str	r3, [r7, #20]
	    /*ждем до нажатия кнопки или до окончания времени красного*/


	      while(i > 0 && (now_mode == 0 || HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_15) != GPIO_PIN_RESET)){
 8000c28:	e00a      	b.n	8000c40 <Phore+0x15c>
	       HAL_Delay(1);
 8000c2a:	2001      	movs	r0, #1
 8000c2c:	f000 fd90 	bl	8001750 <HAL_Delay>
	       CheckRead("red\n\r", 5, i);
 8000c30:	697a      	ldr	r2, [r7, #20]
 8000c32:	2105      	movs	r1, #5
 8000c34:	4864      	ldr	r0, [pc, #400]	; (8000dc8 <Phore+0x2e4>)
 8000c36:	f7ff ff07 	bl	8000a48 <CheckRead>
	       i--;
 8000c3a:	697b      	ldr	r3, [r7, #20]
 8000c3c:	3b01      	subs	r3, #1
 8000c3e:	617b      	str	r3, [r7, #20]
	      while(i > 0 && (now_mode == 0 || HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_15) != GPIO_PIN_RESET)){
 8000c40:	697b      	ldr	r3, [r7, #20]
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	dd0e      	ble.n	8000c64 <Phore+0x180>
 8000c46:	4b61      	ldr	r3, [pc, #388]	; (8000dcc <Phore+0x2e8>)
 8000c48:	781b      	ldrb	r3, [r3, #0]
 8000c4a:	f083 0301 	eor.w	r3, r3, #1
 8000c4e:	b2db      	uxtb	r3, r3
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d1ea      	bne.n	8000c2a <Phore+0x146>
 8000c54:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c58:	485d      	ldr	r0, [pc, #372]	; (8000dd0 <Phore+0x2ec>)
 8000c5a:	f001 f86d 	bl	8001d38 <HAL_GPIO_ReadPin>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d1e2      	bne.n	8000c2a <Phore+0x146>
	      }

	    /*если красный горел недостаточно долго, то пусть еще погорит*/
	      char char_j[8];
	      int part_j;
	      if(now_mode == 1 && i > now_time_out){
 8000c64:	4b59      	ldr	r3, [pc, #356]	; (8000dcc <Phore+0x2e8>)
 8000c66:	781b      	ldrb	r3, [r3, #0]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d073      	beq.n	8000d54 <Phore+0x270>
 8000c6c:	4b4f      	ldr	r3, [pc, #316]	; (8000dac <Phore+0x2c8>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	697a      	ldr	r2, [r7, #20]
 8000c72:	429a      	cmp	r2, r3
 8000c74:	dd6e      	ble.n	8000d54 <Phore+0x270>
		      oled_SetCursor(0, 48);
 8000c76:	2130      	movs	r1, #48	; 0x30
 8000c78:	2000      	movs	r0, #0
 8000c7a:	f000 fb8f 	bl	800139c <oled_SetCursor>
		      oled_WriteString("Wait ", Font_7x10, Black);
 8000c7e:	4a47      	ldr	r2, [pc, #284]	; (8000d9c <Phore+0x2b8>)
 8000c80:	2300      	movs	r3, #0
 8000c82:	ca06      	ldmia	r2, {r1, r2}
 8000c84:	4853      	ldr	r0, [pc, #332]	; (8000dd4 <Phore+0x2f0>)
 8000c86:	f000 fb63 	bl	8001350 <oled_WriteString>
		      oled_UpdateScreen();
 8000c8a:	f000 fa51 	bl	8001130 <oled_UpdateScreen>
	    	  for(j = i - now_time_out; j > 0 ; j--){
 8000c8e:	4b47      	ldr	r3, [pc, #284]	; (8000dac <Phore+0x2c8>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	697a      	ldr	r2, [r7, #20]
 8000c94:	1ad3      	subs	r3, r2, r3
 8000c96:	613b      	str	r3, [r7, #16]
 8000c98:	e059      	b.n	8000d4e <Phore+0x26a>
	    		  if(j%100 == 0){
 8000c9a:	693a      	ldr	r2, [r7, #16]
 8000c9c:	4b4e      	ldr	r3, [pc, #312]	; (8000dd8 <Phore+0x2f4>)
 8000c9e:	fb83 1302 	smull	r1, r3, r3, r2
 8000ca2:	1159      	asrs	r1, r3, #5
 8000ca4:	17d3      	asrs	r3, r2, #31
 8000ca6:	1acb      	subs	r3, r1, r3
 8000ca8:	2164      	movs	r1, #100	; 0x64
 8000caa:	fb01 f303 	mul.w	r3, r1, r3
 8000cae:	1ad3      	subs	r3, r2, r3
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d141      	bne.n	8000d38 <Phore+0x254>
	    		  part_j = j/100;
 8000cb4:	693b      	ldr	r3, [r7, #16]
 8000cb6:	4a48      	ldr	r2, [pc, #288]	; (8000dd8 <Phore+0x2f4>)
 8000cb8:	fb82 1203 	smull	r1, r2, r2, r3
 8000cbc:	1152      	asrs	r2, r2, #5
 8000cbe:	17db      	asrs	r3, r3, #31
 8000cc0:	1ad3      	subs	r3, r2, r3
 8000cc2:	60fb      	str	r3, [r7, #12]
	    		  oled_SetCursor(35, 48);
 8000cc4:	2130      	movs	r1, #48	; 0x30
 8000cc6:	2023      	movs	r0, #35	; 0x23
 8000cc8:	f000 fb68 	bl	800139c <oled_SetCursor>
	    		  sprintf(char_j, "%d", part_j);
 8000ccc:	1d3b      	adds	r3, r7, #4
 8000cce:	68fa      	ldr	r2, [r7, #12]
 8000cd0:	4942      	ldr	r1, [pc, #264]	; (8000ddc <Phore+0x2f8>)
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f003 fa3a 	bl	800414c <siprintf>
			      oled_WriteString(char_j, Font_7x10, Black);
 8000cd8:	4a30      	ldr	r2, [pc, #192]	; (8000d9c <Phore+0x2b8>)
 8000cda:	1d38      	adds	r0, r7, #4
 8000cdc:	2300      	movs	r3, #0
 8000cde:	ca06      	ldmia	r2, {r1, r2}
 8000ce0:	f000 fb36 	bl	8001350 <oled_WriteString>
			      if(part_j < 1000){
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000cea:	da09      	bge.n	8000d00 <Phore+0x21c>
			    	  oled_SetCursor(35 + 21, 48);
 8000cec:	2130      	movs	r1, #48	; 0x30
 8000cee:	2038      	movs	r0, #56	; 0x38
 8000cf0:	f000 fb54 	bl	800139c <oled_SetCursor>
			    	  oled_WriteString(" ", Font_7x10, Black);
 8000cf4:	4a29      	ldr	r2, [pc, #164]	; (8000d9c <Phore+0x2b8>)
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	ca06      	ldmia	r2, {r1, r2}
 8000cfa:	4839      	ldr	r0, [pc, #228]	; (8000de0 <Phore+0x2fc>)
 8000cfc:	f000 fb28 	bl	8001350 <oled_WriteString>
			      }
			      if(part_j < 100){
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	2b63      	cmp	r3, #99	; 0x63
 8000d04:	dc09      	bgt.n	8000d1a <Phore+0x236>
			      	  oled_SetCursor(35 + 14, 48);
 8000d06:	2130      	movs	r1, #48	; 0x30
 8000d08:	2031      	movs	r0, #49	; 0x31
 8000d0a:	f000 fb47 	bl	800139c <oled_SetCursor>
			      	  oled_WriteString(" ", Font_7x10, Black);
 8000d0e:	4a23      	ldr	r2, [pc, #140]	; (8000d9c <Phore+0x2b8>)
 8000d10:	2300      	movs	r3, #0
 8000d12:	ca06      	ldmia	r2, {r1, r2}
 8000d14:	4832      	ldr	r0, [pc, #200]	; (8000de0 <Phore+0x2fc>)
 8000d16:	f000 fb1b 	bl	8001350 <oled_WriteString>
			      }
			      if(part_j < 10){
 8000d1a:	68fb      	ldr	r3, [r7, #12]
 8000d1c:	2b09      	cmp	r3, #9
 8000d1e:	dc09      	bgt.n	8000d34 <Phore+0x250>
			          oled_SetCursor(35 + 7, 48);
 8000d20:	2130      	movs	r1, #48	; 0x30
 8000d22:	202a      	movs	r0, #42	; 0x2a
 8000d24:	f000 fb3a 	bl	800139c <oled_SetCursor>
			      	  oled_WriteString(" ", Font_7x10, Black);
 8000d28:	4a1c      	ldr	r2, [pc, #112]	; (8000d9c <Phore+0x2b8>)
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	ca06      	ldmia	r2, {r1, r2}
 8000d2e:	482c      	ldr	r0, [pc, #176]	; (8000de0 <Phore+0x2fc>)
 8000d30:	f000 fb0e 	bl	8001350 <oled_WriteString>
			      }
			      oled_UpdateScreen();
 8000d34:	f000 f9fc 	bl	8001130 <oled_UpdateScreen>
	    		  }
	    		  HAL_Delay(1);
 8000d38:	2001      	movs	r0, #1
 8000d3a:	f000 fd09 	bl	8001750 <HAL_Delay>
	    		  CheckRead("red\n\r", 5, i);
 8000d3e:	697a      	ldr	r2, [r7, #20]
 8000d40:	2105      	movs	r1, #5
 8000d42:	4821      	ldr	r0, [pc, #132]	; (8000dc8 <Phore+0x2e4>)
 8000d44:	f7ff fe80 	bl	8000a48 <CheckRead>
	    	  for(j = i - now_time_out; j > 0 ; j--){
 8000d48:	693b      	ldr	r3, [r7, #16]
 8000d4a:	3b01      	subs	r3, #1
 8000d4c:	613b      	str	r3, [r7, #16]
 8000d4e:	693b      	ldr	r3, [r7, #16]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	dca2      	bgt.n	8000c9a <Phore+0x1b6>
	    	  }
	      }
	      HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 8000d54:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d58:	4812      	ldr	r0, [pc, #72]	; (8000da4 <Phore+0x2c0>)
 8000d5a:	f001 f81e 	bl	8001d9a <HAL_GPIO_TogglePin>
	    /*горит оранжевый*/

	      oled_SetCursor(0, 48);
 8000d5e:	2130      	movs	r1, #48	; 0x30
 8000d60:	2000      	movs	r0, #0
 8000d62:	f000 fb1b 	bl	800139c <oled_SetCursor>
	      oled_WriteString("           ", Font_7x10, Black);
 8000d66:	4a0d      	ldr	r2, [pc, #52]	; (8000d9c <Phore+0x2b8>)
 8000d68:	2300      	movs	r3, #0
 8000d6a:	ca06      	ldmia	r2, {r1, r2}
 8000d6c:	481d      	ldr	r0, [pc, #116]	; (8000de4 <Phore+0x300>)
 8000d6e:	f000 faef 	bl	8001350 <oled_WriteString>

	      oled_SetCursor(0, 18);
 8000d72:	2112      	movs	r1, #18
 8000d74:	2000      	movs	r0, #0
 8000d76:	f000 fb11 	bl	800139c <oled_SetCursor>
	      oled_WriteString("yellow  ", Font_7x10, Black);
 8000d7a:	4a08      	ldr	r2, [pc, #32]	; (8000d9c <Phore+0x2b8>)
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	ca06      	ldmia	r2, {r1, r2}
 8000d80:	480e      	ldr	r0, [pc, #56]	; (8000dbc <Phore+0x2d8>)
 8000d82:	f000 fae5 	bl	8001350 <oled_WriteString>
	      oled_UpdateScreen();
 8000d86:	f000 f9d3 	bl	8001130 <oled_UpdateScreen>

	      HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 8000d8a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d8e:	4805      	ldr	r0, [pc, #20]	; (8000da4 <Phore+0x2c0>)
 8000d90:	f001 f803 	bl	8001d9a <HAL_GPIO_TogglePin>
	      for(i = 0; i < now_time_out/5; i++){
 8000d94:	2300      	movs	r3, #0
 8000d96:	617b      	str	r3, [r7, #20]
 8000d98:	e031      	b.n	8000dfe <Phore+0x31a>
 8000d9a:	bf00      	nop
 8000d9c:	20000000 	.word	0x20000000
 8000da0:	08004b50 	.word	0x08004b50
 8000da4:	40020c00 	.word	0x40020c00
 8000da8:	08004b5c 	.word	0x08004b5c
 8000dac:	20000064 	.word	0x20000064
 8000db0:	08004b64 	.word	0x08004b64
 8000db4:	08004b70 	.word	0x08004b70
 8000db8:	66666667 	.word	0x66666667
 8000dbc:	08004b84 	.word	0x08004b84
 8000dc0:	08004b90 	.word	0x08004b90
 8000dc4:	08004b9c 	.word	0x08004b9c
 8000dc8:	08004ba8 	.word	0x08004ba8
 8000dcc:	20000068 	.word	0x20000068
 8000dd0:	40020800 	.word	0x40020800
 8000dd4:	08004bb0 	.word	0x08004bb0
 8000dd8:	51eb851f 	.word	0x51eb851f
 8000ddc:	08004af4 	.word	0x08004af4
 8000de0:	08004b0c 	.word	0x08004b0c
 8000de4:	08004bb8 	.word	0x08004bb8
	    	  HAL_Delay(1);
 8000de8:	2001      	movs	r0, #1
 8000dea:	f000 fcb1 	bl	8001750 <HAL_Delay>
	    	  CheckRead("yellow\n\r", 8, i);
 8000dee:	697a      	ldr	r2, [r7, #20]
 8000df0:	2108      	movs	r1, #8
 8000df2:	480b      	ldr	r0, [pc, #44]	; (8000e20 <Phore+0x33c>)
 8000df4:	f7ff fe28 	bl	8000a48 <CheckRead>
	      for(i = 0; i < now_time_out/5; i++){
 8000df8:	697b      	ldr	r3, [r7, #20]
 8000dfa:	3301      	adds	r3, #1
 8000dfc:	617b      	str	r3, [r7, #20]
 8000dfe:	4b09      	ldr	r3, [pc, #36]	; (8000e24 <Phore+0x340>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	4a09      	ldr	r2, [pc, #36]	; (8000e28 <Phore+0x344>)
 8000e04:	fb82 1203 	smull	r1, r2, r2, r3
 8000e08:	1052      	asrs	r2, r2, #1
 8000e0a:	17db      	asrs	r3, r3, #31
 8000e0c:	1ad3      	subs	r3, r2, r3
 8000e0e:	697a      	ldr	r2, [r7, #20]
 8000e10:	429a      	cmp	r2, r3
 8000e12:	dbe9      	blt.n	8000de8 <Phore+0x304>
	      }
	      HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 8000e14:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e18:	4804      	ldr	r0, [pc, #16]	; (8000e2c <Phore+0x348>)
 8000e1a:	f000 ffbe 	bl	8001d9a <HAL_GPIO_TogglePin>
	  {
 8000e1e:	e664      	b.n	8000aea <Phore+0x6>
 8000e20:	08004b90 	.word	0x08004b90
 8000e24:	20000064 	.word	0x20000064
 8000e28:	66666667 	.word	0x66666667
 8000e2c:	40020c00 	.word	0x40020c00

08000e30 <main>:
	  }

}

int main(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b09a      	sub	sp, #104	; 0x68
 8000e34:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e36:	f000 fc19 	bl	800166c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e3a:	f000 f86b 	bl	8000f14 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e3e:	f7ff fb99 	bl	8000574 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000e42:	f7ff fbe9 	bl	8000618 <MX_I2C1_Init>
  MX_USART6_UART_Init();
 8000e46:	f000 fb6d 	bl	8001524 <MX_USART6_UART_Init>

  oled_Init();
 8000e4a:	f000 f8e1 	bl	8001010 <oled_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  oled_Fill(White);
 8000e4e:	2001      	movs	r0, #1
 8000e50:	f000 f94a 	bl	80010e8 <oled_Fill>
  oled_SetCursor(0,0);
 8000e54:	2100      	movs	r1, #0
 8000e56:	2000      	movs	r0, #0
 8000e58:	f000 faa0 	bl	800139c <oled_SetCursor>
  oled_WriteString("INFO", Font_11x18, Black);
 8000e5c:	4a21      	ldr	r2, [pc, #132]	; (8000ee4 <main+0xb4>)
 8000e5e:	2300      	movs	r3, #0
 8000e60:	ca06      	ldmia	r2, {r1, r2}
 8000e62:	4821      	ldr	r0, [pc, #132]	; (8000ee8 <main+0xb8>)
 8000e64:	f000 fa74 	bl	8001350 <oled_WriteString>
  oled_SetCursor(0,18);
 8000e68:	2112      	movs	r1, #18
 8000e6a:	2000      	movs	r0, #0
 8000e6c:	f000 fa96 	bl	800139c <oled_SetCursor>
  oled_WriteString("green", Font_7x10, Black);
 8000e70:	4a1e      	ldr	r2, [pc, #120]	; (8000eec <main+0xbc>)
 8000e72:	2300      	movs	r3, #0
 8000e74:	ca06      	ldmia	r2, {r1, r2}
 8000e76:	481e      	ldr	r0, [pc, #120]	; (8000ef0 <main+0xc0>)
 8000e78:	f000 fa6a 	bl	8001350 <oled_WriteString>
  oled_SetCursor(0,28);
 8000e7c:	211c      	movs	r1, #28
 8000e7e:	2000      	movs	r0, #0
 8000e80:	f000 fa8c 	bl	800139c <oled_SetCursor>
  oled_WriteString("with stops", Font_7x10, Black);
 8000e84:	4a19      	ldr	r2, [pc, #100]	; (8000eec <main+0xbc>)
 8000e86:	2300      	movs	r3, #0
 8000e88:	ca06      	ldmia	r2, {r1, r2}
 8000e8a:	481a      	ldr	r0, [pc, #104]	; (8000ef4 <main+0xc4>)
 8000e8c:	f000 fa60 	bl	8001350 <oled_WriteString>
  oled_SetCursor(0,38);
 8000e90:	2126      	movs	r1, #38	; 0x26
 8000e92:	2000      	movs	r0, #0
 8000e94:	f000 fa82 	bl	800139c <oled_SetCursor>
  oled_WriteString("timeout:", Font_7x10, Black);
 8000e98:	4a14      	ldr	r2, [pc, #80]	; (8000eec <main+0xbc>)
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	ca06      	ldmia	r2, {r1, r2}
 8000e9e:	4816      	ldr	r0, [pc, #88]	; (8000ef8 <main+0xc8>)
 8000ea0:	f000 fa56 	bl	8001350 <oled_WriteString>
  oled_SetCursor(56,38);
 8000ea4:	2126      	movs	r1, #38	; 0x26
 8000ea6:	2038      	movs	r0, #56	; 0x38
 8000ea8:	f000 fa78 	bl	800139c <oled_SetCursor>
  oled_WriteString("1500", Font_7x10, Black);
 8000eac:	4a0f      	ldr	r2, [pc, #60]	; (8000eec <main+0xbc>)
 8000eae:	2300      	movs	r3, #0
 8000eb0:	ca06      	ldmia	r2, {r1, r2}
 8000eb2:	4812      	ldr	r0, [pc, #72]	; (8000efc <main+0xcc>)
 8000eb4:	f000 fa4c 	bl	8001350 <oled_WriteString>
  oled_UpdateScreen();
 8000eb8:	f000 f93a 	bl	8001130 <oled_UpdateScreen>

  /* USER CODE BEGIN WHILE */
  sprintf(num_char, "%d", now_time_out);
 8000ebc:	4b10      	ldr	r3, [pc, #64]	; (8000f00 <main+0xd0>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	461a      	mov	r2, r3
 8000ec2:	4910      	ldr	r1, [pc, #64]	; (8000f04 <main+0xd4>)
 8000ec4:	4810      	ldr	r0, [pc, #64]	; (8000f08 <main+0xd8>)
 8000ec6:	f003 f941 	bl	800414c <siprintf>
  HAL_UART_Transmit(&huart6, (uint8_t*)ask, 42, 25);
 8000eca:	2319      	movs	r3, #25
 8000ecc:	222a      	movs	r2, #42	; 0x2a
 8000ece:	490f      	ldr	r1, [pc, #60]	; (8000f0c <main+0xdc>)
 8000ed0:	480f      	ldr	r0, [pc, #60]	; (8000f10 <main+0xe0>)
 8000ed2:	f002 f872 	bl	8002fba <HAL_UART_Transmit>
  Phore();
 8000ed6:	f7ff fe05 	bl	8000ae4 <Phore>
 8000eda:	2300      	movs	r3, #0

  uint8_t str[100];

}
 8000edc:	4618      	mov	r0, r3
 8000ede:	3768      	adds	r7, #104	; 0x68
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	20000008 	.word	0x20000008
 8000ee8:	08004bc4 	.word	0x08004bc4
 8000eec:	20000000 	.word	0x20000000
 8000ef0:	08004bcc 	.word	0x08004bcc
 8000ef4:	08004bd4 	.word	0x08004bd4
 8000ef8:	08004be0 	.word	0x08004be0
 8000efc:	08004bec 	.word	0x08004bec
 8000f00:	20000064 	.word	0x20000064
 8000f04:	08004af4 	.word	0x08004af4
 8000f08:	2000018c 	.word	0x2000018c
 8000f0c:	20000038 	.word	0x20000038
 8000f10:	200005a4 	.word	0x200005a4

08000f14 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b094      	sub	sp, #80	; 0x50
 8000f18:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f1a:	f107 0320 	add.w	r3, r7, #32
 8000f1e:	2230      	movs	r2, #48	; 0x30
 8000f20:	2100      	movs	r1, #0
 8000f22:	4618      	mov	r0, r3
 8000f24:	f003 f90a 	bl	800413c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f28:	f107 030c 	add.w	r3, r7, #12
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	601a      	str	r2, [r3, #0]
 8000f30:	605a      	str	r2, [r3, #4]
 8000f32:	609a      	str	r2, [r3, #8]
 8000f34:	60da      	str	r2, [r3, #12]
 8000f36:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f38:	2300      	movs	r3, #0
 8000f3a:	60bb      	str	r3, [r7, #8]
 8000f3c:	4b22      	ldr	r3, [pc, #136]	; (8000fc8 <SystemClock_Config+0xb4>)
 8000f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f40:	4a21      	ldr	r2, [pc, #132]	; (8000fc8 <SystemClock_Config+0xb4>)
 8000f42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f46:	6413      	str	r3, [r2, #64]	; 0x40
 8000f48:	4b1f      	ldr	r3, [pc, #124]	; (8000fc8 <SystemClock_Config+0xb4>)
 8000f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f50:	60bb      	str	r3, [r7, #8]
 8000f52:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f54:	2300      	movs	r3, #0
 8000f56:	607b      	str	r3, [r7, #4]
 8000f58:	4b1c      	ldr	r3, [pc, #112]	; (8000fcc <SystemClock_Config+0xb8>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	4a1b      	ldr	r2, [pc, #108]	; (8000fcc <SystemClock_Config+0xb8>)
 8000f5e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f62:	6013      	str	r3, [r2, #0]
 8000f64:	4b19      	ldr	r3, [pc, #100]	; (8000fcc <SystemClock_Config+0xb8>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f6c:	607b      	str	r3, [r7, #4]
 8000f6e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f70:	2302      	movs	r3, #2
 8000f72:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f74:	2301      	movs	r3, #1
 8000f76:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f78:	2310      	movs	r3, #16
 8000f7a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f80:	f107 0320 	add.w	r3, r7, #32
 8000f84:	4618      	mov	r0, r3
 8000f86:	f001 fb7d 	bl	8002684 <HAL_RCC_OscConfig>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d001      	beq.n	8000f94 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000f90:	f000 f81e 	bl	8000fd0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f94:	230f      	movs	r3, #15
 8000f96:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000fa8:	f107 030c 	add.w	r3, r7, #12
 8000fac:	2100      	movs	r1, #0
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f001 fdd6 	bl	8002b60 <HAL_RCC_ClockConfig>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d001      	beq.n	8000fbe <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000fba:	f000 f809 	bl	8000fd0 <Error_Handler>
  }
}
 8000fbe:	bf00      	nop
 8000fc0:	3750      	adds	r7, #80	; 0x50
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	40023800 	.word	0x40023800
 8000fcc:	40007000 	.word	0x40007000

08000fd0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000fd4:	bf00      	nop
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr
	...

08000fe0 <oled_WriteCommand>:
static uint8_t OLED_Buffer[1024];

static OLED_t OLED;


static void oled_WriteCommand(uint8_t command) {
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b086      	sub	sp, #24
 8000fe4:	af04      	add	r7, sp, #16
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1,OLED_I2C_ADDR,0x00,1,&command,1,10);
 8000fea:	230a      	movs	r3, #10
 8000fec:	9302      	str	r3, [sp, #8]
 8000fee:	2301      	movs	r3, #1
 8000ff0:	9301      	str	r3, [sp, #4]
 8000ff2:	1dfb      	adds	r3, r7, #7
 8000ff4:	9300      	str	r3, [sp, #0]
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	2178      	movs	r1, #120	; 0x78
 8000ffc:	4803      	ldr	r0, [pc, #12]	; (800100c <oled_WriteCommand+0x2c>)
 8000ffe:	f001 f82b 	bl	8002058 <HAL_I2C_Mem_Write>
}
 8001002:	bf00      	nop
 8001004:	3708      	adds	r7, #8
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	200000fc 	.word	0x200000fc

08001010 <oled_Init>:


uint8_t oled_Init(void) {
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
	HAL_Delay(100);
 8001014:	2064      	movs	r0, #100	; 0x64
 8001016:	f000 fb9b 	bl	8001750 <HAL_Delay>

	oled_WriteCommand(0xAE);
 800101a:	20ae      	movs	r0, #174	; 0xae
 800101c:	f7ff ffe0 	bl	8000fe0 <oled_WriteCommand>
	oled_WriteCommand(0x20);
 8001020:	2020      	movs	r0, #32
 8001022:	f7ff ffdd 	bl	8000fe0 <oled_WriteCommand>
	oled_WriteCommand(0x10);
 8001026:	2010      	movs	r0, #16
 8001028:	f7ff ffda 	bl	8000fe0 <oled_WriteCommand>
	oled_WriteCommand(0xB0);
 800102c:	20b0      	movs	r0, #176	; 0xb0
 800102e:	f7ff ffd7 	bl	8000fe0 <oled_WriteCommand>
	oled_WriteCommand(0xC8);
 8001032:	20c8      	movs	r0, #200	; 0xc8
 8001034:	f7ff ffd4 	bl	8000fe0 <oled_WriteCommand>
	oled_WriteCommand(0x00);
 8001038:	2000      	movs	r0, #0
 800103a:	f7ff ffd1 	bl	8000fe0 <oled_WriteCommand>
	oled_WriteCommand(0x10);
 800103e:	2010      	movs	r0, #16
 8001040:	f7ff ffce 	bl	8000fe0 <oled_WriteCommand>
	oled_WriteCommand(0x40);
 8001044:	2040      	movs	r0, #64	; 0x40
 8001046:	f7ff ffcb 	bl	8000fe0 <oled_WriteCommand>
	oled_WriteCommand(0x81);
 800104a:	2081      	movs	r0, #129	; 0x81
 800104c:	f7ff ffc8 	bl	8000fe0 <oled_WriteCommand>
	oled_WriteCommand(0xFF);
 8001050:	20ff      	movs	r0, #255	; 0xff
 8001052:	f7ff ffc5 	bl	8000fe0 <oled_WriteCommand>
	oled_WriteCommand(0xA1);
 8001056:	20a1      	movs	r0, #161	; 0xa1
 8001058:	f7ff ffc2 	bl	8000fe0 <oled_WriteCommand>
	oled_WriteCommand(0xA6);
 800105c:	20a6      	movs	r0, #166	; 0xa6
 800105e:	f7ff ffbf 	bl	8000fe0 <oled_WriteCommand>
	oled_WriteCommand(0xA8);
 8001062:	20a8      	movs	r0, #168	; 0xa8
 8001064:	f7ff ffbc 	bl	8000fe0 <oled_WriteCommand>
	oled_WriteCommand(0x3F);
 8001068:	203f      	movs	r0, #63	; 0x3f
 800106a:	f7ff ffb9 	bl	8000fe0 <oled_WriteCommand>
	oled_WriteCommand(0xA4);
 800106e:	20a4      	movs	r0, #164	; 0xa4
 8001070:	f7ff ffb6 	bl	8000fe0 <oled_WriteCommand>
	oled_WriteCommand(0xD3);
 8001074:	20d3      	movs	r0, #211	; 0xd3
 8001076:	f7ff ffb3 	bl	8000fe0 <oled_WriteCommand>
	oled_WriteCommand(0x00);
 800107a:	2000      	movs	r0, #0
 800107c:	f7ff ffb0 	bl	8000fe0 <oled_WriteCommand>
	oled_WriteCommand(0xD5);
 8001080:	20d5      	movs	r0, #213	; 0xd5
 8001082:	f7ff ffad 	bl	8000fe0 <oled_WriteCommand>
	oled_WriteCommand(0xF0);
 8001086:	20f0      	movs	r0, #240	; 0xf0
 8001088:	f7ff ffaa 	bl	8000fe0 <oled_WriteCommand>
	oled_WriteCommand(0xD9);
 800108c:	20d9      	movs	r0, #217	; 0xd9
 800108e:	f7ff ffa7 	bl	8000fe0 <oled_WriteCommand>
	oled_WriteCommand(0x22);
 8001092:	2022      	movs	r0, #34	; 0x22
 8001094:	f7ff ffa4 	bl	8000fe0 <oled_WriteCommand>
	oled_WriteCommand(0xDA);
 8001098:	20da      	movs	r0, #218	; 0xda
 800109a:	f7ff ffa1 	bl	8000fe0 <oled_WriteCommand>
	oled_WriteCommand(0x12);
 800109e:	2012      	movs	r0, #18
 80010a0:	f7ff ff9e 	bl	8000fe0 <oled_WriteCommand>
	oled_WriteCommand(0xDB);
 80010a4:	20db      	movs	r0, #219	; 0xdb
 80010a6:	f7ff ff9b 	bl	8000fe0 <oled_WriteCommand>
	oled_WriteCommand(0x20);
 80010aa:	2020      	movs	r0, #32
 80010ac:	f7ff ff98 	bl	8000fe0 <oled_WriteCommand>
	oled_WriteCommand(0x8D);
 80010b0:	208d      	movs	r0, #141	; 0x8d
 80010b2:	f7ff ff95 	bl	8000fe0 <oled_WriteCommand>
	oled_WriteCommand(0x14);
 80010b6:	2014      	movs	r0, #20
 80010b8:	f7ff ff92 	bl	8000fe0 <oled_WriteCommand>
	oled_WriteCommand(0xAF);
 80010bc:	20af      	movs	r0, #175	; 0xaf
 80010be:	f7ff ff8f 	bl	8000fe0 <oled_WriteCommand>

	oled_Fill(Black);
 80010c2:	2000      	movs	r0, #0
 80010c4:	f000 f810 	bl	80010e8 <oled_Fill>

	oled_UpdateScreen();
 80010c8:	f000 f832 	bl	8001130 <oled_UpdateScreen>

	OLED.CurrentX = 0;
 80010cc:	4b05      	ldr	r3, [pc, #20]	; (80010e4 <oled_Init+0xd4>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	801a      	strh	r2, [r3, #0]
	OLED.CurrentY = 0;
 80010d2:	4b04      	ldr	r3, [pc, #16]	; (80010e4 <oled_Init+0xd4>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	805a      	strh	r2, [r3, #2]

	OLED.Initialized = 1;
 80010d8:	4b02      	ldr	r3, [pc, #8]	; (80010e4 <oled_Init+0xd4>)
 80010da:	2201      	movs	r2, #1
 80010dc:	715a      	strb	r2, [r3, #5]

	return 1;
 80010de:	2301      	movs	r3, #1
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	20000598 	.word	0x20000598

080010e8 <oled_Fill>:

void oled_Fill(OLED_COLOR color) {
 80010e8:	b480      	push	{r7}
 80010ea:	b085      	sub	sp, #20
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	4603      	mov	r3, r0
 80010f0:	71fb      	strb	r3, [r7, #7]
	uint32_t i;

	for(i = 0; i < sizeof(OLED_Buffer); i++) {
 80010f2:	2300      	movs	r3, #0
 80010f4:	60fb      	str	r3, [r7, #12]
 80010f6:	e00d      	b.n	8001114 <oled_Fill+0x2c>
		OLED_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 80010f8:	79fb      	ldrb	r3, [r7, #7]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d101      	bne.n	8001102 <oled_Fill+0x1a>
 80010fe:	2100      	movs	r1, #0
 8001100:	e000      	b.n	8001104 <oled_Fill+0x1c>
 8001102:	21ff      	movs	r1, #255	; 0xff
 8001104:	4a09      	ldr	r2, [pc, #36]	; (800112c <oled_Fill+0x44>)
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	4413      	add	r3, r2
 800110a:	460a      	mov	r2, r1
 800110c:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < sizeof(OLED_Buffer); i++) {
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	3301      	adds	r3, #1
 8001112:	60fb      	str	r3, [r7, #12]
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800111a:	d3ed      	bcc.n	80010f8 <oled_Fill+0x10>
	}
}
 800111c:	bf00      	nop
 800111e:	bf00      	nop
 8001120:	3714      	adds	r7, #20
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr
 800112a:	bf00      	nop
 800112c:	20000198 	.word	0x20000198

08001130 <oled_UpdateScreen>:


void oled_UpdateScreen(void) {
 8001130:	b580      	push	{r7, lr}
 8001132:	b086      	sub	sp, #24
 8001134:	af04      	add	r7, sp, #16
	uint8_t i;

	for (i = 0; i < 8; i++) {
 8001136:	2300      	movs	r3, #0
 8001138:	71fb      	strb	r3, [r7, #7]
 800113a:	e01d      	b.n	8001178 <oled_UpdateScreen+0x48>
		oled_WriteCommand(0xB0 + i);
 800113c:	79fb      	ldrb	r3, [r7, #7]
 800113e:	3b50      	subs	r3, #80	; 0x50
 8001140:	b2db      	uxtb	r3, r3
 8001142:	4618      	mov	r0, r3
 8001144:	f7ff ff4c 	bl	8000fe0 <oled_WriteCommand>
		oled_WriteCommand(0x00);
 8001148:	2000      	movs	r0, #0
 800114a:	f7ff ff49 	bl	8000fe0 <oled_WriteCommand>
		oled_WriteCommand(0x10);
 800114e:	2010      	movs	r0, #16
 8001150:	f7ff ff46 	bl	8000fe0 <oled_WriteCommand>

		HAL_I2C_Mem_Write(&hi2c1,OLED_I2C_ADDR,0x40,1,&OLED_Buffer[OLED_WIDTH * i],OLED_WIDTH,100);
 8001154:	79fb      	ldrb	r3, [r7, #7]
 8001156:	01db      	lsls	r3, r3, #7
 8001158:	4a0b      	ldr	r2, [pc, #44]	; (8001188 <oled_UpdateScreen+0x58>)
 800115a:	4413      	add	r3, r2
 800115c:	2264      	movs	r2, #100	; 0x64
 800115e:	9202      	str	r2, [sp, #8]
 8001160:	2280      	movs	r2, #128	; 0x80
 8001162:	9201      	str	r2, [sp, #4]
 8001164:	9300      	str	r3, [sp, #0]
 8001166:	2301      	movs	r3, #1
 8001168:	2240      	movs	r2, #64	; 0x40
 800116a:	2178      	movs	r1, #120	; 0x78
 800116c:	4807      	ldr	r0, [pc, #28]	; (800118c <oled_UpdateScreen+0x5c>)
 800116e:	f000 ff73 	bl	8002058 <HAL_I2C_Mem_Write>
	for (i = 0; i < 8; i++) {
 8001172:	79fb      	ldrb	r3, [r7, #7]
 8001174:	3301      	adds	r3, #1
 8001176:	71fb      	strb	r3, [r7, #7]
 8001178:	79fb      	ldrb	r3, [r7, #7]
 800117a:	2b07      	cmp	r3, #7
 800117c:	d9de      	bls.n	800113c <oled_UpdateScreen+0xc>
	}
}
 800117e:	bf00      	nop
 8001180:	bf00      	nop
 8001182:	3708      	adds	r7, #8
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}
 8001188:	20000198 	.word	0x20000198
 800118c:	200000fc 	.word	0x200000fc

08001190 <oled_DrawPixel>:

void oled_DrawPixel(uint8_t x, uint8_t y, OLED_COLOR color) {
 8001190:	b480      	push	{r7}
 8001192:	b083      	sub	sp, #12
 8001194:	af00      	add	r7, sp, #0
 8001196:	4603      	mov	r3, r0
 8001198:	71fb      	strb	r3, [r7, #7]
 800119a:	460b      	mov	r3, r1
 800119c:	71bb      	strb	r3, [r7, #6]
 800119e:	4613      	mov	r3, r2
 80011a0:	717b      	strb	r3, [r7, #5]
	if (x >= OLED_WIDTH || y >= OLED_HEIGHT) {
 80011a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	db48      	blt.n	800123c <oled_DrawPixel+0xac>
 80011aa:	79bb      	ldrb	r3, [r7, #6]
 80011ac:	2b3f      	cmp	r3, #63	; 0x3f
 80011ae:	d845      	bhi.n	800123c <oled_DrawPixel+0xac>
		return;
	}

	if (OLED.Inverted) {
 80011b0:	4b25      	ldr	r3, [pc, #148]	; (8001248 <oled_DrawPixel+0xb8>)
 80011b2:	791b      	ldrb	r3, [r3, #4]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d006      	beq.n	80011c6 <oled_DrawPixel+0x36>
		color = (OLED_COLOR)!color;
 80011b8:	797b      	ldrb	r3, [r7, #5]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	bf0c      	ite	eq
 80011be:	2301      	moveq	r3, #1
 80011c0:	2300      	movne	r3, #0
 80011c2:	b2db      	uxtb	r3, r3
 80011c4:	717b      	strb	r3, [r7, #5]
	}

	if (color == White) {
 80011c6:	797b      	ldrb	r3, [r7, #5]
 80011c8:	2b01      	cmp	r3, #1
 80011ca:	d11a      	bne.n	8001202 <oled_DrawPixel+0x72>
		OLED_Buffer[x + (y / 8) * OLED_WIDTH] |= 1 << (y % 8);
 80011cc:	79fa      	ldrb	r2, [r7, #7]
 80011ce:	79bb      	ldrb	r3, [r7, #6]
 80011d0:	08db      	lsrs	r3, r3, #3
 80011d2:	b2d8      	uxtb	r0, r3
 80011d4:	4603      	mov	r3, r0
 80011d6:	01db      	lsls	r3, r3, #7
 80011d8:	4413      	add	r3, r2
 80011da:	4a1c      	ldr	r2, [pc, #112]	; (800124c <oled_DrawPixel+0xbc>)
 80011dc:	5cd3      	ldrb	r3, [r2, r3]
 80011de:	b25a      	sxtb	r2, r3
 80011e0:	79bb      	ldrb	r3, [r7, #6]
 80011e2:	f003 0307 	and.w	r3, r3, #7
 80011e6:	2101      	movs	r1, #1
 80011e8:	fa01 f303 	lsl.w	r3, r1, r3
 80011ec:	b25b      	sxtb	r3, r3
 80011ee:	4313      	orrs	r3, r2
 80011f0:	b259      	sxtb	r1, r3
 80011f2:	79fa      	ldrb	r2, [r7, #7]
 80011f4:	4603      	mov	r3, r0
 80011f6:	01db      	lsls	r3, r3, #7
 80011f8:	4413      	add	r3, r2
 80011fa:	b2c9      	uxtb	r1, r1
 80011fc:	4a13      	ldr	r2, [pc, #76]	; (800124c <oled_DrawPixel+0xbc>)
 80011fe:	54d1      	strb	r1, [r2, r3]
 8001200:	e01d      	b.n	800123e <oled_DrawPixel+0xae>
	} else {
		OLED_Buffer[x + (y / 8) * OLED_WIDTH] &= ~(1 << (y % 8));
 8001202:	79fa      	ldrb	r2, [r7, #7]
 8001204:	79bb      	ldrb	r3, [r7, #6]
 8001206:	08db      	lsrs	r3, r3, #3
 8001208:	b2d8      	uxtb	r0, r3
 800120a:	4603      	mov	r3, r0
 800120c:	01db      	lsls	r3, r3, #7
 800120e:	4413      	add	r3, r2
 8001210:	4a0e      	ldr	r2, [pc, #56]	; (800124c <oled_DrawPixel+0xbc>)
 8001212:	5cd3      	ldrb	r3, [r2, r3]
 8001214:	b25a      	sxtb	r2, r3
 8001216:	79bb      	ldrb	r3, [r7, #6]
 8001218:	f003 0307 	and.w	r3, r3, #7
 800121c:	2101      	movs	r1, #1
 800121e:	fa01 f303 	lsl.w	r3, r1, r3
 8001222:	b25b      	sxtb	r3, r3
 8001224:	43db      	mvns	r3, r3
 8001226:	b25b      	sxtb	r3, r3
 8001228:	4013      	ands	r3, r2
 800122a:	b259      	sxtb	r1, r3
 800122c:	79fa      	ldrb	r2, [r7, #7]
 800122e:	4603      	mov	r3, r0
 8001230:	01db      	lsls	r3, r3, #7
 8001232:	4413      	add	r3, r2
 8001234:	b2c9      	uxtb	r1, r1
 8001236:	4a05      	ldr	r2, [pc, #20]	; (800124c <oled_DrawPixel+0xbc>)
 8001238:	54d1      	strb	r1, [r2, r3]
 800123a:	e000      	b.n	800123e <oled_DrawPixel+0xae>
		return;
 800123c:	bf00      	nop
	}
}
 800123e:	370c      	adds	r7, #12
 8001240:	46bd      	mov	sp, r7
 8001242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001246:	4770      	bx	lr
 8001248:	20000598 	.word	0x20000598
 800124c:	20000198 	.word	0x20000198

08001250 <oled_WriteChar>:
	oled_DrawHLine(x1, x2, y1, color);
	oled_DrawHLine(x1, x2, y2, color);
	oled_DrawVLine(y1, y2, x1, color);
	oled_DrawVLine(y1, y2, x2, color);
}
char oled_WriteChar(char ch, FontDef Font, OLED_COLOR color) {
 8001250:	b590      	push	{r4, r7, lr}
 8001252:	b089      	sub	sp, #36	; 0x24
 8001254:	af00      	add	r7, sp, #0
 8001256:	4604      	mov	r4, r0
 8001258:	1d38      	adds	r0, r7, #4
 800125a:	e880 0006 	stmia.w	r0, {r1, r2}
 800125e:	461a      	mov	r2, r3
 8001260:	4623      	mov	r3, r4
 8001262:	73fb      	strb	r3, [r7, #15]
 8001264:	4613      	mov	r3, r2
 8001266:	73bb      	strb	r3, [r7, #14]
	uint32_t i, b, j;

	if (OLED_WIDTH <= (OLED.CurrentX + Font.FontWidth) ||
 8001268:	4b38      	ldr	r3, [pc, #224]	; (800134c <oled_WriteChar+0xfc>)
 800126a:	881b      	ldrh	r3, [r3, #0]
 800126c:	461a      	mov	r2, r3
 800126e:	793b      	ldrb	r3, [r7, #4]
 8001270:	4413      	add	r3, r2
 8001272:	2b7f      	cmp	r3, #127	; 0x7f
 8001274:	dc06      	bgt.n	8001284 <oled_WriteChar+0x34>
			OLED_HEIGHT <= (OLED.CurrentY + Font.FontHeight)) {
 8001276:	4b35      	ldr	r3, [pc, #212]	; (800134c <oled_WriteChar+0xfc>)
 8001278:	885b      	ldrh	r3, [r3, #2]
 800127a:	461a      	mov	r2, r3
 800127c:	797b      	ldrb	r3, [r7, #5]
 800127e:	4413      	add	r3, r2
	if (OLED_WIDTH <= (OLED.CurrentX + Font.FontWidth) ||
 8001280:	2b3f      	cmp	r3, #63	; 0x3f
 8001282:	dd01      	ble.n	8001288 <oled_WriteChar+0x38>
		return 0;
 8001284:	2300      	movs	r3, #0
 8001286:	e05d      	b.n	8001344 <oled_WriteChar+0xf4>
	}

	for (i = 0; i < Font.FontHeight; i++) {
 8001288:	2300      	movs	r3, #0
 800128a:	61fb      	str	r3, [r7, #28]
 800128c:	e04c      	b.n	8001328 <oled_WriteChar+0xd8>
		b = Font.data[(ch - 32) * Font.FontHeight + i];
 800128e:	68ba      	ldr	r2, [r7, #8]
 8001290:	7bfb      	ldrb	r3, [r7, #15]
 8001292:	3b20      	subs	r3, #32
 8001294:	7979      	ldrb	r1, [r7, #5]
 8001296:	fb01 f303 	mul.w	r3, r1, r3
 800129a:	4619      	mov	r1, r3
 800129c:	69fb      	ldr	r3, [r7, #28]
 800129e:	440b      	add	r3, r1
 80012a0:	005b      	lsls	r3, r3, #1
 80012a2:	4413      	add	r3, r2
 80012a4:	881b      	ldrh	r3, [r3, #0]
 80012a6:	617b      	str	r3, [r7, #20]
		for (j = 0; j < Font.FontWidth; j++) {
 80012a8:	2300      	movs	r3, #0
 80012aa:	61bb      	str	r3, [r7, #24]
 80012ac:	e034      	b.n	8001318 <oled_WriteChar+0xc8>
			if ((b << j) & 0x8000) {
 80012ae:	697a      	ldr	r2, [r7, #20]
 80012b0:	69bb      	ldr	r3, [r7, #24]
 80012b2:	fa02 f303 	lsl.w	r3, r2, r3
 80012b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d012      	beq.n	80012e4 <oled_WriteChar+0x94>
				oled_DrawPixel(OLED.CurrentX + j, (OLED.CurrentY + i), (OLED_COLOR) color);
 80012be:	4b23      	ldr	r3, [pc, #140]	; (800134c <oled_WriteChar+0xfc>)
 80012c0:	881b      	ldrh	r3, [r3, #0]
 80012c2:	b2da      	uxtb	r2, r3
 80012c4:	69bb      	ldr	r3, [r7, #24]
 80012c6:	b2db      	uxtb	r3, r3
 80012c8:	4413      	add	r3, r2
 80012ca:	b2d8      	uxtb	r0, r3
 80012cc:	4b1f      	ldr	r3, [pc, #124]	; (800134c <oled_WriteChar+0xfc>)
 80012ce:	885b      	ldrh	r3, [r3, #2]
 80012d0:	b2da      	uxtb	r2, r3
 80012d2:	69fb      	ldr	r3, [r7, #28]
 80012d4:	b2db      	uxtb	r3, r3
 80012d6:	4413      	add	r3, r2
 80012d8:	b2db      	uxtb	r3, r3
 80012da:	7bba      	ldrb	r2, [r7, #14]
 80012dc:	4619      	mov	r1, r3
 80012de:	f7ff ff57 	bl	8001190 <oled_DrawPixel>
 80012e2:	e016      	b.n	8001312 <oled_WriteChar+0xc2>
			} else {
				oled_DrawPixel(OLED.CurrentX + j, (OLED.CurrentY + i), (OLED_COLOR)!color);
 80012e4:	4b19      	ldr	r3, [pc, #100]	; (800134c <oled_WriteChar+0xfc>)
 80012e6:	881b      	ldrh	r3, [r3, #0]
 80012e8:	b2da      	uxtb	r2, r3
 80012ea:	69bb      	ldr	r3, [r7, #24]
 80012ec:	b2db      	uxtb	r3, r3
 80012ee:	4413      	add	r3, r2
 80012f0:	b2d8      	uxtb	r0, r3
 80012f2:	4b16      	ldr	r3, [pc, #88]	; (800134c <oled_WriteChar+0xfc>)
 80012f4:	885b      	ldrh	r3, [r3, #2]
 80012f6:	b2da      	uxtb	r2, r3
 80012f8:	69fb      	ldr	r3, [r7, #28]
 80012fa:	b2db      	uxtb	r3, r3
 80012fc:	4413      	add	r3, r2
 80012fe:	b2d9      	uxtb	r1, r3
 8001300:	7bbb      	ldrb	r3, [r7, #14]
 8001302:	2b00      	cmp	r3, #0
 8001304:	bf0c      	ite	eq
 8001306:	2301      	moveq	r3, #1
 8001308:	2300      	movne	r3, #0
 800130a:	b2db      	uxtb	r3, r3
 800130c:	461a      	mov	r2, r3
 800130e:	f7ff ff3f 	bl	8001190 <oled_DrawPixel>
		for (j = 0; j < Font.FontWidth; j++) {
 8001312:	69bb      	ldr	r3, [r7, #24]
 8001314:	3301      	adds	r3, #1
 8001316:	61bb      	str	r3, [r7, #24]
 8001318:	793b      	ldrb	r3, [r7, #4]
 800131a:	461a      	mov	r2, r3
 800131c:	69bb      	ldr	r3, [r7, #24]
 800131e:	4293      	cmp	r3, r2
 8001320:	d3c5      	bcc.n	80012ae <oled_WriteChar+0x5e>
	for (i = 0; i < Font.FontHeight; i++) {
 8001322:	69fb      	ldr	r3, [r7, #28]
 8001324:	3301      	adds	r3, #1
 8001326:	61fb      	str	r3, [r7, #28]
 8001328:	797b      	ldrb	r3, [r7, #5]
 800132a:	461a      	mov	r2, r3
 800132c:	69fb      	ldr	r3, [r7, #28]
 800132e:	4293      	cmp	r3, r2
 8001330:	d3ad      	bcc.n	800128e <oled_WriteChar+0x3e>
			}
		}
	}

	OLED.CurrentX += Font.FontWidth;
 8001332:	4b06      	ldr	r3, [pc, #24]	; (800134c <oled_WriteChar+0xfc>)
 8001334:	881a      	ldrh	r2, [r3, #0]
 8001336:	793b      	ldrb	r3, [r7, #4]
 8001338:	b29b      	uxth	r3, r3
 800133a:	4413      	add	r3, r2
 800133c:	b29a      	uxth	r2, r3
 800133e:	4b03      	ldr	r3, [pc, #12]	; (800134c <oled_WriteChar+0xfc>)
 8001340:	801a      	strh	r2, [r3, #0]

	return ch;
 8001342:	7bfb      	ldrb	r3, [r7, #15]
}
 8001344:	4618      	mov	r0, r3
 8001346:	3724      	adds	r7, #36	; 0x24
 8001348:	46bd      	mov	sp, r7
 800134a:	bd90      	pop	{r4, r7, pc}
 800134c:	20000598 	.word	0x20000598

08001350 <oled_WriteString>:


char oled_WriteString(char* str, FontDef Font, OLED_COLOR color) {
 8001350:	b580      	push	{r7, lr}
 8001352:	b084      	sub	sp, #16
 8001354:	af00      	add	r7, sp, #0
 8001356:	60f8      	str	r0, [r7, #12]
 8001358:	1d38      	adds	r0, r7, #4
 800135a:	e880 0006 	stmia.w	r0, {r1, r2}
 800135e:	70fb      	strb	r3, [r7, #3]
	while (*str) {
 8001360:	e012      	b.n	8001388 <oled_WriteString+0x38>
		if (oled_WriteChar(*str, Font, color) != *str) {
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	7818      	ldrb	r0, [r3, #0]
 8001366:	78fb      	ldrb	r3, [r7, #3]
 8001368:	1d3a      	adds	r2, r7, #4
 800136a:	ca06      	ldmia	r2, {r1, r2}
 800136c:	f7ff ff70 	bl	8001250 <oled_WriteChar>
 8001370:	4603      	mov	r3, r0
 8001372:	461a      	mov	r2, r3
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	429a      	cmp	r2, r3
 800137a:	d002      	beq.n	8001382 <oled_WriteString+0x32>
			return *str;
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	781b      	ldrb	r3, [r3, #0]
 8001380:	e008      	b.n	8001394 <oled_WriteString+0x44>
		}
		str++;
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	3301      	adds	r3, #1
 8001386:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d1e8      	bne.n	8001362 <oled_WriteString+0x12>
	}
	return *str;
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	781b      	ldrb	r3, [r3, #0]
}
 8001394:	4618      	mov	r0, r3
 8001396:	3710      	adds	r7, #16
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}

0800139c <oled_SetCursor>:

void oled_SetCursor(uint8_t x, uint8_t y) {
 800139c:	b480      	push	{r7}
 800139e:	b083      	sub	sp, #12
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	4603      	mov	r3, r0
 80013a4:	460a      	mov	r2, r1
 80013a6:	71fb      	strb	r3, [r7, #7]
 80013a8:	4613      	mov	r3, r2
 80013aa:	71bb      	strb	r3, [r7, #6]
	OLED.CurrentX = x;
 80013ac:	79fb      	ldrb	r3, [r7, #7]
 80013ae:	b29a      	uxth	r2, r3
 80013b0:	4b05      	ldr	r3, [pc, #20]	; (80013c8 <oled_SetCursor+0x2c>)
 80013b2:	801a      	strh	r2, [r3, #0]
	OLED.CurrentY = y;
 80013b4:	79bb      	ldrb	r3, [r7, #6]
 80013b6:	b29a      	uxth	r2, r3
 80013b8:	4b03      	ldr	r3, [pc, #12]	; (80013c8 <oled_SetCursor+0x2c>)
 80013ba:	805a      	strh	r2, [r3, #2]
}
 80013bc:	bf00      	nop
 80013be:	370c      	adds	r7, #12
 80013c0:	46bd      	mov	sp, r7
 80013c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c6:	4770      	bx	lr
 80013c8:	20000598 	.word	0x20000598

080013cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b083      	sub	sp, #12
 80013d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013d2:	2300      	movs	r3, #0
 80013d4:	607b      	str	r3, [r7, #4]
 80013d6:	4b10      	ldr	r3, [pc, #64]	; (8001418 <HAL_MspInit+0x4c>)
 80013d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013da:	4a0f      	ldr	r2, [pc, #60]	; (8001418 <HAL_MspInit+0x4c>)
 80013dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013e0:	6453      	str	r3, [r2, #68]	; 0x44
 80013e2:	4b0d      	ldr	r3, [pc, #52]	; (8001418 <HAL_MspInit+0x4c>)
 80013e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013ea:	607b      	str	r3, [r7, #4]
 80013ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013ee:	2300      	movs	r3, #0
 80013f0:	603b      	str	r3, [r7, #0]
 80013f2:	4b09      	ldr	r3, [pc, #36]	; (8001418 <HAL_MspInit+0x4c>)
 80013f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f6:	4a08      	ldr	r2, [pc, #32]	; (8001418 <HAL_MspInit+0x4c>)
 80013f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013fc:	6413      	str	r3, [r2, #64]	; 0x40
 80013fe:	4b06      	ldr	r3, [pc, #24]	; (8001418 <HAL_MspInit+0x4c>)
 8001400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001402:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001406:	603b      	str	r3, [r7, #0]
 8001408:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800140a:	bf00      	nop
 800140c:	370c      	adds	r7, #12
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr
 8001416:	bf00      	nop
 8001418:	40023800 	.word	0x40023800

0800141c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001420:	bf00      	nop
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr

0800142a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800142a:	b480      	push	{r7}
 800142c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800142e:	e7fe      	b.n	800142e <HardFault_Handler+0x4>

08001430 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001434:	e7fe      	b.n	8001434 <MemManage_Handler+0x4>

08001436 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001436:	b480      	push	{r7}
 8001438:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800143a:	e7fe      	b.n	800143a <BusFault_Handler+0x4>

0800143c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001440:	e7fe      	b.n	8001440 <UsageFault_Handler+0x4>

08001442 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001442:	b480      	push	{r7}
 8001444:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001446:	bf00      	nop
 8001448:	46bd      	mov	sp, r7
 800144a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144e:	4770      	bx	lr

08001450 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001454:	bf00      	nop
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr

0800145e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800145e:	b480      	push	{r7}
 8001460:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001462:	bf00      	nop
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr

0800146c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001470:	f000 f94e 	bl	8001710 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001474:	bf00      	nop
 8001476:	bd80      	pop	{r7, pc}

08001478 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 800147c:	4802      	ldr	r0, [pc, #8]	; (8001488 <USART6_IRQHandler+0x10>)
 800147e:	f001 fedb 	bl	8003238 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001482:	bf00      	nop
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	200005a4 	.word	0x200005a4

0800148c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b086      	sub	sp, #24
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001494:	4a14      	ldr	r2, [pc, #80]	; (80014e8 <_sbrk+0x5c>)
 8001496:	4b15      	ldr	r3, [pc, #84]	; (80014ec <_sbrk+0x60>)
 8001498:	1ad3      	subs	r3, r2, r3
 800149a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800149c:	697b      	ldr	r3, [r7, #20]
 800149e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014a0:	4b13      	ldr	r3, [pc, #76]	; (80014f0 <_sbrk+0x64>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d102      	bne.n	80014ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014a8:	4b11      	ldr	r3, [pc, #68]	; (80014f0 <_sbrk+0x64>)
 80014aa:	4a12      	ldr	r2, [pc, #72]	; (80014f4 <_sbrk+0x68>)
 80014ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014ae:	4b10      	ldr	r3, [pc, #64]	; (80014f0 <_sbrk+0x64>)
 80014b0:	681a      	ldr	r2, [r3, #0]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	4413      	add	r3, r2
 80014b6:	693a      	ldr	r2, [r7, #16]
 80014b8:	429a      	cmp	r2, r3
 80014ba:	d207      	bcs.n	80014cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014bc:	f002 fe14 	bl	80040e8 <__errno>
 80014c0:	4603      	mov	r3, r0
 80014c2:	220c      	movs	r2, #12
 80014c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014c6:	f04f 33ff 	mov.w	r3, #4294967295
 80014ca:	e009      	b.n	80014e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014cc:	4b08      	ldr	r3, [pc, #32]	; (80014f0 <_sbrk+0x64>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014d2:	4b07      	ldr	r3, [pc, #28]	; (80014f0 <_sbrk+0x64>)
 80014d4:	681a      	ldr	r2, [r3, #0]
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	4413      	add	r3, r2
 80014da:	4a05      	ldr	r2, [pc, #20]	; (80014f0 <_sbrk+0x64>)
 80014dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014de:	68fb      	ldr	r3, [r7, #12]
}
 80014e0:	4618      	mov	r0, r3
 80014e2:	3718      	adds	r7, #24
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	20020000 	.word	0x20020000
 80014ec:	00000400 	.word	0x00000400
 80014f0:	200005a0 	.word	0x200005a0
 80014f4:	200005f8 	.word	0x200005f8

080014f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014fc:	4b08      	ldr	r3, [pc, #32]	; (8001520 <SystemInit+0x28>)
 80014fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001502:	4a07      	ldr	r2, [pc, #28]	; (8001520 <SystemInit+0x28>)
 8001504:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001508:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800150c:	4b04      	ldr	r3, [pc, #16]	; (8001520 <SystemInit+0x28>)
 800150e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001512:	609a      	str	r2, [r3, #8]
#endif
}
 8001514:	bf00      	nop
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr
 800151e:	bf00      	nop
 8001520:	e000ed00 	.word	0xe000ed00

08001524 <MX_USART6_UART_Init>:
UART_HandleTypeDef huart6;

/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	af00      	add	r7, sp, #0

  huart6.Instance = USART6;
 8001528:	4b11      	ldr	r3, [pc, #68]	; (8001570 <MX_USART6_UART_Init+0x4c>)
 800152a:	4a12      	ldr	r2, [pc, #72]	; (8001574 <MX_USART6_UART_Init+0x50>)
 800152c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800152e:	4b10      	ldr	r3, [pc, #64]	; (8001570 <MX_USART6_UART_Init+0x4c>)
 8001530:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001534:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001536:	4b0e      	ldr	r3, [pc, #56]	; (8001570 <MX_USART6_UART_Init+0x4c>)
 8001538:	2200      	movs	r2, #0
 800153a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800153c:	4b0c      	ldr	r3, [pc, #48]	; (8001570 <MX_USART6_UART_Init+0x4c>)
 800153e:	2200      	movs	r2, #0
 8001540:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001542:	4b0b      	ldr	r3, [pc, #44]	; (8001570 <MX_USART6_UART_Init+0x4c>)
 8001544:	2200      	movs	r2, #0
 8001546:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001548:	4b09      	ldr	r3, [pc, #36]	; (8001570 <MX_USART6_UART_Init+0x4c>)
 800154a:	220c      	movs	r2, #12
 800154c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800154e:	4b08      	ldr	r3, [pc, #32]	; (8001570 <MX_USART6_UART_Init+0x4c>)
 8001550:	2200      	movs	r2, #0
 8001552:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001554:	4b06      	ldr	r3, [pc, #24]	; (8001570 <MX_USART6_UART_Init+0x4c>)
 8001556:	2200      	movs	r2, #0
 8001558:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800155a:	4805      	ldr	r0, [pc, #20]	; (8001570 <MX_USART6_UART_Init+0x4c>)
 800155c:	f001 fce0 	bl	8002f20 <HAL_UART_Init>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d001      	beq.n	800156a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001566:	f7ff fd33 	bl	8000fd0 <Error_Handler>
  }

}
 800156a:	bf00      	nop
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	200005a4 	.word	0x200005a4
 8001574:	40011400 	.word	0x40011400

08001578 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b08a      	sub	sp, #40	; 0x28
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001580:	f107 0314 	add.w	r3, r7, #20
 8001584:	2200      	movs	r2, #0
 8001586:	601a      	str	r2, [r3, #0]
 8001588:	605a      	str	r2, [r3, #4]
 800158a:	609a      	str	r2, [r3, #8]
 800158c:	60da      	str	r2, [r3, #12]
 800158e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART6)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a1d      	ldr	r2, [pc, #116]	; (800160c <HAL_UART_MspInit+0x94>)
 8001596:	4293      	cmp	r3, r2
 8001598:	d133      	bne.n	8001602 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* USART6 clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 800159a:	2300      	movs	r3, #0
 800159c:	613b      	str	r3, [r7, #16]
 800159e:	4b1c      	ldr	r3, [pc, #112]	; (8001610 <HAL_UART_MspInit+0x98>)
 80015a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015a2:	4a1b      	ldr	r2, [pc, #108]	; (8001610 <HAL_UART_MspInit+0x98>)
 80015a4:	f043 0320 	orr.w	r3, r3, #32
 80015a8:	6453      	str	r3, [r2, #68]	; 0x44
 80015aa:	4b19      	ldr	r3, [pc, #100]	; (8001610 <HAL_UART_MspInit+0x98>)
 80015ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ae:	f003 0320 	and.w	r3, r3, #32
 80015b2:	613b      	str	r3, [r7, #16]
 80015b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015b6:	2300      	movs	r3, #0
 80015b8:	60fb      	str	r3, [r7, #12]
 80015ba:	4b15      	ldr	r3, [pc, #84]	; (8001610 <HAL_UART_MspInit+0x98>)
 80015bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015be:	4a14      	ldr	r2, [pc, #80]	; (8001610 <HAL_UART_MspInit+0x98>)
 80015c0:	f043 0304 	orr.w	r3, r3, #4
 80015c4:	6313      	str	r3, [r2, #48]	; 0x30
 80015c6:	4b12      	ldr	r3, [pc, #72]	; (8001610 <HAL_UART_MspInit+0x98>)
 80015c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ca:	f003 0304 	and.w	r3, r3, #4
 80015ce:	60fb      	str	r3, [r7, #12]
 80015d0:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80015d2:	23c0      	movs	r3, #192	; 0xc0
 80015d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d6:	2302      	movs	r3, #2
 80015d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015da:	2300      	movs	r3, #0
 80015dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015de:	2303      	movs	r3, #3
 80015e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80015e2:	2308      	movs	r3, #8
 80015e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015e6:	f107 0314 	add.w	r3, r7, #20
 80015ea:	4619      	mov	r1, r3
 80015ec:	4809      	ldr	r0, [pc, #36]	; (8001614 <HAL_UART_MspInit+0x9c>)
 80015ee:	f000 fa07 	bl	8001a00 <HAL_GPIO_Init>

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 80015f2:	2200      	movs	r2, #0
 80015f4:	2100      	movs	r1, #0
 80015f6:	2047      	movs	r0, #71	; 0x47
 80015f8:	f000 f9a9 	bl	800194e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80015fc:	2047      	movs	r0, #71	; 0x47
 80015fe:	f000 f9c2 	bl	8001986 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8001602:	bf00      	nop
 8001604:	3728      	adds	r7, #40	; 0x28
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	40011400 	.word	0x40011400
 8001610:	40023800 	.word	0x40023800
 8001614:	40020800 	.word	0x40020800

08001618 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001618:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001650 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800161c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800161e:	e003      	b.n	8001628 <LoopCopyDataInit>

08001620 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001620:	4b0c      	ldr	r3, [pc, #48]	; (8001654 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001622:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001624:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001626:	3104      	adds	r1, #4

08001628 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001628:	480b      	ldr	r0, [pc, #44]	; (8001658 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800162a:	4b0c      	ldr	r3, [pc, #48]	; (800165c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800162c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800162e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001630:	d3f6      	bcc.n	8001620 <CopyDataInit>
  ldr  r2, =_sbss
 8001632:	4a0b      	ldr	r2, [pc, #44]	; (8001660 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001634:	e002      	b.n	800163c <LoopFillZerobss>

08001636 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001636:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001638:	f842 3b04 	str.w	r3, [r2], #4

0800163c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800163c:	4b09      	ldr	r3, [pc, #36]	; (8001664 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800163e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001640:	d3f9      	bcc.n	8001636 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001642:	f7ff ff59 	bl	80014f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001646:	f002 fd55 	bl	80040f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800164a:	f7ff fbf1 	bl	8000e30 <main>
  bx  lr    
 800164e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001650:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001654:	08006118 	.word	0x08006118
  ldr  r0, =_sdata
 8001658:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800165c:	200000e0 	.word	0x200000e0
  ldr  r2, =_sbss
 8001660:	200000e0 	.word	0x200000e0
  ldr  r3, = _ebss
 8001664:	200005f8 	.word	0x200005f8

08001668 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001668:	e7fe      	b.n	8001668 <ADC_IRQHandler>
	...

0800166c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001670:	4b0e      	ldr	r3, [pc, #56]	; (80016ac <HAL_Init+0x40>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a0d      	ldr	r2, [pc, #52]	; (80016ac <HAL_Init+0x40>)
 8001676:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800167a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800167c:	4b0b      	ldr	r3, [pc, #44]	; (80016ac <HAL_Init+0x40>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4a0a      	ldr	r2, [pc, #40]	; (80016ac <HAL_Init+0x40>)
 8001682:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001686:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001688:	4b08      	ldr	r3, [pc, #32]	; (80016ac <HAL_Init+0x40>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4a07      	ldr	r2, [pc, #28]	; (80016ac <HAL_Init+0x40>)
 800168e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001692:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001694:	2003      	movs	r0, #3
 8001696:	f000 f94f 	bl	8001938 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800169a:	2000      	movs	r0, #0
 800169c:	f000 f808 	bl	80016b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016a0:	f7ff fe94 	bl	80013cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016a4:	2300      	movs	r3, #0
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	40023c00 	.word	0x40023c00

080016b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b082      	sub	sp, #8
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016b8:	4b12      	ldr	r3, [pc, #72]	; (8001704 <HAL_InitTick+0x54>)
 80016ba:	681a      	ldr	r2, [r3, #0]
 80016bc:	4b12      	ldr	r3, [pc, #72]	; (8001708 <HAL_InitTick+0x58>)
 80016be:	781b      	ldrb	r3, [r3, #0]
 80016c0:	4619      	mov	r1, r3
 80016c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80016ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80016ce:	4618      	mov	r0, r3
 80016d0:	f000 f967 	bl	80019a2 <HAL_SYSTICK_Config>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d001      	beq.n	80016de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016da:	2301      	movs	r3, #1
 80016dc:	e00e      	b.n	80016fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2b0f      	cmp	r3, #15
 80016e2:	d80a      	bhi.n	80016fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016e4:	2200      	movs	r2, #0
 80016e6:	6879      	ldr	r1, [r7, #4]
 80016e8:	f04f 30ff 	mov.w	r0, #4294967295
 80016ec:	f000 f92f 	bl	800194e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016f0:	4a06      	ldr	r2, [pc, #24]	; (800170c <HAL_InitTick+0x5c>)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016f6:	2300      	movs	r3, #0
 80016f8:	e000      	b.n	80016fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016fa:	2301      	movs	r3, #1
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	3708      	adds	r7, #8
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}
 8001704:	20000070 	.word	0x20000070
 8001708:	20000078 	.word	0x20000078
 800170c:	20000074 	.word	0x20000074

08001710 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001714:	4b06      	ldr	r3, [pc, #24]	; (8001730 <HAL_IncTick+0x20>)
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	461a      	mov	r2, r3
 800171a:	4b06      	ldr	r3, [pc, #24]	; (8001734 <HAL_IncTick+0x24>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4413      	add	r3, r2
 8001720:	4a04      	ldr	r2, [pc, #16]	; (8001734 <HAL_IncTick+0x24>)
 8001722:	6013      	str	r3, [r2, #0]
}
 8001724:	bf00      	nop
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr
 800172e:	bf00      	nop
 8001730:	20000078 	.word	0x20000078
 8001734:	200005e4 	.word	0x200005e4

08001738 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
  return uwTick;
 800173c:	4b03      	ldr	r3, [pc, #12]	; (800174c <HAL_GetTick+0x14>)
 800173e:	681b      	ldr	r3, [r3, #0]
}
 8001740:	4618      	mov	r0, r3
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr
 800174a:	bf00      	nop
 800174c:	200005e4 	.word	0x200005e4

08001750 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b084      	sub	sp, #16
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001758:	f7ff ffee 	bl	8001738 <HAL_GetTick>
 800175c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001768:	d005      	beq.n	8001776 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800176a:	4b0a      	ldr	r3, [pc, #40]	; (8001794 <HAL_Delay+0x44>)
 800176c:	781b      	ldrb	r3, [r3, #0]
 800176e:	461a      	mov	r2, r3
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	4413      	add	r3, r2
 8001774:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001776:	bf00      	nop
 8001778:	f7ff ffde 	bl	8001738 <HAL_GetTick>
 800177c:	4602      	mov	r2, r0
 800177e:	68bb      	ldr	r3, [r7, #8]
 8001780:	1ad3      	subs	r3, r2, r3
 8001782:	68fa      	ldr	r2, [r7, #12]
 8001784:	429a      	cmp	r2, r3
 8001786:	d8f7      	bhi.n	8001778 <HAL_Delay+0x28>
  {
  }
}
 8001788:	bf00      	nop
 800178a:	bf00      	nop
 800178c:	3710      	adds	r7, #16
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	20000078 	.word	0x20000078

08001798 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001798:	b480      	push	{r7}
 800179a:	b085      	sub	sp, #20
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	f003 0307 	and.w	r3, r3, #7
 80017a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017a8:	4b0c      	ldr	r3, [pc, #48]	; (80017dc <__NVIC_SetPriorityGrouping+0x44>)
 80017aa:	68db      	ldr	r3, [r3, #12]
 80017ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017ae:	68ba      	ldr	r2, [r7, #8]
 80017b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017b4:	4013      	ands	r3, r2
 80017b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017bc:	68bb      	ldr	r3, [r7, #8]
 80017be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017ca:	4a04      	ldr	r2, [pc, #16]	; (80017dc <__NVIC_SetPriorityGrouping+0x44>)
 80017cc:	68bb      	ldr	r3, [r7, #8]
 80017ce:	60d3      	str	r3, [r2, #12]
}
 80017d0:	bf00      	nop
 80017d2:	3714      	adds	r7, #20
 80017d4:	46bd      	mov	sp, r7
 80017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017da:	4770      	bx	lr
 80017dc:	e000ed00 	.word	0xe000ed00

080017e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017e4:	4b04      	ldr	r3, [pc, #16]	; (80017f8 <__NVIC_GetPriorityGrouping+0x18>)
 80017e6:	68db      	ldr	r3, [r3, #12]
 80017e8:	0a1b      	lsrs	r3, r3, #8
 80017ea:	f003 0307 	and.w	r3, r3, #7
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	46bd      	mov	sp, r7
 80017f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f6:	4770      	bx	lr
 80017f8:	e000ed00 	.word	0xe000ed00

080017fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b083      	sub	sp, #12
 8001800:	af00      	add	r7, sp, #0
 8001802:	4603      	mov	r3, r0
 8001804:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001806:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800180a:	2b00      	cmp	r3, #0
 800180c:	db0b      	blt.n	8001826 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800180e:	79fb      	ldrb	r3, [r7, #7]
 8001810:	f003 021f 	and.w	r2, r3, #31
 8001814:	4907      	ldr	r1, [pc, #28]	; (8001834 <__NVIC_EnableIRQ+0x38>)
 8001816:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800181a:	095b      	lsrs	r3, r3, #5
 800181c:	2001      	movs	r0, #1
 800181e:	fa00 f202 	lsl.w	r2, r0, r2
 8001822:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001826:	bf00      	nop
 8001828:	370c      	adds	r7, #12
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr
 8001832:	bf00      	nop
 8001834:	e000e100 	.word	0xe000e100

08001838 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001838:	b480      	push	{r7}
 800183a:	b083      	sub	sp, #12
 800183c:	af00      	add	r7, sp, #0
 800183e:	4603      	mov	r3, r0
 8001840:	6039      	str	r1, [r7, #0]
 8001842:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001844:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001848:	2b00      	cmp	r3, #0
 800184a:	db0a      	blt.n	8001862 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	b2da      	uxtb	r2, r3
 8001850:	490c      	ldr	r1, [pc, #48]	; (8001884 <__NVIC_SetPriority+0x4c>)
 8001852:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001856:	0112      	lsls	r2, r2, #4
 8001858:	b2d2      	uxtb	r2, r2
 800185a:	440b      	add	r3, r1
 800185c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001860:	e00a      	b.n	8001878 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	b2da      	uxtb	r2, r3
 8001866:	4908      	ldr	r1, [pc, #32]	; (8001888 <__NVIC_SetPriority+0x50>)
 8001868:	79fb      	ldrb	r3, [r7, #7]
 800186a:	f003 030f 	and.w	r3, r3, #15
 800186e:	3b04      	subs	r3, #4
 8001870:	0112      	lsls	r2, r2, #4
 8001872:	b2d2      	uxtb	r2, r2
 8001874:	440b      	add	r3, r1
 8001876:	761a      	strb	r2, [r3, #24]
}
 8001878:	bf00      	nop
 800187a:	370c      	adds	r7, #12
 800187c:	46bd      	mov	sp, r7
 800187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001882:	4770      	bx	lr
 8001884:	e000e100 	.word	0xe000e100
 8001888:	e000ed00 	.word	0xe000ed00

0800188c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800188c:	b480      	push	{r7}
 800188e:	b089      	sub	sp, #36	; 0x24
 8001890:	af00      	add	r7, sp, #0
 8001892:	60f8      	str	r0, [r7, #12]
 8001894:	60b9      	str	r1, [r7, #8]
 8001896:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	f003 0307 	and.w	r3, r3, #7
 800189e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018a0:	69fb      	ldr	r3, [r7, #28]
 80018a2:	f1c3 0307 	rsb	r3, r3, #7
 80018a6:	2b04      	cmp	r3, #4
 80018a8:	bf28      	it	cs
 80018aa:	2304      	movcs	r3, #4
 80018ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018ae:	69fb      	ldr	r3, [r7, #28]
 80018b0:	3304      	adds	r3, #4
 80018b2:	2b06      	cmp	r3, #6
 80018b4:	d902      	bls.n	80018bc <NVIC_EncodePriority+0x30>
 80018b6:	69fb      	ldr	r3, [r7, #28]
 80018b8:	3b03      	subs	r3, #3
 80018ba:	e000      	b.n	80018be <NVIC_EncodePriority+0x32>
 80018bc:	2300      	movs	r3, #0
 80018be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018c0:	f04f 32ff 	mov.w	r2, #4294967295
 80018c4:	69bb      	ldr	r3, [r7, #24]
 80018c6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ca:	43da      	mvns	r2, r3
 80018cc:	68bb      	ldr	r3, [r7, #8]
 80018ce:	401a      	ands	r2, r3
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018d4:	f04f 31ff 	mov.w	r1, #4294967295
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	fa01 f303 	lsl.w	r3, r1, r3
 80018de:	43d9      	mvns	r1, r3
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018e4:	4313      	orrs	r3, r2
         );
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	3724      	adds	r7, #36	; 0x24
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr
	...

080018f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b082      	sub	sp, #8
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	3b01      	subs	r3, #1
 8001900:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001904:	d301      	bcc.n	800190a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001906:	2301      	movs	r3, #1
 8001908:	e00f      	b.n	800192a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800190a:	4a0a      	ldr	r2, [pc, #40]	; (8001934 <SysTick_Config+0x40>)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	3b01      	subs	r3, #1
 8001910:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001912:	210f      	movs	r1, #15
 8001914:	f04f 30ff 	mov.w	r0, #4294967295
 8001918:	f7ff ff8e 	bl	8001838 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800191c:	4b05      	ldr	r3, [pc, #20]	; (8001934 <SysTick_Config+0x40>)
 800191e:	2200      	movs	r2, #0
 8001920:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001922:	4b04      	ldr	r3, [pc, #16]	; (8001934 <SysTick_Config+0x40>)
 8001924:	2207      	movs	r2, #7
 8001926:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001928:	2300      	movs	r3, #0
}
 800192a:	4618      	mov	r0, r3
 800192c:	3708      	adds	r7, #8
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	e000e010 	.word	0xe000e010

08001938 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b082      	sub	sp, #8
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001940:	6878      	ldr	r0, [r7, #4]
 8001942:	f7ff ff29 	bl	8001798 <__NVIC_SetPriorityGrouping>
}
 8001946:	bf00      	nop
 8001948:	3708      	adds	r7, #8
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}

0800194e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800194e:	b580      	push	{r7, lr}
 8001950:	b086      	sub	sp, #24
 8001952:	af00      	add	r7, sp, #0
 8001954:	4603      	mov	r3, r0
 8001956:	60b9      	str	r1, [r7, #8]
 8001958:	607a      	str	r2, [r7, #4]
 800195a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800195c:	2300      	movs	r3, #0
 800195e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001960:	f7ff ff3e 	bl	80017e0 <__NVIC_GetPriorityGrouping>
 8001964:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001966:	687a      	ldr	r2, [r7, #4]
 8001968:	68b9      	ldr	r1, [r7, #8]
 800196a:	6978      	ldr	r0, [r7, #20]
 800196c:	f7ff ff8e 	bl	800188c <NVIC_EncodePriority>
 8001970:	4602      	mov	r2, r0
 8001972:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001976:	4611      	mov	r1, r2
 8001978:	4618      	mov	r0, r3
 800197a:	f7ff ff5d 	bl	8001838 <__NVIC_SetPriority>
}
 800197e:	bf00      	nop
 8001980:	3718      	adds	r7, #24
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}

08001986 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001986:	b580      	push	{r7, lr}
 8001988:	b082      	sub	sp, #8
 800198a:	af00      	add	r7, sp, #0
 800198c:	4603      	mov	r3, r0
 800198e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001990:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001994:	4618      	mov	r0, r3
 8001996:	f7ff ff31 	bl	80017fc <__NVIC_EnableIRQ>
}
 800199a:	bf00      	nop
 800199c:	3708      	adds	r7, #8
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}

080019a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019a2:	b580      	push	{r7, lr}
 80019a4:	b082      	sub	sp, #8
 80019a6:	af00      	add	r7, sp, #0
 80019a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019aa:	6878      	ldr	r0, [r7, #4]
 80019ac:	f7ff ffa2 	bl	80018f4 <SysTick_Config>
 80019b0:	4603      	mov	r3, r0
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	3708      	adds	r7, #8
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}

080019ba <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80019ba:	b480      	push	{r7}
 80019bc:	b083      	sub	sp, #12
 80019be:	af00      	add	r7, sp, #0
 80019c0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80019c8:	b2db      	uxtb	r3, r3
 80019ca:	2b02      	cmp	r3, #2
 80019cc:	d004      	beq.n	80019d8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2280      	movs	r2, #128	; 0x80
 80019d2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80019d4:	2301      	movs	r3, #1
 80019d6:	e00c      	b.n	80019f2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2205      	movs	r2, #5
 80019dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	681a      	ldr	r2, [r3, #0]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f022 0201 	bic.w	r2, r2, #1
 80019ee:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80019f0:	2300      	movs	r3, #0
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	370c      	adds	r7, #12
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr
	...

08001a00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b089      	sub	sp, #36	; 0x24
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
 8001a08:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a12:	2300      	movs	r3, #0
 8001a14:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a16:	2300      	movs	r3, #0
 8001a18:	61fb      	str	r3, [r7, #28]
 8001a1a:	e16b      	b.n	8001cf4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	69fb      	ldr	r3, [r7, #28]
 8001a20:	fa02 f303 	lsl.w	r3, r2, r3
 8001a24:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	697a      	ldr	r2, [r7, #20]
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a30:	693a      	ldr	r2, [r7, #16]
 8001a32:	697b      	ldr	r3, [r7, #20]
 8001a34:	429a      	cmp	r2, r3
 8001a36:	f040 815a 	bne.w	8001cee <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	2b01      	cmp	r3, #1
 8001a40:	d00b      	beq.n	8001a5a <HAL_GPIO_Init+0x5a>
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	2b02      	cmp	r3, #2
 8001a48:	d007      	beq.n	8001a5a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a4e:	2b11      	cmp	r3, #17
 8001a50:	d003      	beq.n	8001a5a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	2b12      	cmp	r3, #18
 8001a58:	d130      	bne.n	8001abc <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	689b      	ldr	r3, [r3, #8]
 8001a5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a60:	69fb      	ldr	r3, [r7, #28]
 8001a62:	005b      	lsls	r3, r3, #1
 8001a64:	2203      	movs	r2, #3
 8001a66:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6a:	43db      	mvns	r3, r3
 8001a6c:	69ba      	ldr	r2, [r7, #24]
 8001a6e:	4013      	ands	r3, r2
 8001a70:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	68da      	ldr	r2, [r3, #12]
 8001a76:	69fb      	ldr	r3, [r7, #28]
 8001a78:	005b      	lsls	r3, r3, #1
 8001a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7e:	69ba      	ldr	r2, [r7, #24]
 8001a80:	4313      	orrs	r3, r2
 8001a82:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	69ba      	ldr	r2, [r7, #24]
 8001a88:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a90:	2201      	movs	r2, #1
 8001a92:	69fb      	ldr	r3, [r7, #28]
 8001a94:	fa02 f303 	lsl.w	r3, r2, r3
 8001a98:	43db      	mvns	r3, r3
 8001a9a:	69ba      	ldr	r2, [r7, #24]
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	091b      	lsrs	r3, r3, #4
 8001aa6:	f003 0201 	and.w	r2, r3, #1
 8001aaa:	69fb      	ldr	r3, [r7, #28]
 8001aac:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab0:	69ba      	ldr	r2, [r7, #24]
 8001ab2:	4313      	orrs	r3, r2
 8001ab4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	69ba      	ldr	r2, [r7, #24]
 8001aba:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	68db      	ldr	r3, [r3, #12]
 8001ac0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001ac2:	69fb      	ldr	r3, [r7, #28]
 8001ac4:	005b      	lsls	r3, r3, #1
 8001ac6:	2203      	movs	r2, #3
 8001ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8001acc:	43db      	mvns	r3, r3
 8001ace:	69ba      	ldr	r2, [r7, #24]
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	689a      	ldr	r2, [r3, #8]
 8001ad8:	69fb      	ldr	r3, [r7, #28]
 8001ada:	005b      	lsls	r3, r3, #1
 8001adc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae0:	69ba      	ldr	r2, [r7, #24]
 8001ae2:	4313      	orrs	r3, r2
 8001ae4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	69ba      	ldr	r2, [r7, #24]
 8001aea:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	2b02      	cmp	r3, #2
 8001af2:	d003      	beq.n	8001afc <HAL_GPIO_Init+0xfc>
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	2b12      	cmp	r3, #18
 8001afa:	d123      	bne.n	8001b44 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001afc:	69fb      	ldr	r3, [r7, #28]
 8001afe:	08da      	lsrs	r2, r3, #3
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	3208      	adds	r2, #8
 8001b04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b08:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b0a:	69fb      	ldr	r3, [r7, #28]
 8001b0c:	f003 0307 	and.w	r3, r3, #7
 8001b10:	009b      	lsls	r3, r3, #2
 8001b12:	220f      	movs	r2, #15
 8001b14:	fa02 f303 	lsl.w	r3, r2, r3
 8001b18:	43db      	mvns	r3, r3
 8001b1a:	69ba      	ldr	r2, [r7, #24]
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	691a      	ldr	r2, [r3, #16]
 8001b24:	69fb      	ldr	r3, [r7, #28]
 8001b26:	f003 0307 	and.w	r3, r3, #7
 8001b2a:	009b      	lsls	r3, r3, #2
 8001b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b30:	69ba      	ldr	r2, [r7, #24]
 8001b32:	4313      	orrs	r3, r2
 8001b34:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b36:	69fb      	ldr	r3, [r7, #28]
 8001b38:	08da      	lsrs	r2, r3, #3
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	3208      	adds	r2, #8
 8001b3e:	69b9      	ldr	r1, [r7, #24]
 8001b40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b4a:	69fb      	ldr	r3, [r7, #28]
 8001b4c:	005b      	lsls	r3, r3, #1
 8001b4e:	2203      	movs	r2, #3
 8001b50:	fa02 f303 	lsl.w	r3, r2, r3
 8001b54:	43db      	mvns	r3, r3
 8001b56:	69ba      	ldr	r2, [r7, #24]
 8001b58:	4013      	ands	r3, r2
 8001b5a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	f003 0203 	and.w	r2, r3, #3
 8001b64:	69fb      	ldr	r3, [r7, #28]
 8001b66:	005b      	lsls	r3, r3, #1
 8001b68:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6c:	69ba      	ldr	r2, [r7, #24]
 8001b6e:	4313      	orrs	r3, r2
 8001b70:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	69ba      	ldr	r2, [r7, #24]
 8001b76:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	f000 80b4 	beq.w	8001cee <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b86:	2300      	movs	r3, #0
 8001b88:	60fb      	str	r3, [r7, #12]
 8001b8a:	4b60      	ldr	r3, [pc, #384]	; (8001d0c <HAL_GPIO_Init+0x30c>)
 8001b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b8e:	4a5f      	ldr	r2, [pc, #380]	; (8001d0c <HAL_GPIO_Init+0x30c>)
 8001b90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b94:	6453      	str	r3, [r2, #68]	; 0x44
 8001b96:	4b5d      	ldr	r3, [pc, #372]	; (8001d0c <HAL_GPIO_Init+0x30c>)
 8001b98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b9e:	60fb      	str	r3, [r7, #12]
 8001ba0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ba2:	4a5b      	ldr	r2, [pc, #364]	; (8001d10 <HAL_GPIO_Init+0x310>)
 8001ba4:	69fb      	ldr	r3, [r7, #28]
 8001ba6:	089b      	lsrs	r3, r3, #2
 8001ba8:	3302      	adds	r3, #2
 8001baa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001bb0:	69fb      	ldr	r3, [r7, #28]
 8001bb2:	f003 0303 	and.w	r3, r3, #3
 8001bb6:	009b      	lsls	r3, r3, #2
 8001bb8:	220f      	movs	r2, #15
 8001bba:	fa02 f303 	lsl.w	r3, r2, r3
 8001bbe:	43db      	mvns	r3, r3
 8001bc0:	69ba      	ldr	r2, [r7, #24]
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	4a52      	ldr	r2, [pc, #328]	; (8001d14 <HAL_GPIO_Init+0x314>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d02b      	beq.n	8001c26 <HAL_GPIO_Init+0x226>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	4a51      	ldr	r2, [pc, #324]	; (8001d18 <HAL_GPIO_Init+0x318>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d025      	beq.n	8001c22 <HAL_GPIO_Init+0x222>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	4a50      	ldr	r2, [pc, #320]	; (8001d1c <HAL_GPIO_Init+0x31c>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d01f      	beq.n	8001c1e <HAL_GPIO_Init+0x21e>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	4a4f      	ldr	r2, [pc, #316]	; (8001d20 <HAL_GPIO_Init+0x320>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d019      	beq.n	8001c1a <HAL_GPIO_Init+0x21a>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	4a4e      	ldr	r2, [pc, #312]	; (8001d24 <HAL_GPIO_Init+0x324>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d013      	beq.n	8001c16 <HAL_GPIO_Init+0x216>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	4a4d      	ldr	r2, [pc, #308]	; (8001d28 <HAL_GPIO_Init+0x328>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d00d      	beq.n	8001c12 <HAL_GPIO_Init+0x212>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	4a4c      	ldr	r2, [pc, #304]	; (8001d2c <HAL_GPIO_Init+0x32c>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d007      	beq.n	8001c0e <HAL_GPIO_Init+0x20e>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	4a4b      	ldr	r2, [pc, #300]	; (8001d30 <HAL_GPIO_Init+0x330>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d101      	bne.n	8001c0a <HAL_GPIO_Init+0x20a>
 8001c06:	2307      	movs	r3, #7
 8001c08:	e00e      	b.n	8001c28 <HAL_GPIO_Init+0x228>
 8001c0a:	2308      	movs	r3, #8
 8001c0c:	e00c      	b.n	8001c28 <HAL_GPIO_Init+0x228>
 8001c0e:	2306      	movs	r3, #6
 8001c10:	e00a      	b.n	8001c28 <HAL_GPIO_Init+0x228>
 8001c12:	2305      	movs	r3, #5
 8001c14:	e008      	b.n	8001c28 <HAL_GPIO_Init+0x228>
 8001c16:	2304      	movs	r3, #4
 8001c18:	e006      	b.n	8001c28 <HAL_GPIO_Init+0x228>
 8001c1a:	2303      	movs	r3, #3
 8001c1c:	e004      	b.n	8001c28 <HAL_GPIO_Init+0x228>
 8001c1e:	2302      	movs	r3, #2
 8001c20:	e002      	b.n	8001c28 <HAL_GPIO_Init+0x228>
 8001c22:	2301      	movs	r3, #1
 8001c24:	e000      	b.n	8001c28 <HAL_GPIO_Init+0x228>
 8001c26:	2300      	movs	r3, #0
 8001c28:	69fa      	ldr	r2, [r7, #28]
 8001c2a:	f002 0203 	and.w	r2, r2, #3
 8001c2e:	0092      	lsls	r2, r2, #2
 8001c30:	4093      	lsls	r3, r2
 8001c32:	69ba      	ldr	r2, [r7, #24]
 8001c34:	4313      	orrs	r3, r2
 8001c36:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c38:	4935      	ldr	r1, [pc, #212]	; (8001d10 <HAL_GPIO_Init+0x310>)
 8001c3a:	69fb      	ldr	r3, [r7, #28]
 8001c3c:	089b      	lsrs	r3, r3, #2
 8001c3e:	3302      	adds	r3, #2
 8001c40:	69ba      	ldr	r2, [r7, #24]
 8001c42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c46:	4b3b      	ldr	r3, [pc, #236]	; (8001d34 <HAL_GPIO_Init+0x334>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c4c:	693b      	ldr	r3, [r7, #16]
 8001c4e:	43db      	mvns	r3, r3
 8001c50:	69ba      	ldr	r2, [r7, #24]
 8001c52:	4013      	ands	r3, r2
 8001c54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d003      	beq.n	8001c6a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001c62:	69ba      	ldr	r2, [r7, #24]
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	4313      	orrs	r3, r2
 8001c68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c6a:	4a32      	ldr	r2, [pc, #200]	; (8001d34 <HAL_GPIO_Init+0x334>)
 8001c6c:	69bb      	ldr	r3, [r7, #24]
 8001c6e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001c70:	4b30      	ldr	r3, [pc, #192]	; (8001d34 <HAL_GPIO_Init+0x334>)
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c76:	693b      	ldr	r3, [r7, #16]
 8001c78:	43db      	mvns	r3, r3
 8001c7a:	69ba      	ldr	r2, [r7, #24]
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d003      	beq.n	8001c94 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001c8c:	69ba      	ldr	r2, [r7, #24]
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	4313      	orrs	r3, r2
 8001c92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c94:	4a27      	ldr	r2, [pc, #156]	; (8001d34 <HAL_GPIO_Init+0x334>)
 8001c96:	69bb      	ldr	r3, [r7, #24]
 8001c98:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c9a:	4b26      	ldr	r3, [pc, #152]	; (8001d34 <HAL_GPIO_Init+0x334>)
 8001c9c:	689b      	ldr	r3, [r3, #8]
 8001c9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ca0:	693b      	ldr	r3, [r7, #16]
 8001ca2:	43db      	mvns	r3, r3
 8001ca4:	69ba      	ldr	r2, [r7, #24]
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d003      	beq.n	8001cbe <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001cb6:	69ba      	ldr	r2, [r7, #24]
 8001cb8:	693b      	ldr	r3, [r7, #16]
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001cbe:	4a1d      	ldr	r2, [pc, #116]	; (8001d34 <HAL_GPIO_Init+0x334>)
 8001cc0:	69bb      	ldr	r3, [r7, #24]
 8001cc2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001cc4:	4b1b      	ldr	r3, [pc, #108]	; (8001d34 <HAL_GPIO_Init+0x334>)
 8001cc6:	68db      	ldr	r3, [r3, #12]
 8001cc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	43db      	mvns	r3, r3
 8001cce:	69ba      	ldr	r2, [r7, #24]
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d003      	beq.n	8001ce8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001ce0:	69ba      	ldr	r2, [r7, #24]
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ce8:	4a12      	ldr	r2, [pc, #72]	; (8001d34 <HAL_GPIO_Init+0x334>)
 8001cea:	69bb      	ldr	r3, [r7, #24]
 8001cec:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cee:	69fb      	ldr	r3, [r7, #28]
 8001cf0:	3301      	adds	r3, #1
 8001cf2:	61fb      	str	r3, [r7, #28]
 8001cf4:	69fb      	ldr	r3, [r7, #28]
 8001cf6:	2b0f      	cmp	r3, #15
 8001cf8:	f67f ae90 	bls.w	8001a1c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001cfc:	bf00      	nop
 8001cfe:	bf00      	nop
 8001d00:	3724      	adds	r7, #36	; 0x24
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr
 8001d0a:	bf00      	nop
 8001d0c:	40023800 	.word	0x40023800
 8001d10:	40013800 	.word	0x40013800
 8001d14:	40020000 	.word	0x40020000
 8001d18:	40020400 	.word	0x40020400
 8001d1c:	40020800 	.word	0x40020800
 8001d20:	40020c00 	.word	0x40020c00
 8001d24:	40021000 	.word	0x40021000
 8001d28:	40021400 	.word	0x40021400
 8001d2c:	40021800 	.word	0x40021800
 8001d30:	40021c00 	.word	0x40021c00
 8001d34:	40013c00 	.word	0x40013c00

08001d38 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b085      	sub	sp, #20
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
 8001d40:	460b      	mov	r3, r1
 8001d42:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	691a      	ldr	r2, [r3, #16]
 8001d48:	887b      	ldrh	r3, [r7, #2]
 8001d4a:	4013      	ands	r3, r2
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d002      	beq.n	8001d56 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001d50:	2301      	movs	r3, #1
 8001d52:	73fb      	strb	r3, [r7, #15]
 8001d54:	e001      	b.n	8001d5a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001d56:	2300      	movs	r3, #0
 8001d58:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001d5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	3714      	adds	r7, #20
 8001d60:	46bd      	mov	sp, r7
 8001d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d66:	4770      	bx	lr

08001d68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b083      	sub	sp, #12
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
 8001d70:	460b      	mov	r3, r1
 8001d72:	807b      	strh	r3, [r7, #2]
 8001d74:	4613      	mov	r3, r2
 8001d76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d78:	787b      	ldrb	r3, [r7, #1]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d003      	beq.n	8001d86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d7e:	887a      	ldrh	r2, [r7, #2]
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001d84:	e003      	b.n	8001d8e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001d86:	887b      	ldrh	r3, [r7, #2]
 8001d88:	041a      	lsls	r2, r3, #16
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	619a      	str	r2, [r3, #24]
}
 8001d8e:	bf00      	nop
 8001d90:	370c      	adds	r7, #12
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr

08001d9a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d9a:	b480      	push	{r7}
 8001d9c:	b083      	sub	sp, #12
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	6078      	str	r0, [r7, #4]
 8001da2:	460b      	mov	r3, r1
 8001da4:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	695a      	ldr	r2, [r3, #20]
 8001daa:	887b      	ldrh	r3, [r7, #2]
 8001dac:	401a      	ands	r2, r3
 8001dae:	887b      	ldrh	r3, [r7, #2]
 8001db0:	429a      	cmp	r2, r3
 8001db2:	d104      	bne.n	8001dbe <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001db4:	887b      	ldrh	r3, [r7, #2]
 8001db6:	041a      	lsls	r2, r3, #16
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8001dbc:	e002      	b.n	8001dc4 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8001dbe:	887a      	ldrh	r2, [r7, #2]
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	619a      	str	r2, [r3, #24]
}
 8001dc4:	bf00      	nop
 8001dc6:	370c      	adds	r7, #12
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dce:	4770      	bx	lr

08001dd0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b084      	sub	sp, #16
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d101      	bne.n	8001de2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001dde:	2301      	movs	r3, #1
 8001de0:	e12b      	b.n	800203a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001de8:	b2db      	uxtb	r3, r3
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d106      	bne.n	8001dfc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2200      	movs	r2, #0
 8001df2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001df6:	6878      	ldr	r0, [r7, #4]
 8001df8:	f7fe fc3c 	bl	8000674 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2224      	movs	r2, #36	; 0x24
 8001e00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	681a      	ldr	r2, [r3, #0]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f022 0201 	bic.w	r2, r2, #1
 8001e12:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	681a      	ldr	r2, [r3, #0]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001e22:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	681a      	ldr	r2, [r3, #0]
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001e32:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001e34:	f001 f84c 	bl	8002ed0 <HAL_RCC_GetPCLK1Freq>
 8001e38:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	4a81      	ldr	r2, [pc, #516]	; (8002044 <HAL_I2C_Init+0x274>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d807      	bhi.n	8001e54 <HAL_I2C_Init+0x84>
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	4a80      	ldr	r2, [pc, #512]	; (8002048 <HAL_I2C_Init+0x278>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	bf94      	ite	ls
 8001e4c:	2301      	movls	r3, #1
 8001e4e:	2300      	movhi	r3, #0
 8001e50:	b2db      	uxtb	r3, r3
 8001e52:	e006      	b.n	8001e62 <HAL_I2C_Init+0x92>
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	4a7d      	ldr	r2, [pc, #500]	; (800204c <HAL_I2C_Init+0x27c>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	bf94      	ite	ls
 8001e5c:	2301      	movls	r3, #1
 8001e5e:	2300      	movhi	r3, #0
 8001e60:	b2db      	uxtb	r3, r3
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d001      	beq.n	8001e6a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001e66:	2301      	movs	r3, #1
 8001e68:	e0e7      	b.n	800203a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	4a78      	ldr	r2, [pc, #480]	; (8002050 <HAL_I2C_Init+0x280>)
 8001e6e:	fba2 2303 	umull	r2, r3, r2, r3
 8001e72:	0c9b      	lsrs	r3, r3, #18
 8001e74:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	68ba      	ldr	r2, [r7, #8]
 8001e86:	430a      	orrs	r2, r1
 8001e88:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	6a1b      	ldr	r3, [r3, #32]
 8001e90:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	4a6a      	ldr	r2, [pc, #424]	; (8002044 <HAL_I2C_Init+0x274>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d802      	bhi.n	8001ea4 <HAL_I2C_Init+0xd4>
 8001e9e:	68bb      	ldr	r3, [r7, #8]
 8001ea0:	3301      	adds	r3, #1
 8001ea2:	e009      	b.n	8001eb8 <HAL_I2C_Init+0xe8>
 8001ea4:	68bb      	ldr	r3, [r7, #8]
 8001ea6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001eaa:	fb02 f303 	mul.w	r3, r2, r3
 8001eae:	4a69      	ldr	r2, [pc, #420]	; (8002054 <HAL_I2C_Init+0x284>)
 8001eb0:	fba2 2303 	umull	r2, r3, r2, r3
 8001eb4:	099b      	lsrs	r3, r3, #6
 8001eb6:	3301      	adds	r3, #1
 8001eb8:	687a      	ldr	r2, [r7, #4]
 8001eba:	6812      	ldr	r2, [r2, #0]
 8001ebc:	430b      	orrs	r3, r1
 8001ebe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	69db      	ldr	r3, [r3, #28]
 8001ec6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001eca:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	495c      	ldr	r1, [pc, #368]	; (8002044 <HAL_I2C_Init+0x274>)
 8001ed4:	428b      	cmp	r3, r1
 8001ed6:	d819      	bhi.n	8001f0c <HAL_I2C_Init+0x13c>
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	1e59      	subs	r1, r3, #1
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	005b      	lsls	r3, r3, #1
 8001ee2:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ee6:	1c59      	adds	r1, r3, #1
 8001ee8:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001eec:	400b      	ands	r3, r1
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d00a      	beq.n	8001f08 <HAL_I2C_Init+0x138>
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	1e59      	subs	r1, r3, #1
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	005b      	lsls	r3, r3, #1
 8001efc:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f00:	3301      	adds	r3, #1
 8001f02:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f06:	e051      	b.n	8001fac <HAL_I2C_Init+0x1dc>
 8001f08:	2304      	movs	r3, #4
 8001f0a:	e04f      	b.n	8001fac <HAL_I2C_Init+0x1dc>
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d111      	bne.n	8001f38 <HAL_I2C_Init+0x168>
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	1e58      	subs	r0, r3, #1
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6859      	ldr	r1, [r3, #4]
 8001f1c:	460b      	mov	r3, r1
 8001f1e:	005b      	lsls	r3, r3, #1
 8001f20:	440b      	add	r3, r1
 8001f22:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f26:	3301      	adds	r3, #1
 8001f28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	bf0c      	ite	eq
 8001f30:	2301      	moveq	r3, #1
 8001f32:	2300      	movne	r3, #0
 8001f34:	b2db      	uxtb	r3, r3
 8001f36:	e012      	b.n	8001f5e <HAL_I2C_Init+0x18e>
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	1e58      	subs	r0, r3, #1
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6859      	ldr	r1, [r3, #4]
 8001f40:	460b      	mov	r3, r1
 8001f42:	009b      	lsls	r3, r3, #2
 8001f44:	440b      	add	r3, r1
 8001f46:	0099      	lsls	r1, r3, #2
 8001f48:	440b      	add	r3, r1
 8001f4a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f4e:	3301      	adds	r3, #1
 8001f50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	bf0c      	ite	eq
 8001f58:	2301      	moveq	r3, #1
 8001f5a:	2300      	movne	r3, #0
 8001f5c:	b2db      	uxtb	r3, r3
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d001      	beq.n	8001f66 <HAL_I2C_Init+0x196>
 8001f62:	2301      	movs	r3, #1
 8001f64:	e022      	b.n	8001fac <HAL_I2C_Init+0x1dc>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	689b      	ldr	r3, [r3, #8]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d10e      	bne.n	8001f8c <HAL_I2C_Init+0x1bc>
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	1e58      	subs	r0, r3, #1
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6859      	ldr	r1, [r3, #4]
 8001f76:	460b      	mov	r3, r1
 8001f78:	005b      	lsls	r3, r3, #1
 8001f7a:	440b      	add	r3, r1
 8001f7c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f80:	3301      	adds	r3, #1
 8001f82:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f8a:	e00f      	b.n	8001fac <HAL_I2C_Init+0x1dc>
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	1e58      	subs	r0, r3, #1
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6859      	ldr	r1, [r3, #4]
 8001f94:	460b      	mov	r3, r1
 8001f96:	009b      	lsls	r3, r3, #2
 8001f98:	440b      	add	r3, r1
 8001f9a:	0099      	lsls	r1, r3, #2
 8001f9c:	440b      	add	r3, r1
 8001f9e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001fa2:	3301      	adds	r3, #1
 8001fa4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fa8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001fac:	6879      	ldr	r1, [r7, #4]
 8001fae:	6809      	ldr	r1, [r1, #0]
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	69da      	ldr	r2, [r3, #28]
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6a1b      	ldr	r3, [r3, #32]
 8001fc6:	431a      	orrs	r2, r3
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	430a      	orrs	r2, r1
 8001fce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	689b      	ldr	r3, [r3, #8]
 8001fd6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001fda:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001fde:	687a      	ldr	r2, [r7, #4]
 8001fe0:	6911      	ldr	r1, [r2, #16]
 8001fe2:	687a      	ldr	r2, [r7, #4]
 8001fe4:	68d2      	ldr	r2, [r2, #12]
 8001fe6:	4311      	orrs	r1, r2
 8001fe8:	687a      	ldr	r2, [r7, #4]
 8001fea:	6812      	ldr	r2, [r2, #0]
 8001fec:	430b      	orrs	r3, r1
 8001fee:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	68db      	ldr	r3, [r3, #12]
 8001ff6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	695a      	ldr	r2, [r3, #20]
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	699b      	ldr	r3, [r3, #24]
 8002002:	431a      	orrs	r2, r3
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	430a      	orrs	r2, r1
 800200a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	681a      	ldr	r2, [r3, #0]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f042 0201 	orr.w	r2, r2, #1
 800201a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2200      	movs	r2, #0
 8002020:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2220      	movs	r2, #32
 8002026:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2200      	movs	r2, #0
 800202e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2200      	movs	r2, #0
 8002034:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002038:	2300      	movs	r3, #0
}
 800203a:	4618      	mov	r0, r3
 800203c:	3710      	adds	r7, #16
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	000186a0 	.word	0x000186a0
 8002048:	001e847f 	.word	0x001e847f
 800204c:	003d08ff 	.word	0x003d08ff
 8002050:	431bde83 	.word	0x431bde83
 8002054:	10624dd3 	.word	0x10624dd3

08002058 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b088      	sub	sp, #32
 800205c:	af02      	add	r7, sp, #8
 800205e:	60f8      	str	r0, [r7, #12]
 8002060:	4608      	mov	r0, r1
 8002062:	4611      	mov	r1, r2
 8002064:	461a      	mov	r2, r3
 8002066:	4603      	mov	r3, r0
 8002068:	817b      	strh	r3, [r7, #10]
 800206a:	460b      	mov	r3, r1
 800206c:	813b      	strh	r3, [r7, #8]
 800206e:	4613      	mov	r3, r2
 8002070:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002072:	f7ff fb61 	bl	8001738 <HAL_GetTick>
 8002076:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800207e:	b2db      	uxtb	r3, r3
 8002080:	2b20      	cmp	r3, #32
 8002082:	f040 80d9 	bne.w	8002238 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	9300      	str	r3, [sp, #0]
 800208a:	2319      	movs	r3, #25
 800208c:	2201      	movs	r2, #1
 800208e:	496d      	ldr	r1, [pc, #436]	; (8002244 <HAL_I2C_Mem_Write+0x1ec>)
 8002090:	68f8      	ldr	r0, [r7, #12]
 8002092:	f000 f96f 	bl	8002374 <I2C_WaitOnFlagUntilTimeout>
 8002096:	4603      	mov	r3, r0
 8002098:	2b00      	cmp	r3, #0
 800209a:	d001      	beq.n	80020a0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800209c:	2302      	movs	r3, #2
 800209e:	e0cc      	b.n	800223a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020a6:	2b01      	cmp	r3, #1
 80020a8:	d101      	bne.n	80020ae <HAL_I2C_Mem_Write+0x56>
 80020aa:	2302      	movs	r3, #2
 80020ac:	e0c5      	b.n	800223a <HAL_I2C_Mem_Write+0x1e2>
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	2201      	movs	r2, #1
 80020b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f003 0301 	and.w	r3, r3, #1
 80020c0:	2b01      	cmp	r3, #1
 80020c2:	d007      	beq.n	80020d4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	681a      	ldr	r2, [r3, #0]
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f042 0201 	orr.w	r2, r2, #1
 80020d2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	681a      	ldr	r2, [r3, #0]
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80020e2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	2221      	movs	r2, #33	; 0x21
 80020e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	2240      	movs	r2, #64	; 0x40
 80020f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	2200      	movs	r2, #0
 80020f8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	6a3a      	ldr	r2, [r7, #32]
 80020fe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002104:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800210a:	b29a      	uxth	r2, r3
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	4a4d      	ldr	r2, [pc, #308]	; (8002248 <HAL_I2C_Mem_Write+0x1f0>)
 8002114:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002116:	88f8      	ldrh	r0, [r7, #6]
 8002118:	893a      	ldrh	r2, [r7, #8]
 800211a:	8979      	ldrh	r1, [r7, #10]
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	9301      	str	r3, [sp, #4]
 8002120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002122:	9300      	str	r3, [sp, #0]
 8002124:	4603      	mov	r3, r0
 8002126:	68f8      	ldr	r0, [r7, #12]
 8002128:	f000 f890 	bl	800224c <I2C_RequestMemoryWrite>
 800212c:	4603      	mov	r3, r0
 800212e:	2b00      	cmp	r3, #0
 8002130:	d052      	beq.n	80021d8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002132:	2301      	movs	r3, #1
 8002134:	e081      	b.n	800223a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002136:	697a      	ldr	r2, [r7, #20]
 8002138:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800213a:	68f8      	ldr	r0, [r7, #12]
 800213c:	f000 f9f0 	bl	8002520 <I2C_WaitOnTXEFlagUntilTimeout>
 8002140:	4603      	mov	r3, r0
 8002142:	2b00      	cmp	r3, #0
 8002144:	d00d      	beq.n	8002162 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800214a:	2b04      	cmp	r3, #4
 800214c:	d107      	bne.n	800215e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	681a      	ldr	r2, [r3, #0]
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800215c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800215e:	2301      	movs	r3, #1
 8002160:	e06b      	b.n	800223a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002166:	781a      	ldrb	r2, [r3, #0]
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002172:	1c5a      	adds	r2, r3, #1
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800217c:	3b01      	subs	r3, #1
 800217e:	b29a      	uxth	r2, r3
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002188:	b29b      	uxth	r3, r3
 800218a:	3b01      	subs	r3, #1
 800218c:	b29a      	uxth	r2, r3
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	695b      	ldr	r3, [r3, #20]
 8002198:	f003 0304 	and.w	r3, r3, #4
 800219c:	2b04      	cmp	r3, #4
 800219e:	d11b      	bne.n	80021d8 <HAL_I2C_Mem_Write+0x180>
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d017      	beq.n	80021d8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ac:	781a      	ldrb	r2, [r3, #0]
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021b8:	1c5a      	adds	r2, r3, #1
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021c2:	3b01      	subs	r3, #1
 80021c4:	b29a      	uxth	r2, r3
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021ce:	b29b      	uxth	r3, r3
 80021d0:	3b01      	subs	r3, #1
 80021d2:	b29a      	uxth	r2, r3
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d1aa      	bne.n	8002136 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021e0:	697a      	ldr	r2, [r7, #20]
 80021e2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80021e4:	68f8      	ldr	r0, [r7, #12]
 80021e6:	f000 f9dc 	bl	80025a2 <I2C_WaitOnBTFFlagUntilTimeout>
 80021ea:	4603      	mov	r3, r0
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d00d      	beq.n	800220c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f4:	2b04      	cmp	r3, #4
 80021f6:	d107      	bne.n	8002208 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	681a      	ldr	r2, [r3, #0]
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002206:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002208:	2301      	movs	r3, #1
 800220a:	e016      	b.n	800223a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800221a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	2220      	movs	r2, #32
 8002220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	2200      	movs	r2, #0
 8002228:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	2200      	movs	r2, #0
 8002230:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002234:	2300      	movs	r3, #0
 8002236:	e000      	b.n	800223a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002238:	2302      	movs	r3, #2
  }
}
 800223a:	4618      	mov	r0, r3
 800223c:	3718      	adds	r7, #24
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	00100002 	.word	0x00100002
 8002248:	ffff0000 	.word	0xffff0000

0800224c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b088      	sub	sp, #32
 8002250:	af02      	add	r7, sp, #8
 8002252:	60f8      	str	r0, [r7, #12]
 8002254:	4608      	mov	r0, r1
 8002256:	4611      	mov	r1, r2
 8002258:	461a      	mov	r2, r3
 800225a:	4603      	mov	r3, r0
 800225c:	817b      	strh	r3, [r7, #10]
 800225e:	460b      	mov	r3, r1
 8002260:	813b      	strh	r3, [r7, #8]
 8002262:	4613      	mov	r3, r2
 8002264:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	681a      	ldr	r2, [r3, #0]
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002274:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002278:	9300      	str	r3, [sp, #0]
 800227a:	6a3b      	ldr	r3, [r7, #32]
 800227c:	2200      	movs	r2, #0
 800227e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002282:	68f8      	ldr	r0, [r7, #12]
 8002284:	f000 f876 	bl	8002374 <I2C_WaitOnFlagUntilTimeout>
 8002288:	4603      	mov	r3, r0
 800228a:	2b00      	cmp	r3, #0
 800228c:	d00c      	beq.n	80022a8 <I2C_RequestMemoryWrite+0x5c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002298:	2b00      	cmp	r3, #0
 800229a:	d003      	beq.n	80022a4 <I2C_RequestMemoryWrite+0x58>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80022a2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80022a4:	2303      	movs	r3, #3
 80022a6:	e05f      	b.n	8002368 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80022a8:	897b      	ldrh	r3, [r7, #10]
 80022aa:	b2db      	uxtb	r3, r3
 80022ac:	461a      	mov	r2, r3
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80022b6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80022b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ba:	6a3a      	ldr	r2, [r7, #32]
 80022bc:	492c      	ldr	r1, [pc, #176]	; (8002370 <I2C_RequestMemoryWrite+0x124>)
 80022be:	68f8      	ldr	r0, [r7, #12]
 80022c0:	f000 f8af 	bl	8002422 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80022c4:	4603      	mov	r3, r0
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d001      	beq.n	80022ce <I2C_RequestMemoryWrite+0x82>
  {
    return HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	e04c      	b.n	8002368 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022ce:	2300      	movs	r3, #0
 80022d0:	617b      	str	r3, [r7, #20]
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	695b      	ldr	r3, [r3, #20]
 80022d8:	617b      	str	r3, [r7, #20]
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	699b      	ldr	r3, [r3, #24]
 80022e0:	617b      	str	r3, [r7, #20]
 80022e2:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80022e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022e6:	6a39      	ldr	r1, [r7, #32]
 80022e8:	68f8      	ldr	r0, [r7, #12]
 80022ea:	f000 f919 	bl	8002520 <I2C_WaitOnTXEFlagUntilTimeout>
 80022ee:	4603      	mov	r3, r0
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d00d      	beq.n	8002310 <I2C_RequestMemoryWrite+0xc4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f8:	2b04      	cmp	r3, #4
 80022fa:	d107      	bne.n	800230c <I2C_RequestMemoryWrite+0xc0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	681a      	ldr	r2, [r3, #0]
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800230a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800230c:	2301      	movs	r3, #1
 800230e:	e02b      	b.n	8002368 <I2C_RequestMemoryWrite+0x11c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002310:	88fb      	ldrh	r3, [r7, #6]
 8002312:	2b01      	cmp	r3, #1
 8002314:	d105      	bne.n	8002322 <I2C_RequestMemoryWrite+0xd6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002316:	893b      	ldrh	r3, [r7, #8]
 8002318:	b2da      	uxtb	r2, r3
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	611a      	str	r2, [r3, #16]
 8002320:	e021      	b.n	8002366 <I2C_RequestMemoryWrite+0x11a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002322:	893b      	ldrh	r3, [r7, #8]
 8002324:	0a1b      	lsrs	r3, r3, #8
 8002326:	b29b      	uxth	r3, r3
 8002328:	b2da      	uxtb	r2, r3
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002330:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002332:	6a39      	ldr	r1, [r7, #32]
 8002334:	68f8      	ldr	r0, [r7, #12]
 8002336:	f000 f8f3 	bl	8002520 <I2C_WaitOnTXEFlagUntilTimeout>
 800233a:	4603      	mov	r3, r0
 800233c:	2b00      	cmp	r3, #0
 800233e:	d00d      	beq.n	800235c <I2C_RequestMemoryWrite+0x110>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002344:	2b04      	cmp	r3, #4
 8002346:	d107      	bne.n	8002358 <I2C_RequestMemoryWrite+0x10c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	681a      	ldr	r2, [r3, #0]
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002356:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002358:	2301      	movs	r3, #1
 800235a:	e005      	b.n	8002368 <I2C_RequestMemoryWrite+0x11c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800235c:	893b      	ldrh	r3, [r7, #8]
 800235e:	b2da      	uxtb	r2, r3
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002366:	2300      	movs	r3, #0
}
 8002368:	4618      	mov	r0, r3
 800236a:	3718      	adds	r7, #24
 800236c:	46bd      	mov	sp, r7
 800236e:	bd80      	pop	{r7, pc}
 8002370:	00010002 	.word	0x00010002

08002374 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b084      	sub	sp, #16
 8002378:	af00      	add	r7, sp, #0
 800237a:	60f8      	str	r0, [r7, #12]
 800237c:	60b9      	str	r1, [r7, #8]
 800237e:	603b      	str	r3, [r7, #0]
 8002380:	4613      	mov	r3, r2
 8002382:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002384:	e025      	b.n	80023d2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	f1b3 3fff 	cmp.w	r3, #4294967295
 800238c:	d021      	beq.n	80023d2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800238e:	f7ff f9d3 	bl	8001738 <HAL_GetTick>
 8002392:	4602      	mov	r2, r0
 8002394:	69bb      	ldr	r3, [r7, #24]
 8002396:	1ad3      	subs	r3, r2, r3
 8002398:	683a      	ldr	r2, [r7, #0]
 800239a:	429a      	cmp	r2, r3
 800239c:	d302      	bcc.n	80023a4 <I2C_WaitOnFlagUntilTimeout+0x30>
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d116      	bne.n	80023d2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	2200      	movs	r2, #0
 80023a8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	2220      	movs	r2, #32
 80023ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	2200      	movs	r2, #0
 80023b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023be:	f043 0220 	orr.w	r2, r3, #32
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	2200      	movs	r2, #0
 80023ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80023ce:	2301      	movs	r3, #1
 80023d0:	e023      	b.n	800241a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80023d2:	68bb      	ldr	r3, [r7, #8]
 80023d4:	0c1b      	lsrs	r3, r3, #16
 80023d6:	b2db      	uxtb	r3, r3
 80023d8:	2b01      	cmp	r3, #1
 80023da:	d10d      	bne.n	80023f8 <I2C_WaitOnFlagUntilTimeout+0x84>
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	695b      	ldr	r3, [r3, #20]
 80023e2:	43da      	mvns	r2, r3
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	4013      	ands	r3, r2
 80023e8:	b29b      	uxth	r3, r3
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	bf0c      	ite	eq
 80023ee:	2301      	moveq	r3, #1
 80023f0:	2300      	movne	r3, #0
 80023f2:	b2db      	uxtb	r3, r3
 80023f4:	461a      	mov	r2, r3
 80023f6:	e00c      	b.n	8002412 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	699b      	ldr	r3, [r3, #24]
 80023fe:	43da      	mvns	r2, r3
 8002400:	68bb      	ldr	r3, [r7, #8]
 8002402:	4013      	ands	r3, r2
 8002404:	b29b      	uxth	r3, r3
 8002406:	2b00      	cmp	r3, #0
 8002408:	bf0c      	ite	eq
 800240a:	2301      	moveq	r3, #1
 800240c:	2300      	movne	r3, #0
 800240e:	b2db      	uxtb	r3, r3
 8002410:	461a      	mov	r2, r3
 8002412:	79fb      	ldrb	r3, [r7, #7]
 8002414:	429a      	cmp	r2, r3
 8002416:	d0b6      	beq.n	8002386 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002418:	2300      	movs	r3, #0
}
 800241a:	4618      	mov	r0, r3
 800241c:	3710      	adds	r7, #16
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}

08002422 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002422:	b580      	push	{r7, lr}
 8002424:	b084      	sub	sp, #16
 8002426:	af00      	add	r7, sp, #0
 8002428:	60f8      	str	r0, [r7, #12]
 800242a:	60b9      	str	r1, [r7, #8]
 800242c:	607a      	str	r2, [r7, #4]
 800242e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002430:	e051      	b.n	80024d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	695b      	ldr	r3, [r3, #20]
 8002438:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800243c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002440:	d123      	bne.n	800248a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	681a      	ldr	r2, [r3, #0]
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002450:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800245a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	2200      	movs	r2, #0
 8002460:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	2220      	movs	r2, #32
 8002466:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	2200      	movs	r2, #0
 800246e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002476:	f043 0204 	orr.w	r2, r3, #4
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	2200      	movs	r2, #0
 8002482:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002486:	2301      	movs	r3, #1
 8002488:	e046      	b.n	8002518 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002490:	d021      	beq.n	80024d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002492:	f7ff f951 	bl	8001738 <HAL_GetTick>
 8002496:	4602      	mov	r2, r0
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	1ad3      	subs	r3, r2, r3
 800249c:	687a      	ldr	r2, [r7, #4]
 800249e:	429a      	cmp	r2, r3
 80024a0:	d302      	bcc.n	80024a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d116      	bne.n	80024d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	2200      	movs	r2, #0
 80024ac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	2220      	movs	r2, #32
 80024b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	2200      	movs	r2, #0
 80024ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c2:	f043 0220 	orr.w	r2, r3, #32
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	2200      	movs	r2, #0
 80024ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80024d2:	2301      	movs	r3, #1
 80024d4:	e020      	b.n	8002518 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80024d6:	68bb      	ldr	r3, [r7, #8]
 80024d8:	0c1b      	lsrs	r3, r3, #16
 80024da:	b2db      	uxtb	r3, r3
 80024dc:	2b01      	cmp	r3, #1
 80024de:	d10c      	bne.n	80024fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	695b      	ldr	r3, [r3, #20]
 80024e6:	43da      	mvns	r2, r3
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	4013      	ands	r3, r2
 80024ec:	b29b      	uxth	r3, r3
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	bf14      	ite	ne
 80024f2:	2301      	movne	r3, #1
 80024f4:	2300      	moveq	r3, #0
 80024f6:	b2db      	uxtb	r3, r3
 80024f8:	e00b      	b.n	8002512 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	699b      	ldr	r3, [r3, #24]
 8002500:	43da      	mvns	r2, r3
 8002502:	68bb      	ldr	r3, [r7, #8]
 8002504:	4013      	ands	r3, r2
 8002506:	b29b      	uxth	r3, r3
 8002508:	2b00      	cmp	r3, #0
 800250a:	bf14      	ite	ne
 800250c:	2301      	movne	r3, #1
 800250e:	2300      	moveq	r3, #0
 8002510:	b2db      	uxtb	r3, r3
 8002512:	2b00      	cmp	r3, #0
 8002514:	d18d      	bne.n	8002432 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002516:	2300      	movs	r3, #0
}
 8002518:	4618      	mov	r0, r3
 800251a:	3710      	adds	r7, #16
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}

08002520 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b084      	sub	sp, #16
 8002524:	af00      	add	r7, sp, #0
 8002526:	60f8      	str	r0, [r7, #12]
 8002528:	60b9      	str	r1, [r7, #8]
 800252a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800252c:	e02d      	b.n	800258a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800252e:	68f8      	ldr	r0, [r7, #12]
 8002530:	f000 f878 	bl	8002624 <I2C_IsAcknowledgeFailed>
 8002534:	4603      	mov	r3, r0
 8002536:	2b00      	cmp	r3, #0
 8002538:	d001      	beq.n	800253e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	e02d      	b.n	800259a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800253e:	68bb      	ldr	r3, [r7, #8]
 8002540:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002544:	d021      	beq.n	800258a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002546:	f7ff f8f7 	bl	8001738 <HAL_GetTick>
 800254a:	4602      	mov	r2, r0
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	1ad3      	subs	r3, r2, r3
 8002550:	68ba      	ldr	r2, [r7, #8]
 8002552:	429a      	cmp	r2, r3
 8002554:	d302      	bcc.n	800255c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002556:	68bb      	ldr	r3, [r7, #8]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d116      	bne.n	800258a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	2200      	movs	r2, #0
 8002560:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	2220      	movs	r2, #32
 8002566:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	2200      	movs	r2, #0
 800256e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002576:	f043 0220 	orr.w	r2, r3, #32
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	2200      	movs	r2, #0
 8002582:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002586:	2301      	movs	r3, #1
 8002588:	e007      	b.n	800259a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	695b      	ldr	r3, [r3, #20]
 8002590:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002594:	2b80      	cmp	r3, #128	; 0x80
 8002596:	d1ca      	bne.n	800252e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002598:	2300      	movs	r3, #0
}
 800259a:	4618      	mov	r0, r3
 800259c:	3710      	adds	r7, #16
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}

080025a2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80025a2:	b580      	push	{r7, lr}
 80025a4:	b084      	sub	sp, #16
 80025a6:	af00      	add	r7, sp, #0
 80025a8:	60f8      	str	r0, [r7, #12]
 80025aa:	60b9      	str	r1, [r7, #8]
 80025ac:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80025ae:	e02d      	b.n	800260c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80025b0:	68f8      	ldr	r0, [r7, #12]
 80025b2:	f000 f837 	bl	8002624 <I2C_IsAcknowledgeFailed>
 80025b6:	4603      	mov	r3, r0
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d001      	beq.n	80025c0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80025bc:	2301      	movs	r3, #1
 80025be:	e02d      	b.n	800261c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025c6:	d021      	beq.n	800260c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025c8:	f7ff f8b6 	bl	8001738 <HAL_GetTick>
 80025cc:	4602      	mov	r2, r0
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	1ad3      	subs	r3, r2, r3
 80025d2:	68ba      	ldr	r2, [r7, #8]
 80025d4:	429a      	cmp	r2, r3
 80025d6:	d302      	bcc.n	80025de <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d116      	bne.n	800260c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	2200      	movs	r2, #0
 80025e2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	2220      	movs	r2, #32
 80025e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	2200      	movs	r2, #0
 80025f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f8:	f043 0220 	orr.w	r2, r3, #32
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	2200      	movs	r2, #0
 8002604:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002608:	2301      	movs	r3, #1
 800260a:	e007      	b.n	800261c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	695b      	ldr	r3, [r3, #20]
 8002612:	f003 0304 	and.w	r3, r3, #4
 8002616:	2b04      	cmp	r3, #4
 8002618:	d1ca      	bne.n	80025b0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800261a:	2300      	movs	r3, #0
}
 800261c:	4618      	mov	r0, r3
 800261e:	3710      	adds	r7, #16
 8002620:	46bd      	mov	sp, r7
 8002622:	bd80      	pop	{r7, pc}

08002624 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002624:	b480      	push	{r7}
 8002626:	b083      	sub	sp, #12
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	695b      	ldr	r3, [r3, #20]
 8002632:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002636:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800263a:	d11b      	bne.n	8002674 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002644:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2200      	movs	r2, #0
 800264a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2220      	movs	r2, #32
 8002650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2200      	movs	r2, #0
 8002658:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002660:	f043 0204 	orr.w	r2, r3, #4
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2200      	movs	r2, #0
 800266c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002670:	2301      	movs	r3, #1
 8002672:	e000      	b.n	8002676 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002674:	2300      	movs	r3, #0
}
 8002676:	4618      	mov	r0, r3
 8002678:	370c      	adds	r7, #12
 800267a:	46bd      	mov	sp, r7
 800267c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002680:	4770      	bx	lr
	...

08002684 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b086      	sub	sp, #24
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d101      	bne.n	8002696 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002692:	2301      	movs	r3, #1
 8002694:	e25e      	b.n	8002b54 <HAL_RCC_OscConfig+0x4d0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f003 0301 	and.w	r3, r3, #1
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d075      	beq.n	800278e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80026a2:	4b88      	ldr	r3, [pc, #544]	; (80028c4 <HAL_RCC_OscConfig+0x240>)
 80026a4:	689b      	ldr	r3, [r3, #8]
 80026a6:	f003 030c 	and.w	r3, r3, #12
 80026aa:	2b04      	cmp	r3, #4
 80026ac:	d00c      	beq.n	80026c8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026ae:	4b85      	ldr	r3, [pc, #532]	; (80028c4 <HAL_RCC_OscConfig+0x240>)
 80026b0:	689b      	ldr	r3, [r3, #8]
 80026b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80026b6:	2b08      	cmp	r3, #8
 80026b8:	d112      	bne.n	80026e0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026ba:	4b82      	ldr	r3, [pc, #520]	; (80028c4 <HAL_RCC_OscConfig+0x240>)
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80026c6:	d10b      	bne.n	80026e0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026c8:	4b7e      	ldr	r3, [pc, #504]	; (80028c4 <HAL_RCC_OscConfig+0x240>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d05b      	beq.n	800278c <HAL_RCC_OscConfig+0x108>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d157      	bne.n	800278c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80026dc:	2301      	movs	r3, #1
 80026de:	e239      	b.n	8002b54 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026e8:	d106      	bne.n	80026f8 <HAL_RCC_OscConfig+0x74>
 80026ea:	4b76      	ldr	r3, [pc, #472]	; (80028c4 <HAL_RCC_OscConfig+0x240>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a75      	ldr	r2, [pc, #468]	; (80028c4 <HAL_RCC_OscConfig+0x240>)
 80026f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026f4:	6013      	str	r3, [r2, #0]
 80026f6:	e01d      	b.n	8002734 <HAL_RCC_OscConfig+0xb0>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002700:	d10c      	bne.n	800271c <HAL_RCC_OscConfig+0x98>
 8002702:	4b70      	ldr	r3, [pc, #448]	; (80028c4 <HAL_RCC_OscConfig+0x240>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a6f      	ldr	r2, [pc, #444]	; (80028c4 <HAL_RCC_OscConfig+0x240>)
 8002708:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800270c:	6013      	str	r3, [r2, #0]
 800270e:	4b6d      	ldr	r3, [pc, #436]	; (80028c4 <HAL_RCC_OscConfig+0x240>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a6c      	ldr	r2, [pc, #432]	; (80028c4 <HAL_RCC_OscConfig+0x240>)
 8002714:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002718:	6013      	str	r3, [r2, #0]
 800271a:	e00b      	b.n	8002734 <HAL_RCC_OscConfig+0xb0>
 800271c:	4b69      	ldr	r3, [pc, #420]	; (80028c4 <HAL_RCC_OscConfig+0x240>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a68      	ldr	r2, [pc, #416]	; (80028c4 <HAL_RCC_OscConfig+0x240>)
 8002722:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002726:	6013      	str	r3, [r2, #0]
 8002728:	4b66      	ldr	r3, [pc, #408]	; (80028c4 <HAL_RCC_OscConfig+0x240>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a65      	ldr	r2, [pc, #404]	; (80028c4 <HAL_RCC_OscConfig+0x240>)
 800272e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002732:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d013      	beq.n	8002764 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800273c:	f7fe fffc 	bl	8001738 <HAL_GetTick>
 8002740:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002742:	e008      	b.n	8002756 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002744:	f7fe fff8 	bl	8001738 <HAL_GetTick>
 8002748:	4602      	mov	r2, r0
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	1ad3      	subs	r3, r2, r3
 800274e:	2b64      	cmp	r3, #100	; 0x64
 8002750:	d901      	bls.n	8002756 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002752:	2303      	movs	r3, #3
 8002754:	e1fe      	b.n	8002b54 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002756:	4b5b      	ldr	r3, [pc, #364]	; (80028c4 <HAL_RCC_OscConfig+0x240>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800275e:	2b00      	cmp	r3, #0
 8002760:	d0f0      	beq.n	8002744 <HAL_RCC_OscConfig+0xc0>
 8002762:	e014      	b.n	800278e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002764:	f7fe ffe8 	bl	8001738 <HAL_GetTick>
 8002768:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800276a:	e008      	b.n	800277e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800276c:	f7fe ffe4 	bl	8001738 <HAL_GetTick>
 8002770:	4602      	mov	r2, r0
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	1ad3      	subs	r3, r2, r3
 8002776:	2b64      	cmp	r3, #100	; 0x64
 8002778:	d901      	bls.n	800277e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800277a:	2303      	movs	r3, #3
 800277c:	e1ea      	b.n	8002b54 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800277e:	4b51      	ldr	r3, [pc, #324]	; (80028c4 <HAL_RCC_OscConfig+0x240>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002786:	2b00      	cmp	r3, #0
 8002788:	d1f0      	bne.n	800276c <HAL_RCC_OscConfig+0xe8>
 800278a:	e000      	b.n	800278e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800278c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f003 0302 	and.w	r3, r3, #2
 8002796:	2b00      	cmp	r3, #0
 8002798:	d063      	beq.n	8002862 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800279a:	4b4a      	ldr	r3, [pc, #296]	; (80028c4 <HAL_RCC_OscConfig+0x240>)
 800279c:	689b      	ldr	r3, [r3, #8]
 800279e:	f003 030c 	and.w	r3, r3, #12
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d00b      	beq.n	80027be <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027a6:	4b47      	ldr	r3, [pc, #284]	; (80028c4 <HAL_RCC_OscConfig+0x240>)
 80027a8:	689b      	ldr	r3, [r3, #8]
 80027aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80027ae:	2b08      	cmp	r3, #8
 80027b0:	d11c      	bne.n	80027ec <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027b2:	4b44      	ldr	r3, [pc, #272]	; (80028c4 <HAL_RCC_OscConfig+0x240>)
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d116      	bne.n	80027ec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027be:	4b41      	ldr	r3, [pc, #260]	; (80028c4 <HAL_RCC_OscConfig+0x240>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f003 0302 	and.w	r3, r3, #2
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d005      	beq.n	80027d6 <HAL_RCC_OscConfig+0x152>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	68db      	ldr	r3, [r3, #12]
 80027ce:	2b01      	cmp	r3, #1
 80027d0:	d001      	beq.n	80027d6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	e1be      	b.n	8002b54 <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027d6:	4b3b      	ldr	r3, [pc, #236]	; (80028c4 <HAL_RCC_OscConfig+0x240>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	691b      	ldr	r3, [r3, #16]
 80027e2:	00db      	lsls	r3, r3, #3
 80027e4:	4937      	ldr	r1, [pc, #220]	; (80028c4 <HAL_RCC_OscConfig+0x240>)
 80027e6:	4313      	orrs	r3, r2
 80027e8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027ea:	e03a      	b.n	8002862 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	68db      	ldr	r3, [r3, #12]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d020      	beq.n	8002836 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027f4:	4b34      	ldr	r3, [pc, #208]	; (80028c8 <HAL_RCC_OscConfig+0x244>)
 80027f6:	2201      	movs	r2, #1
 80027f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027fa:	f7fe ff9d 	bl	8001738 <HAL_GetTick>
 80027fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002800:	e008      	b.n	8002814 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002802:	f7fe ff99 	bl	8001738 <HAL_GetTick>
 8002806:	4602      	mov	r2, r0
 8002808:	693b      	ldr	r3, [r7, #16]
 800280a:	1ad3      	subs	r3, r2, r3
 800280c:	2b02      	cmp	r3, #2
 800280e:	d901      	bls.n	8002814 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002810:	2303      	movs	r3, #3
 8002812:	e19f      	b.n	8002b54 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002814:	4b2b      	ldr	r3, [pc, #172]	; (80028c4 <HAL_RCC_OscConfig+0x240>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f003 0302 	and.w	r3, r3, #2
 800281c:	2b00      	cmp	r3, #0
 800281e:	d0f0      	beq.n	8002802 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002820:	4b28      	ldr	r3, [pc, #160]	; (80028c4 <HAL_RCC_OscConfig+0x240>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	691b      	ldr	r3, [r3, #16]
 800282c:	00db      	lsls	r3, r3, #3
 800282e:	4925      	ldr	r1, [pc, #148]	; (80028c4 <HAL_RCC_OscConfig+0x240>)
 8002830:	4313      	orrs	r3, r2
 8002832:	600b      	str	r3, [r1, #0]
 8002834:	e015      	b.n	8002862 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002836:	4b24      	ldr	r3, [pc, #144]	; (80028c8 <HAL_RCC_OscConfig+0x244>)
 8002838:	2200      	movs	r2, #0
 800283a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800283c:	f7fe ff7c 	bl	8001738 <HAL_GetTick>
 8002840:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002842:	e008      	b.n	8002856 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002844:	f7fe ff78 	bl	8001738 <HAL_GetTick>
 8002848:	4602      	mov	r2, r0
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	1ad3      	subs	r3, r2, r3
 800284e:	2b02      	cmp	r3, #2
 8002850:	d901      	bls.n	8002856 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002852:	2303      	movs	r3, #3
 8002854:	e17e      	b.n	8002b54 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002856:	4b1b      	ldr	r3, [pc, #108]	; (80028c4 <HAL_RCC_OscConfig+0x240>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f003 0302 	and.w	r3, r3, #2
 800285e:	2b00      	cmp	r3, #0
 8002860:	d1f0      	bne.n	8002844 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f003 0308 	and.w	r3, r3, #8
 800286a:	2b00      	cmp	r3, #0
 800286c:	d036      	beq.n	80028dc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	695b      	ldr	r3, [r3, #20]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d016      	beq.n	80028a4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002876:	4b15      	ldr	r3, [pc, #84]	; (80028cc <HAL_RCC_OscConfig+0x248>)
 8002878:	2201      	movs	r2, #1
 800287a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800287c:	f7fe ff5c 	bl	8001738 <HAL_GetTick>
 8002880:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002882:	e008      	b.n	8002896 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002884:	f7fe ff58 	bl	8001738 <HAL_GetTick>
 8002888:	4602      	mov	r2, r0
 800288a:	693b      	ldr	r3, [r7, #16]
 800288c:	1ad3      	subs	r3, r2, r3
 800288e:	2b02      	cmp	r3, #2
 8002890:	d901      	bls.n	8002896 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002892:	2303      	movs	r3, #3
 8002894:	e15e      	b.n	8002b54 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002896:	4b0b      	ldr	r3, [pc, #44]	; (80028c4 <HAL_RCC_OscConfig+0x240>)
 8002898:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800289a:	f003 0302 	and.w	r3, r3, #2
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d0f0      	beq.n	8002884 <HAL_RCC_OscConfig+0x200>
 80028a2:	e01b      	b.n	80028dc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028a4:	4b09      	ldr	r3, [pc, #36]	; (80028cc <HAL_RCC_OscConfig+0x248>)
 80028a6:	2200      	movs	r2, #0
 80028a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028aa:	f7fe ff45 	bl	8001738 <HAL_GetTick>
 80028ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028b0:	e00e      	b.n	80028d0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028b2:	f7fe ff41 	bl	8001738 <HAL_GetTick>
 80028b6:	4602      	mov	r2, r0
 80028b8:	693b      	ldr	r3, [r7, #16]
 80028ba:	1ad3      	subs	r3, r2, r3
 80028bc:	2b02      	cmp	r3, #2
 80028be:	d907      	bls.n	80028d0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80028c0:	2303      	movs	r3, #3
 80028c2:	e147      	b.n	8002b54 <HAL_RCC_OscConfig+0x4d0>
 80028c4:	40023800 	.word	0x40023800
 80028c8:	42470000 	.word	0x42470000
 80028cc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028d0:	4b88      	ldr	r3, [pc, #544]	; (8002af4 <HAL_RCC_OscConfig+0x470>)
 80028d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028d4:	f003 0302 	and.w	r3, r3, #2
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d1ea      	bne.n	80028b2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f003 0304 	and.w	r3, r3, #4
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	f000 8097 	beq.w	8002a18 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028ea:	2300      	movs	r3, #0
 80028ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028ee:	4b81      	ldr	r3, [pc, #516]	; (8002af4 <HAL_RCC_OscConfig+0x470>)
 80028f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d10f      	bne.n	800291a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028fa:	2300      	movs	r3, #0
 80028fc:	60bb      	str	r3, [r7, #8]
 80028fe:	4b7d      	ldr	r3, [pc, #500]	; (8002af4 <HAL_RCC_OscConfig+0x470>)
 8002900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002902:	4a7c      	ldr	r2, [pc, #496]	; (8002af4 <HAL_RCC_OscConfig+0x470>)
 8002904:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002908:	6413      	str	r3, [r2, #64]	; 0x40
 800290a:	4b7a      	ldr	r3, [pc, #488]	; (8002af4 <HAL_RCC_OscConfig+0x470>)
 800290c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800290e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002912:	60bb      	str	r3, [r7, #8]
 8002914:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002916:	2301      	movs	r3, #1
 8002918:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800291a:	4b77      	ldr	r3, [pc, #476]	; (8002af8 <HAL_RCC_OscConfig+0x474>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002922:	2b00      	cmp	r3, #0
 8002924:	d118      	bne.n	8002958 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002926:	4b74      	ldr	r3, [pc, #464]	; (8002af8 <HAL_RCC_OscConfig+0x474>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a73      	ldr	r2, [pc, #460]	; (8002af8 <HAL_RCC_OscConfig+0x474>)
 800292c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002930:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002932:	f7fe ff01 	bl	8001738 <HAL_GetTick>
 8002936:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002938:	e008      	b.n	800294c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800293a:	f7fe fefd 	bl	8001738 <HAL_GetTick>
 800293e:	4602      	mov	r2, r0
 8002940:	693b      	ldr	r3, [r7, #16]
 8002942:	1ad3      	subs	r3, r2, r3
 8002944:	2b02      	cmp	r3, #2
 8002946:	d901      	bls.n	800294c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002948:	2303      	movs	r3, #3
 800294a:	e103      	b.n	8002b54 <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800294c:	4b6a      	ldr	r3, [pc, #424]	; (8002af8 <HAL_RCC_OscConfig+0x474>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002954:	2b00      	cmp	r3, #0
 8002956:	d0f0      	beq.n	800293a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	689b      	ldr	r3, [r3, #8]
 800295c:	2b01      	cmp	r3, #1
 800295e:	d106      	bne.n	800296e <HAL_RCC_OscConfig+0x2ea>
 8002960:	4b64      	ldr	r3, [pc, #400]	; (8002af4 <HAL_RCC_OscConfig+0x470>)
 8002962:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002964:	4a63      	ldr	r2, [pc, #396]	; (8002af4 <HAL_RCC_OscConfig+0x470>)
 8002966:	f043 0301 	orr.w	r3, r3, #1
 800296a:	6713      	str	r3, [r2, #112]	; 0x70
 800296c:	e01c      	b.n	80029a8 <HAL_RCC_OscConfig+0x324>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	689b      	ldr	r3, [r3, #8]
 8002972:	2b05      	cmp	r3, #5
 8002974:	d10c      	bne.n	8002990 <HAL_RCC_OscConfig+0x30c>
 8002976:	4b5f      	ldr	r3, [pc, #380]	; (8002af4 <HAL_RCC_OscConfig+0x470>)
 8002978:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800297a:	4a5e      	ldr	r2, [pc, #376]	; (8002af4 <HAL_RCC_OscConfig+0x470>)
 800297c:	f043 0304 	orr.w	r3, r3, #4
 8002980:	6713      	str	r3, [r2, #112]	; 0x70
 8002982:	4b5c      	ldr	r3, [pc, #368]	; (8002af4 <HAL_RCC_OscConfig+0x470>)
 8002984:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002986:	4a5b      	ldr	r2, [pc, #364]	; (8002af4 <HAL_RCC_OscConfig+0x470>)
 8002988:	f043 0301 	orr.w	r3, r3, #1
 800298c:	6713      	str	r3, [r2, #112]	; 0x70
 800298e:	e00b      	b.n	80029a8 <HAL_RCC_OscConfig+0x324>
 8002990:	4b58      	ldr	r3, [pc, #352]	; (8002af4 <HAL_RCC_OscConfig+0x470>)
 8002992:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002994:	4a57      	ldr	r2, [pc, #348]	; (8002af4 <HAL_RCC_OscConfig+0x470>)
 8002996:	f023 0301 	bic.w	r3, r3, #1
 800299a:	6713      	str	r3, [r2, #112]	; 0x70
 800299c:	4b55      	ldr	r3, [pc, #340]	; (8002af4 <HAL_RCC_OscConfig+0x470>)
 800299e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029a0:	4a54      	ldr	r2, [pc, #336]	; (8002af4 <HAL_RCC_OscConfig+0x470>)
 80029a2:	f023 0304 	bic.w	r3, r3, #4
 80029a6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	689b      	ldr	r3, [r3, #8]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d015      	beq.n	80029dc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029b0:	f7fe fec2 	bl	8001738 <HAL_GetTick>
 80029b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029b6:	e00a      	b.n	80029ce <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029b8:	f7fe febe 	bl	8001738 <HAL_GetTick>
 80029bc:	4602      	mov	r2, r0
 80029be:	693b      	ldr	r3, [r7, #16]
 80029c0:	1ad3      	subs	r3, r2, r3
 80029c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d901      	bls.n	80029ce <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80029ca:	2303      	movs	r3, #3
 80029cc:	e0c2      	b.n	8002b54 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029ce:	4b49      	ldr	r3, [pc, #292]	; (8002af4 <HAL_RCC_OscConfig+0x470>)
 80029d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029d2:	f003 0302 	and.w	r3, r3, #2
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d0ee      	beq.n	80029b8 <HAL_RCC_OscConfig+0x334>
 80029da:	e014      	b.n	8002a06 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029dc:	f7fe feac 	bl	8001738 <HAL_GetTick>
 80029e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029e2:	e00a      	b.n	80029fa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029e4:	f7fe fea8 	bl	8001738 <HAL_GetTick>
 80029e8:	4602      	mov	r2, r0
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	1ad3      	subs	r3, r2, r3
 80029ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d901      	bls.n	80029fa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80029f6:	2303      	movs	r3, #3
 80029f8:	e0ac      	b.n	8002b54 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029fa:	4b3e      	ldr	r3, [pc, #248]	; (8002af4 <HAL_RCC_OscConfig+0x470>)
 80029fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029fe:	f003 0302 	and.w	r3, r3, #2
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d1ee      	bne.n	80029e4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a06:	7dfb      	ldrb	r3, [r7, #23]
 8002a08:	2b01      	cmp	r3, #1
 8002a0a:	d105      	bne.n	8002a18 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a0c:	4b39      	ldr	r3, [pc, #228]	; (8002af4 <HAL_RCC_OscConfig+0x470>)
 8002a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a10:	4a38      	ldr	r2, [pc, #224]	; (8002af4 <HAL_RCC_OscConfig+0x470>)
 8002a12:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a16:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	699b      	ldr	r3, [r3, #24]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	f000 8098 	beq.w	8002b52 <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002a22:	4b34      	ldr	r3, [pc, #208]	; (8002af4 <HAL_RCC_OscConfig+0x470>)
 8002a24:	689b      	ldr	r3, [r3, #8]
 8002a26:	f003 030c 	and.w	r3, r3, #12
 8002a2a:	2b08      	cmp	r3, #8
 8002a2c:	d05c      	beq.n	8002ae8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	699b      	ldr	r3, [r3, #24]
 8002a32:	2b02      	cmp	r3, #2
 8002a34:	d141      	bne.n	8002aba <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a36:	4b31      	ldr	r3, [pc, #196]	; (8002afc <HAL_RCC_OscConfig+0x478>)
 8002a38:	2200      	movs	r2, #0
 8002a3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a3c:	f7fe fe7c 	bl	8001738 <HAL_GetTick>
 8002a40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a42:	e008      	b.n	8002a56 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a44:	f7fe fe78 	bl	8001738 <HAL_GetTick>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	693b      	ldr	r3, [r7, #16]
 8002a4c:	1ad3      	subs	r3, r2, r3
 8002a4e:	2b02      	cmp	r3, #2
 8002a50:	d901      	bls.n	8002a56 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002a52:	2303      	movs	r3, #3
 8002a54:	e07e      	b.n	8002b54 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a56:	4b27      	ldr	r3, [pc, #156]	; (8002af4 <HAL_RCC_OscConfig+0x470>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d1f0      	bne.n	8002a44 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	69da      	ldr	r2, [r3, #28]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6a1b      	ldr	r3, [r3, #32]
 8002a6a:	431a      	orrs	r2, r3
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a70:	019b      	lsls	r3, r3, #6
 8002a72:	431a      	orrs	r2, r3
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a78:	085b      	lsrs	r3, r3, #1
 8002a7a:	3b01      	subs	r3, #1
 8002a7c:	041b      	lsls	r3, r3, #16
 8002a7e:	431a      	orrs	r2, r3
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a84:	061b      	lsls	r3, r3, #24
 8002a86:	491b      	ldr	r1, [pc, #108]	; (8002af4 <HAL_RCC_OscConfig+0x470>)
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a8c:	4b1b      	ldr	r3, [pc, #108]	; (8002afc <HAL_RCC_OscConfig+0x478>)
 8002a8e:	2201      	movs	r2, #1
 8002a90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a92:	f7fe fe51 	bl	8001738 <HAL_GetTick>
 8002a96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a98:	e008      	b.n	8002aac <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a9a:	f7fe fe4d 	bl	8001738 <HAL_GetTick>
 8002a9e:	4602      	mov	r2, r0
 8002aa0:	693b      	ldr	r3, [r7, #16]
 8002aa2:	1ad3      	subs	r3, r2, r3
 8002aa4:	2b02      	cmp	r3, #2
 8002aa6:	d901      	bls.n	8002aac <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002aa8:	2303      	movs	r3, #3
 8002aaa:	e053      	b.n	8002b54 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002aac:	4b11      	ldr	r3, [pc, #68]	; (8002af4 <HAL_RCC_OscConfig+0x470>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d0f0      	beq.n	8002a9a <HAL_RCC_OscConfig+0x416>
 8002ab8:	e04b      	b.n	8002b52 <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002aba:	4b10      	ldr	r3, [pc, #64]	; (8002afc <HAL_RCC_OscConfig+0x478>)
 8002abc:	2200      	movs	r2, #0
 8002abe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ac0:	f7fe fe3a 	bl	8001738 <HAL_GetTick>
 8002ac4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ac6:	e008      	b.n	8002ada <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ac8:	f7fe fe36 	bl	8001738 <HAL_GetTick>
 8002acc:	4602      	mov	r2, r0
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	1ad3      	subs	r3, r2, r3
 8002ad2:	2b02      	cmp	r3, #2
 8002ad4:	d901      	bls.n	8002ada <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002ad6:	2303      	movs	r3, #3
 8002ad8:	e03c      	b.n	8002b54 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ada:	4b06      	ldr	r3, [pc, #24]	; (8002af4 <HAL_RCC_OscConfig+0x470>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d1f0      	bne.n	8002ac8 <HAL_RCC_OscConfig+0x444>
 8002ae6:	e034      	b.n	8002b52 <HAL_RCC_OscConfig+0x4ce>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	699b      	ldr	r3, [r3, #24]
 8002aec:	2b01      	cmp	r3, #1
 8002aee:	d107      	bne.n	8002b00 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002af0:	2301      	movs	r3, #1
 8002af2:	e02f      	b.n	8002b54 <HAL_RCC_OscConfig+0x4d0>
 8002af4:	40023800 	.word	0x40023800
 8002af8:	40007000 	.word	0x40007000
 8002afc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002b00:	4b16      	ldr	r3, [pc, #88]	; (8002b5c <HAL_RCC_OscConfig+0x4d8>)
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	69db      	ldr	r3, [r3, #28]
 8002b10:	429a      	cmp	r2, r3
 8002b12:	d11c      	bne.n	8002b4e <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b1e:	429a      	cmp	r2, r3
 8002b20:	d115      	bne.n	8002b4e <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002b22:	68fa      	ldr	r2, [r7, #12]
 8002b24:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002b28:	4013      	ands	r3, r2
 8002b2a:	687a      	ldr	r2, [r7, #4]
 8002b2c:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d10d      	bne.n	8002b4e <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002b3c:	429a      	cmp	r2, r3
 8002b3e:	d106      	bne.n	8002b4e <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002b4a:	429a      	cmp	r2, r3
 8002b4c:	d001      	beq.n	8002b52 <HAL_RCC_OscConfig+0x4ce>
        {
          return HAL_ERROR;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	e000      	b.n	8002b54 <HAL_RCC_OscConfig+0x4d0>
        }
      }
    }
  }
  return HAL_OK;
 8002b52:	2300      	movs	r3, #0
}
 8002b54:	4618      	mov	r0, r3
 8002b56:	3718      	adds	r7, #24
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bd80      	pop	{r7, pc}
 8002b5c:	40023800 	.word	0x40023800

08002b60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b084      	sub	sp, #16
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
 8002b68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d101      	bne.n	8002b74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b70:	2301      	movs	r3, #1
 8002b72:	e0cc      	b.n	8002d0e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b74:	4b68      	ldr	r3, [pc, #416]	; (8002d18 <HAL_RCC_ClockConfig+0x1b8>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f003 030f 	and.w	r3, r3, #15
 8002b7c:	683a      	ldr	r2, [r7, #0]
 8002b7e:	429a      	cmp	r2, r3
 8002b80:	d90c      	bls.n	8002b9c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b82:	4b65      	ldr	r3, [pc, #404]	; (8002d18 <HAL_RCC_ClockConfig+0x1b8>)
 8002b84:	683a      	ldr	r2, [r7, #0]
 8002b86:	b2d2      	uxtb	r2, r2
 8002b88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b8a:	4b63      	ldr	r3, [pc, #396]	; (8002d18 <HAL_RCC_ClockConfig+0x1b8>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 030f 	and.w	r3, r3, #15
 8002b92:	683a      	ldr	r2, [r7, #0]
 8002b94:	429a      	cmp	r2, r3
 8002b96:	d001      	beq.n	8002b9c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	e0b8      	b.n	8002d0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f003 0302 	and.w	r3, r3, #2
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d020      	beq.n	8002bea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f003 0304 	and.w	r3, r3, #4
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d005      	beq.n	8002bc0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002bb4:	4b59      	ldr	r3, [pc, #356]	; (8002d1c <HAL_RCC_ClockConfig+0x1bc>)
 8002bb6:	689b      	ldr	r3, [r3, #8]
 8002bb8:	4a58      	ldr	r2, [pc, #352]	; (8002d1c <HAL_RCC_ClockConfig+0x1bc>)
 8002bba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002bbe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f003 0308 	and.w	r3, r3, #8
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d005      	beq.n	8002bd8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002bcc:	4b53      	ldr	r3, [pc, #332]	; (8002d1c <HAL_RCC_ClockConfig+0x1bc>)
 8002bce:	689b      	ldr	r3, [r3, #8]
 8002bd0:	4a52      	ldr	r2, [pc, #328]	; (8002d1c <HAL_RCC_ClockConfig+0x1bc>)
 8002bd2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002bd6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bd8:	4b50      	ldr	r3, [pc, #320]	; (8002d1c <HAL_RCC_ClockConfig+0x1bc>)
 8002bda:	689b      	ldr	r3, [r3, #8]
 8002bdc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	689b      	ldr	r3, [r3, #8]
 8002be4:	494d      	ldr	r1, [pc, #308]	; (8002d1c <HAL_RCC_ClockConfig+0x1bc>)
 8002be6:	4313      	orrs	r3, r2
 8002be8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f003 0301 	and.w	r3, r3, #1
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d044      	beq.n	8002c80 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	2b01      	cmp	r3, #1
 8002bfc:	d107      	bne.n	8002c0e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bfe:	4b47      	ldr	r3, [pc, #284]	; (8002d1c <HAL_RCC_ClockConfig+0x1bc>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d119      	bne.n	8002c3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	e07f      	b.n	8002d0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	2b02      	cmp	r3, #2
 8002c14:	d003      	beq.n	8002c1e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c1a:	2b03      	cmp	r3, #3
 8002c1c:	d107      	bne.n	8002c2e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c1e:	4b3f      	ldr	r3, [pc, #252]	; (8002d1c <HAL_RCC_ClockConfig+0x1bc>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d109      	bne.n	8002c3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	e06f      	b.n	8002d0e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c2e:	4b3b      	ldr	r3, [pc, #236]	; (8002d1c <HAL_RCC_ClockConfig+0x1bc>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 0302 	and.w	r3, r3, #2
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d101      	bne.n	8002c3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	e067      	b.n	8002d0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c3e:	4b37      	ldr	r3, [pc, #220]	; (8002d1c <HAL_RCC_ClockConfig+0x1bc>)
 8002c40:	689b      	ldr	r3, [r3, #8]
 8002c42:	f023 0203 	bic.w	r2, r3, #3
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	4934      	ldr	r1, [pc, #208]	; (8002d1c <HAL_RCC_ClockConfig+0x1bc>)
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c50:	f7fe fd72 	bl	8001738 <HAL_GetTick>
 8002c54:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c56:	e00a      	b.n	8002c6e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c58:	f7fe fd6e 	bl	8001738 <HAL_GetTick>
 8002c5c:	4602      	mov	r2, r0
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	1ad3      	subs	r3, r2, r3
 8002c62:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d901      	bls.n	8002c6e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c6a:	2303      	movs	r3, #3
 8002c6c:	e04f      	b.n	8002d0e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c6e:	4b2b      	ldr	r3, [pc, #172]	; (8002d1c <HAL_RCC_ClockConfig+0x1bc>)
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	f003 020c 	and.w	r2, r3, #12
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	009b      	lsls	r3, r3, #2
 8002c7c:	429a      	cmp	r2, r3
 8002c7e:	d1eb      	bne.n	8002c58 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c80:	4b25      	ldr	r3, [pc, #148]	; (8002d18 <HAL_RCC_ClockConfig+0x1b8>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f003 030f 	and.w	r3, r3, #15
 8002c88:	683a      	ldr	r2, [r7, #0]
 8002c8a:	429a      	cmp	r2, r3
 8002c8c:	d20c      	bcs.n	8002ca8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c8e:	4b22      	ldr	r3, [pc, #136]	; (8002d18 <HAL_RCC_ClockConfig+0x1b8>)
 8002c90:	683a      	ldr	r2, [r7, #0]
 8002c92:	b2d2      	uxtb	r2, r2
 8002c94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c96:	4b20      	ldr	r3, [pc, #128]	; (8002d18 <HAL_RCC_ClockConfig+0x1b8>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f003 030f 	and.w	r3, r3, #15
 8002c9e:	683a      	ldr	r2, [r7, #0]
 8002ca0:	429a      	cmp	r2, r3
 8002ca2:	d001      	beq.n	8002ca8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	e032      	b.n	8002d0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f003 0304 	and.w	r3, r3, #4
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d008      	beq.n	8002cc6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002cb4:	4b19      	ldr	r3, [pc, #100]	; (8002d1c <HAL_RCC_ClockConfig+0x1bc>)
 8002cb6:	689b      	ldr	r3, [r3, #8]
 8002cb8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	68db      	ldr	r3, [r3, #12]
 8002cc0:	4916      	ldr	r1, [pc, #88]	; (8002d1c <HAL_RCC_ClockConfig+0x1bc>)
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f003 0308 	and.w	r3, r3, #8
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d009      	beq.n	8002ce6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002cd2:	4b12      	ldr	r3, [pc, #72]	; (8002d1c <HAL_RCC_ClockConfig+0x1bc>)
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	691b      	ldr	r3, [r3, #16]
 8002cde:	00db      	lsls	r3, r3, #3
 8002ce0:	490e      	ldr	r1, [pc, #56]	; (8002d1c <HAL_RCC_ClockConfig+0x1bc>)
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002ce6:	f000 f821 	bl	8002d2c <HAL_RCC_GetSysClockFreq>
 8002cea:	4602      	mov	r2, r0
 8002cec:	4b0b      	ldr	r3, [pc, #44]	; (8002d1c <HAL_RCC_ClockConfig+0x1bc>)
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	091b      	lsrs	r3, r3, #4
 8002cf2:	f003 030f 	and.w	r3, r3, #15
 8002cf6:	490a      	ldr	r1, [pc, #40]	; (8002d20 <HAL_RCC_ClockConfig+0x1c0>)
 8002cf8:	5ccb      	ldrb	r3, [r1, r3]
 8002cfa:	fa22 f303 	lsr.w	r3, r2, r3
 8002cfe:	4a09      	ldr	r2, [pc, #36]	; (8002d24 <HAL_RCC_ClockConfig+0x1c4>)
 8002d00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002d02:	4b09      	ldr	r3, [pc, #36]	; (8002d28 <HAL_RCC_ClockConfig+0x1c8>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4618      	mov	r0, r3
 8002d08:	f7fe fcd2 	bl	80016b0 <HAL_InitTick>

  return HAL_OK;
 8002d0c:	2300      	movs	r3, #0
}
 8002d0e:	4618      	mov	r0, r3
 8002d10:	3710      	adds	r7, #16
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}
 8002d16:	bf00      	nop
 8002d18:	40023c00 	.word	0x40023c00
 8002d1c:	40023800 	.word	0x40023800
 8002d20:	080060bc 	.word	0x080060bc
 8002d24:	20000070 	.word	0x20000070
 8002d28:	20000074 	.word	0x20000074

08002d2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d30:	b090      	sub	sp, #64	; 0x40
 8002d32:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002d34:	2300      	movs	r3, #0
 8002d36:	637b      	str	r3, [r7, #52]	; 0x34
 8002d38:	2300      	movs	r3, #0
 8002d3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002d40:	2300      	movs	r3, #0
 8002d42:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d44:	4b59      	ldr	r3, [pc, #356]	; (8002eac <HAL_RCC_GetSysClockFreq+0x180>)
 8002d46:	689b      	ldr	r3, [r3, #8]
 8002d48:	f003 030c 	and.w	r3, r3, #12
 8002d4c:	2b08      	cmp	r3, #8
 8002d4e:	d00d      	beq.n	8002d6c <HAL_RCC_GetSysClockFreq+0x40>
 8002d50:	2b08      	cmp	r3, #8
 8002d52:	f200 80a1 	bhi.w	8002e98 <HAL_RCC_GetSysClockFreq+0x16c>
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d002      	beq.n	8002d60 <HAL_RCC_GetSysClockFreq+0x34>
 8002d5a:	2b04      	cmp	r3, #4
 8002d5c:	d003      	beq.n	8002d66 <HAL_RCC_GetSysClockFreq+0x3a>
 8002d5e:	e09b      	b.n	8002e98 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002d60:	4b53      	ldr	r3, [pc, #332]	; (8002eb0 <HAL_RCC_GetSysClockFreq+0x184>)
 8002d62:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002d64:	e09b      	b.n	8002e9e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002d66:	4b53      	ldr	r3, [pc, #332]	; (8002eb4 <HAL_RCC_GetSysClockFreq+0x188>)
 8002d68:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002d6a:	e098      	b.n	8002e9e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d6c:	4b4f      	ldr	r3, [pc, #316]	; (8002eac <HAL_RCC_GetSysClockFreq+0x180>)
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d74:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d76:	4b4d      	ldr	r3, [pc, #308]	; (8002eac <HAL_RCC_GetSysClockFreq+0x180>)
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d028      	beq.n	8002dd4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d82:	4b4a      	ldr	r3, [pc, #296]	; (8002eac <HAL_RCC_GetSysClockFreq+0x180>)
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	099b      	lsrs	r3, r3, #6
 8002d88:	2200      	movs	r2, #0
 8002d8a:	623b      	str	r3, [r7, #32]
 8002d8c:	627a      	str	r2, [r7, #36]	; 0x24
 8002d8e:	6a3b      	ldr	r3, [r7, #32]
 8002d90:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002d94:	2100      	movs	r1, #0
 8002d96:	4b47      	ldr	r3, [pc, #284]	; (8002eb4 <HAL_RCC_GetSysClockFreq+0x188>)
 8002d98:	fb03 f201 	mul.w	r2, r3, r1
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	fb00 f303 	mul.w	r3, r0, r3
 8002da2:	4413      	add	r3, r2
 8002da4:	4a43      	ldr	r2, [pc, #268]	; (8002eb4 <HAL_RCC_GetSysClockFreq+0x188>)
 8002da6:	fba0 1202 	umull	r1, r2, r0, r2
 8002daa:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002dac:	460a      	mov	r2, r1
 8002dae:	62ba      	str	r2, [r7, #40]	; 0x28
 8002db0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002db2:	4413      	add	r3, r2
 8002db4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002db6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002db8:	2200      	movs	r2, #0
 8002dba:	61bb      	str	r3, [r7, #24]
 8002dbc:	61fa      	str	r2, [r7, #28]
 8002dbe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002dc2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002dc6:	f7fd fa53 	bl	8000270 <__aeabi_uldivmod>
 8002dca:	4602      	mov	r2, r0
 8002dcc:	460b      	mov	r3, r1
 8002dce:	4613      	mov	r3, r2
 8002dd0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002dd2:	e053      	b.n	8002e7c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002dd4:	4b35      	ldr	r3, [pc, #212]	; (8002eac <HAL_RCC_GetSysClockFreq+0x180>)
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	099b      	lsrs	r3, r3, #6
 8002dda:	2200      	movs	r2, #0
 8002ddc:	613b      	str	r3, [r7, #16]
 8002dde:	617a      	str	r2, [r7, #20]
 8002de0:	693b      	ldr	r3, [r7, #16]
 8002de2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002de6:	f04f 0b00 	mov.w	fp, #0
 8002dea:	4652      	mov	r2, sl
 8002dec:	465b      	mov	r3, fp
 8002dee:	f04f 0000 	mov.w	r0, #0
 8002df2:	f04f 0100 	mov.w	r1, #0
 8002df6:	0159      	lsls	r1, r3, #5
 8002df8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002dfc:	0150      	lsls	r0, r2, #5
 8002dfe:	4602      	mov	r2, r0
 8002e00:	460b      	mov	r3, r1
 8002e02:	ebb2 080a 	subs.w	r8, r2, sl
 8002e06:	eb63 090b 	sbc.w	r9, r3, fp
 8002e0a:	f04f 0200 	mov.w	r2, #0
 8002e0e:	f04f 0300 	mov.w	r3, #0
 8002e12:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002e16:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002e1a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002e1e:	ebb2 0408 	subs.w	r4, r2, r8
 8002e22:	eb63 0509 	sbc.w	r5, r3, r9
 8002e26:	f04f 0200 	mov.w	r2, #0
 8002e2a:	f04f 0300 	mov.w	r3, #0
 8002e2e:	00eb      	lsls	r3, r5, #3
 8002e30:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e34:	00e2      	lsls	r2, r4, #3
 8002e36:	4614      	mov	r4, r2
 8002e38:	461d      	mov	r5, r3
 8002e3a:	eb14 030a 	adds.w	r3, r4, sl
 8002e3e:	603b      	str	r3, [r7, #0]
 8002e40:	eb45 030b 	adc.w	r3, r5, fp
 8002e44:	607b      	str	r3, [r7, #4]
 8002e46:	f04f 0200 	mov.w	r2, #0
 8002e4a:	f04f 0300 	mov.w	r3, #0
 8002e4e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002e52:	4629      	mov	r1, r5
 8002e54:	028b      	lsls	r3, r1, #10
 8002e56:	4621      	mov	r1, r4
 8002e58:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002e5c:	4621      	mov	r1, r4
 8002e5e:	028a      	lsls	r2, r1, #10
 8002e60:	4610      	mov	r0, r2
 8002e62:	4619      	mov	r1, r3
 8002e64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e66:	2200      	movs	r2, #0
 8002e68:	60bb      	str	r3, [r7, #8]
 8002e6a:	60fa      	str	r2, [r7, #12]
 8002e6c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002e70:	f7fd f9fe 	bl	8000270 <__aeabi_uldivmod>
 8002e74:	4602      	mov	r2, r0
 8002e76:	460b      	mov	r3, r1
 8002e78:	4613      	mov	r3, r2
 8002e7a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002e7c:	4b0b      	ldr	r3, [pc, #44]	; (8002eac <HAL_RCC_GetSysClockFreq+0x180>)
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	0c1b      	lsrs	r3, r3, #16
 8002e82:	f003 0303 	and.w	r3, r3, #3
 8002e86:	3301      	adds	r3, #1
 8002e88:	005b      	lsls	r3, r3, #1
 8002e8a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002e8c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e90:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e94:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002e96:	e002      	b.n	8002e9e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002e98:	4b05      	ldr	r3, [pc, #20]	; (8002eb0 <HAL_RCC_GetSysClockFreq+0x184>)
 8002e9a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002e9c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	3740      	adds	r7, #64	; 0x40
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002eaa:	bf00      	nop
 8002eac:	40023800 	.word	0x40023800
 8002eb0:	00f42400 	.word	0x00f42400
 8002eb4:	017d7840 	.word	0x017d7840

08002eb8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ebc:	4b03      	ldr	r3, [pc, #12]	; (8002ecc <HAL_RCC_GetHCLKFreq+0x14>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
}
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec8:	4770      	bx	lr
 8002eca:	bf00      	nop
 8002ecc:	20000070 	.word	0x20000070

08002ed0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002ed4:	f7ff fff0 	bl	8002eb8 <HAL_RCC_GetHCLKFreq>
 8002ed8:	4602      	mov	r2, r0
 8002eda:	4b05      	ldr	r3, [pc, #20]	; (8002ef0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002edc:	689b      	ldr	r3, [r3, #8]
 8002ede:	0a9b      	lsrs	r3, r3, #10
 8002ee0:	f003 0307 	and.w	r3, r3, #7
 8002ee4:	4903      	ldr	r1, [pc, #12]	; (8002ef4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ee6:	5ccb      	ldrb	r3, [r1, r3]
 8002ee8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002eec:	4618      	mov	r0, r3
 8002eee:	bd80      	pop	{r7, pc}
 8002ef0:	40023800 	.word	0x40023800
 8002ef4:	080060cc 	.word	0x080060cc

08002ef8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002efc:	f7ff ffdc 	bl	8002eb8 <HAL_RCC_GetHCLKFreq>
 8002f00:	4602      	mov	r2, r0
 8002f02:	4b05      	ldr	r3, [pc, #20]	; (8002f18 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002f04:	689b      	ldr	r3, [r3, #8]
 8002f06:	0b5b      	lsrs	r3, r3, #13
 8002f08:	f003 0307 	and.w	r3, r3, #7
 8002f0c:	4903      	ldr	r1, [pc, #12]	; (8002f1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f0e:	5ccb      	ldrb	r3, [r1, r3]
 8002f10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	bd80      	pop	{r7, pc}
 8002f18:	40023800 	.word	0x40023800
 8002f1c:	080060cc 	.word	0x080060cc

08002f20 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b082      	sub	sp, #8
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d101      	bne.n	8002f32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e03f      	b.n	8002fb2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002f38:	b2db      	uxtb	r3, r3
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d106      	bne.n	8002f4c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2200      	movs	r2, #0
 8002f42:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f46:	6878      	ldr	r0, [r7, #4]
 8002f48:	f7fe fb16 	bl	8001578 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2224      	movs	r2, #36	; 0x24
 8002f50:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	68da      	ldr	r2, [r3, #12]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002f62:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002f64:	6878      	ldr	r0, [r7, #4]
 8002f66:	f000 fbf1 	bl	800374c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	691a      	ldr	r2, [r3, #16]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002f78:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	695a      	ldr	r2, [r3, #20]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002f88:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	68da      	ldr	r2, [r3, #12]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002f98:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2220      	movs	r2, #32
 8002fa4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2220      	movs	r2, #32
 8002fac:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002fb0:	2300      	movs	r3, #0
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	3708      	adds	r7, #8
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}

08002fba <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fba:	b580      	push	{r7, lr}
 8002fbc:	b088      	sub	sp, #32
 8002fbe:	af02      	add	r7, sp, #8
 8002fc0:	60f8      	str	r0, [r7, #12]
 8002fc2:	60b9      	str	r1, [r7, #8]
 8002fc4:	603b      	str	r3, [r7, #0]
 8002fc6:	4613      	mov	r3, r2
 8002fc8:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002fd4:	b2db      	uxtb	r3, r3
 8002fd6:	2b20      	cmp	r3, #32
 8002fd8:	f040 8083 	bne.w	80030e2 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d002      	beq.n	8002fe8 <HAL_UART_Transmit+0x2e>
 8002fe2:	88fb      	ldrh	r3, [r7, #6]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d101      	bne.n	8002fec <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	e07b      	b.n	80030e4 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002ff2:	2b01      	cmp	r3, #1
 8002ff4:	d101      	bne.n	8002ffa <HAL_UART_Transmit+0x40>
 8002ff6:	2302      	movs	r3, #2
 8002ff8:	e074      	b.n	80030e4 <HAL_UART_Transmit+0x12a>
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	2201      	movs	r2, #1
 8002ffe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	2200      	movs	r2, #0
 8003006:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	2221      	movs	r2, #33	; 0x21
 800300c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003010:	f7fe fb92 	bl	8001738 <HAL_GetTick>
 8003014:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	88fa      	ldrh	r2, [r7, #6]
 800301a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	88fa      	ldrh	r2, [r7, #6]
 8003020:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	2200      	movs	r2, #0
 8003026:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800302a:	e042      	b.n	80030b2 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003030:	b29b      	uxth	r3, r3
 8003032:	3b01      	subs	r3, #1
 8003034:	b29a      	uxth	r2, r3
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	689b      	ldr	r3, [r3, #8]
 800303e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003042:	d122      	bne.n	800308a <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	9300      	str	r3, [sp, #0]
 8003048:	697b      	ldr	r3, [r7, #20]
 800304a:	2200      	movs	r2, #0
 800304c:	2180      	movs	r1, #128	; 0x80
 800304e:	68f8      	ldr	r0, [r7, #12]
 8003050:	f000 fa10 	bl	8003474 <UART_WaitOnFlagUntilTimeout>
 8003054:	4603      	mov	r3, r0
 8003056:	2b00      	cmp	r3, #0
 8003058:	d001      	beq.n	800305e <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800305a:	2303      	movs	r3, #3
 800305c:	e042      	b.n	80030e4 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	881b      	ldrh	r3, [r3, #0]
 8003066:	461a      	mov	r2, r3
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003070:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	691b      	ldr	r3, [r3, #16]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d103      	bne.n	8003082 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800307a:	68bb      	ldr	r3, [r7, #8]
 800307c:	3302      	adds	r3, #2
 800307e:	60bb      	str	r3, [r7, #8]
 8003080:	e017      	b.n	80030b2 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8003082:	68bb      	ldr	r3, [r7, #8]
 8003084:	3301      	adds	r3, #1
 8003086:	60bb      	str	r3, [r7, #8]
 8003088:	e013      	b.n	80030b2 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	9300      	str	r3, [sp, #0]
 800308e:	697b      	ldr	r3, [r7, #20]
 8003090:	2200      	movs	r2, #0
 8003092:	2180      	movs	r1, #128	; 0x80
 8003094:	68f8      	ldr	r0, [r7, #12]
 8003096:	f000 f9ed 	bl	8003474 <UART_WaitOnFlagUntilTimeout>
 800309a:	4603      	mov	r3, r0
 800309c:	2b00      	cmp	r3, #0
 800309e:	d001      	beq.n	80030a4 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80030a0:	2303      	movs	r3, #3
 80030a2:	e01f      	b.n	80030e4 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	1c5a      	adds	r2, r3, #1
 80030a8:	60ba      	str	r2, [r7, #8]
 80030aa:	781a      	ldrb	r2, [r3, #0]
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80030b6:	b29b      	uxth	r3, r3
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d1b7      	bne.n	800302c <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	9300      	str	r3, [sp, #0]
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	2200      	movs	r2, #0
 80030c4:	2140      	movs	r1, #64	; 0x40
 80030c6:	68f8      	ldr	r0, [r7, #12]
 80030c8:	f000 f9d4 	bl	8003474 <UART_WaitOnFlagUntilTimeout>
 80030cc:	4603      	mov	r3, r0
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d001      	beq.n	80030d6 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80030d2:	2303      	movs	r3, #3
 80030d4:	e006      	b.n	80030e4 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	2220      	movs	r2, #32
 80030da:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80030de:	2300      	movs	r3, #0
 80030e0:	e000      	b.n	80030e4 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80030e2:	2302      	movs	r3, #2
  }
}
 80030e4:	4618      	mov	r0, r3
 80030e6:	3718      	adds	r7, #24
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bd80      	pop	{r7, pc}

080030ec <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b088      	sub	sp, #32
 80030f0:	af02      	add	r7, sp, #8
 80030f2:	60f8      	str	r0, [r7, #12]
 80030f4:	60b9      	str	r1, [r7, #8]
 80030f6:	603b      	str	r3, [r7, #0]
 80030f8:	4613      	mov	r3, r2
 80030fa:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80030fc:	2300      	movs	r3, #0
 80030fe:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003106:	b2db      	uxtb	r3, r3
 8003108:	2b20      	cmp	r3, #32
 800310a:	f040 8090 	bne.w	800322e <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 800310e:	68bb      	ldr	r3, [r7, #8]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d002      	beq.n	800311a <HAL_UART_Receive+0x2e>
 8003114:	88fb      	ldrh	r3, [r7, #6]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d101      	bne.n	800311e <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800311a:	2301      	movs	r3, #1
 800311c:	e088      	b.n	8003230 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003124:	2b01      	cmp	r3, #1
 8003126:	d101      	bne.n	800312c <HAL_UART_Receive+0x40>
 8003128:	2302      	movs	r3, #2
 800312a:	e081      	b.n	8003230 <HAL_UART_Receive+0x144>
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	2201      	movs	r2, #1
 8003130:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	2200      	movs	r2, #0
 8003138:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	2222      	movs	r2, #34	; 0x22
 800313e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003142:	f7fe faf9 	bl	8001738 <HAL_GetTick>
 8003146:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	88fa      	ldrh	r2, [r7, #6]
 800314c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	88fa      	ldrh	r2, [r7, #6]
 8003152:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	2200      	movs	r2, #0
 8003158:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800315c:	e05c      	b.n	8003218 <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003162:	b29b      	uxth	r3, r3
 8003164:	3b01      	subs	r3, #1
 8003166:	b29a      	uxth	r2, r3
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	689b      	ldr	r3, [r3, #8]
 8003170:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003174:	d12b      	bne.n	80031ce <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	9300      	str	r3, [sp, #0]
 800317a:	697b      	ldr	r3, [r7, #20]
 800317c:	2200      	movs	r2, #0
 800317e:	2120      	movs	r1, #32
 8003180:	68f8      	ldr	r0, [r7, #12]
 8003182:	f000 f977 	bl	8003474 <UART_WaitOnFlagUntilTimeout>
 8003186:	4603      	mov	r3, r0
 8003188:	2b00      	cmp	r3, #0
 800318a:	d001      	beq.n	8003190 <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 800318c:	2303      	movs	r3, #3
 800318e:	e04f      	b.n	8003230 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 8003190:	68bb      	ldr	r3, [r7, #8]
 8003192:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	691b      	ldr	r3, [r3, #16]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d10c      	bne.n	80031b6 <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	b29b      	uxth	r3, r3
 80031a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031a8:	b29a      	uxth	r2, r3
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	3302      	adds	r3, #2
 80031b2:	60bb      	str	r3, [r7, #8]
 80031b4:	e030      	b.n	8003218 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	b29b      	uxth	r3, r3
 80031be:	b2db      	uxtb	r3, r3
 80031c0:	b29a      	uxth	r2, r3
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	3301      	adds	r3, #1
 80031ca:	60bb      	str	r3, [r7, #8]
 80031cc:	e024      	b.n	8003218 <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	9300      	str	r3, [sp, #0]
 80031d2:	697b      	ldr	r3, [r7, #20]
 80031d4:	2200      	movs	r2, #0
 80031d6:	2120      	movs	r1, #32
 80031d8:	68f8      	ldr	r0, [r7, #12]
 80031da:	f000 f94b 	bl	8003474 <UART_WaitOnFlagUntilTimeout>
 80031de:	4603      	mov	r3, r0
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d001      	beq.n	80031e8 <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 80031e4:	2303      	movs	r3, #3
 80031e6:	e023      	b.n	8003230 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	691b      	ldr	r3, [r3, #16]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d108      	bne.n	8003202 <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	6859      	ldr	r1, [r3, #4]
 80031f6:	68bb      	ldr	r3, [r7, #8]
 80031f8:	1c5a      	adds	r2, r3, #1
 80031fa:	60ba      	str	r2, [r7, #8]
 80031fc:	b2ca      	uxtb	r2, r1
 80031fe:	701a      	strb	r2, [r3, #0]
 8003200:	e00a      	b.n	8003218 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	b2da      	uxtb	r2, r3
 800320a:	68bb      	ldr	r3, [r7, #8]
 800320c:	1c59      	adds	r1, r3, #1
 800320e:	60b9      	str	r1, [r7, #8]
 8003210:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003214:	b2d2      	uxtb	r2, r2
 8003216:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800321c:	b29b      	uxth	r3, r3
 800321e:	2b00      	cmp	r3, #0
 8003220:	d19d      	bne.n	800315e <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	2220      	movs	r2, #32
 8003226:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 800322a:	2300      	movs	r3, #0
 800322c:	e000      	b.n	8003230 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 800322e:	2302      	movs	r3, #2
  }
}
 8003230:	4618      	mov	r0, r3
 8003232:	3718      	adds	r7, #24
 8003234:	46bd      	mov	sp, r7
 8003236:	bd80      	pop	{r7, pc}

08003238 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b088      	sub	sp, #32
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	68db      	ldr	r3, [r3, #12]
 800324e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	695b      	ldr	r3, [r3, #20]
 8003256:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8003258:	2300      	movs	r3, #0
 800325a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800325c:	2300      	movs	r3, #0
 800325e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003260:	69fb      	ldr	r3, [r7, #28]
 8003262:	f003 030f 	and.w	r3, r3, #15
 8003266:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8003268:	693b      	ldr	r3, [r7, #16]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d10d      	bne.n	800328a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800326e:	69fb      	ldr	r3, [r7, #28]
 8003270:	f003 0320 	and.w	r3, r3, #32
 8003274:	2b00      	cmp	r3, #0
 8003276:	d008      	beq.n	800328a <HAL_UART_IRQHandler+0x52>
 8003278:	69bb      	ldr	r3, [r7, #24]
 800327a:	f003 0320 	and.w	r3, r3, #32
 800327e:	2b00      	cmp	r3, #0
 8003280:	d003      	beq.n	800328a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003282:	6878      	ldr	r0, [r7, #4]
 8003284:	f000 f9e0 	bl	8003648 <UART_Receive_IT>
      return;
 8003288:	e0d0      	b.n	800342c <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	2b00      	cmp	r3, #0
 800328e:	f000 80b0 	beq.w	80033f2 <HAL_UART_IRQHandler+0x1ba>
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	f003 0301 	and.w	r3, r3, #1
 8003298:	2b00      	cmp	r3, #0
 800329a:	d105      	bne.n	80032a8 <HAL_UART_IRQHandler+0x70>
 800329c:	69bb      	ldr	r3, [r7, #24]
 800329e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	f000 80a5 	beq.w	80033f2 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80032a8:	69fb      	ldr	r3, [r7, #28]
 80032aa:	f003 0301 	and.w	r3, r3, #1
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d00a      	beq.n	80032c8 <HAL_UART_IRQHandler+0x90>
 80032b2:	69bb      	ldr	r3, [r7, #24]
 80032b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d005      	beq.n	80032c8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032c0:	f043 0201 	orr.w	r2, r3, #1
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80032c8:	69fb      	ldr	r3, [r7, #28]
 80032ca:	f003 0304 	and.w	r3, r3, #4
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d00a      	beq.n	80032e8 <HAL_UART_IRQHandler+0xb0>
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	f003 0301 	and.w	r3, r3, #1
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d005      	beq.n	80032e8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032e0:	f043 0202 	orr.w	r2, r3, #2
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80032e8:	69fb      	ldr	r3, [r7, #28]
 80032ea:	f003 0302 	and.w	r3, r3, #2
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d00a      	beq.n	8003308 <HAL_UART_IRQHandler+0xd0>
 80032f2:	697b      	ldr	r3, [r7, #20]
 80032f4:	f003 0301 	and.w	r3, r3, #1
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d005      	beq.n	8003308 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003300:	f043 0204 	orr.w	r2, r3, #4
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003308:	69fb      	ldr	r3, [r7, #28]
 800330a:	f003 0308 	and.w	r3, r3, #8
 800330e:	2b00      	cmp	r3, #0
 8003310:	d00f      	beq.n	8003332 <HAL_UART_IRQHandler+0xfa>
 8003312:	69bb      	ldr	r3, [r7, #24]
 8003314:	f003 0320 	and.w	r3, r3, #32
 8003318:	2b00      	cmp	r3, #0
 800331a:	d104      	bne.n	8003326 <HAL_UART_IRQHandler+0xee>
 800331c:	697b      	ldr	r3, [r7, #20]
 800331e:	f003 0301 	and.w	r3, r3, #1
 8003322:	2b00      	cmp	r3, #0
 8003324:	d005      	beq.n	8003332 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800332a:	f043 0208 	orr.w	r2, r3, #8
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003336:	2b00      	cmp	r3, #0
 8003338:	d077      	beq.n	800342a <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800333a:	69fb      	ldr	r3, [r7, #28]
 800333c:	f003 0320 	and.w	r3, r3, #32
 8003340:	2b00      	cmp	r3, #0
 8003342:	d007      	beq.n	8003354 <HAL_UART_IRQHandler+0x11c>
 8003344:	69bb      	ldr	r3, [r7, #24]
 8003346:	f003 0320 	and.w	r3, r3, #32
 800334a:	2b00      	cmp	r3, #0
 800334c:	d002      	beq.n	8003354 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800334e:	6878      	ldr	r0, [r7, #4]
 8003350:	f000 f97a 	bl	8003648 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	695b      	ldr	r3, [r3, #20]
 800335a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800335e:	2b40      	cmp	r3, #64	; 0x40
 8003360:	bf0c      	ite	eq
 8003362:	2301      	moveq	r3, #1
 8003364:	2300      	movne	r3, #0
 8003366:	b2db      	uxtb	r3, r3
 8003368:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800336e:	f003 0308 	and.w	r3, r3, #8
 8003372:	2b00      	cmp	r3, #0
 8003374:	d102      	bne.n	800337c <HAL_UART_IRQHandler+0x144>
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d031      	beq.n	80033e0 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800337c:	6878      	ldr	r0, [r7, #4]
 800337e:	f000 f8c3 	bl	8003508 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	695b      	ldr	r3, [r3, #20]
 8003388:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800338c:	2b40      	cmp	r3, #64	; 0x40
 800338e:	d123      	bne.n	80033d8 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	695a      	ldr	r2, [r3, #20]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800339e:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d013      	beq.n	80033d0 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033ac:	4a21      	ldr	r2, [pc, #132]	; (8003434 <HAL_UART_IRQHandler+0x1fc>)
 80033ae:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033b4:	4618      	mov	r0, r3
 80033b6:	f7fe fb00 	bl	80019ba <HAL_DMA_Abort_IT>
 80033ba:	4603      	mov	r3, r0
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d016      	beq.n	80033ee <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033c6:	687a      	ldr	r2, [r7, #4]
 80033c8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80033ca:	4610      	mov	r0, r2
 80033cc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033ce:	e00e      	b.n	80033ee <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80033d0:	6878      	ldr	r0, [r7, #4]
 80033d2:	f000 f845 	bl	8003460 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033d6:	e00a      	b.n	80033ee <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80033d8:	6878      	ldr	r0, [r7, #4]
 80033da:	f000 f841 	bl	8003460 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033de:	e006      	b.n	80033ee <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80033e0:	6878      	ldr	r0, [r7, #4]
 80033e2:	f000 f83d 	bl	8003460 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2200      	movs	r2, #0
 80033ea:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80033ec:	e01d      	b.n	800342a <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033ee:	bf00      	nop
    return;
 80033f0:	e01b      	b.n	800342a <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80033f2:	69fb      	ldr	r3, [r7, #28]
 80033f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d008      	beq.n	800340e <HAL_UART_IRQHandler+0x1d6>
 80033fc:	69bb      	ldr	r3, [r7, #24]
 80033fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003402:	2b00      	cmp	r3, #0
 8003404:	d003      	beq.n	800340e <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8003406:	6878      	ldr	r0, [r7, #4]
 8003408:	f000 f8b0 	bl	800356c <UART_Transmit_IT>
    return;
 800340c:	e00e      	b.n	800342c <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800340e:	69fb      	ldr	r3, [r7, #28]
 8003410:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003414:	2b00      	cmp	r3, #0
 8003416:	d009      	beq.n	800342c <HAL_UART_IRQHandler+0x1f4>
 8003418:	69bb      	ldr	r3, [r7, #24]
 800341a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800341e:	2b00      	cmp	r3, #0
 8003420:	d004      	beq.n	800342c <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 8003422:	6878      	ldr	r0, [r7, #4]
 8003424:	f000 f8f8 	bl	8003618 <UART_EndTransmit_IT>
    return;
 8003428:	e000      	b.n	800342c <HAL_UART_IRQHandler+0x1f4>
    return;
 800342a:	bf00      	nop
  }
}
 800342c:	3720      	adds	r7, #32
 800342e:	46bd      	mov	sp, r7
 8003430:	bd80      	pop	{r7, pc}
 8003432:	bf00      	nop
 8003434:	08003545 	.word	0x08003545

08003438 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003438:	b480      	push	{r7}
 800343a:	b083      	sub	sp, #12
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003440:	bf00      	nop
 8003442:	370c      	adds	r7, #12
 8003444:	46bd      	mov	sp, r7
 8003446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344a:	4770      	bx	lr

0800344c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800344c:	b480      	push	{r7}
 800344e:	b083      	sub	sp, #12
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003454:	bf00      	nop
 8003456:	370c      	adds	r7, #12
 8003458:	46bd      	mov	sp, r7
 800345a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345e:	4770      	bx	lr

08003460 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003460:	b480      	push	{r7}
 8003462:	b083      	sub	sp, #12
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003468:	bf00      	nop
 800346a:	370c      	adds	r7, #12
 800346c:	46bd      	mov	sp, r7
 800346e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003472:	4770      	bx	lr

08003474 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b084      	sub	sp, #16
 8003478:	af00      	add	r7, sp, #0
 800347a:	60f8      	str	r0, [r7, #12]
 800347c:	60b9      	str	r1, [r7, #8]
 800347e:	603b      	str	r3, [r7, #0]
 8003480:	4613      	mov	r3, r2
 8003482:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003484:	e02c      	b.n	80034e0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003486:	69bb      	ldr	r3, [r7, #24]
 8003488:	f1b3 3fff 	cmp.w	r3, #4294967295
 800348c:	d028      	beq.n	80034e0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800348e:	69bb      	ldr	r3, [r7, #24]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d007      	beq.n	80034a4 <UART_WaitOnFlagUntilTimeout+0x30>
 8003494:	f7fe f950 	bl	8001738 <HAL_GetTick>
 8003498:	4602      	mov	r2, r0
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	1ad3      	subs	r3, r2, r3
 800349e:	69ba      	ldr	r2, [r7, #24]
 80034a0:	429a      	cmp	r2, r3
 80034a2:	d21d      	bcs.n	80034e0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	68da      	ldr	r2, [r3, #12]
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80034b2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	695a      	ldr	r2, [r3, #20]
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f022 0201 	bic.w	r2, r2, #1
 80034c2:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	2220      	movs	r2, #32
 80034c8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	2220      	movs	r2, #32
 80034d0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	2200      	movs	r2, #0
 80034d8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80034dc:	2303      	movs	r3, #3
 80034de:	e00f      	b.n	8003500 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	681a      	ldr	r2, [r3, #0]
 80034e6:	68bb      	ldr	r3, [r7, #8]
 80034e8:	4013      	ands	r3, r2
 80034ea:	68ba      	ldr	r2, [r7, #8]
 80034ec:	429a      	cmp	r2, r3
 80034ee:	bf0c      	ite	eq
 80034f0:	2301      	moveq	r3, #1
 80034f2:	2300      	movne	r3, #0
 80034f4:	b2db      	uxtb	r3, r3
 80034f6:	461a      	mov	r2, r3
 80034f8:	79fb      	ldrb	r3, [r7, #7]
 80034fa:	429a      	cmp	r2, r3
 80034fc:	d0c3      	beq.n	8003486 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80034fe:	2300      	movs	r3, #0
}
 8003500:	4618      	mov	r0, r3
 8003502:	3710      	adds	r7, #16
 8003504:	46bd      	mov	sp, r7
 8003506:	bd80      	pop	{r7, pc}

08003508 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003508:	b480      	push	{r7}
 800350a:	b083      	sub	sp, #12
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	68da      	ldr	r2, [r3, #12]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800351e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	695a      	ldr	r2, [r3, #20]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f022 0201 	bic.w	r2, r2, #1
 800352e:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2220      	movs	r2, #32
 8003534:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8003538:	bf00      	nop
 800353a:	370c      	adds	r7, #12
 800353c:	46bd      	mov	sp, r7
 800353e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003542:	4770      	bx	lr

08003544 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b084      	sub	sp, #16
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003550:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	2200      	movs	r2, #0
 8003556:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	2200      	movs	r2, #0
 800355c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800355e:	68f8      	ldr	r0, [r7, #12]
 8003560:	f7ff ff7e 	bl	8003460 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003564:	bf00      	nop
 8003566:	3710      	adds	r7, #16
 8003568:	46bd      	mov	sp, r7
 800356a:	bd80      	pop	{r7, pc}

0800356c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800356c:	b480      	push	{r7}
 800356e:	b085      	sub	sp, #20
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800357a:	b2db      	uxtb	r3, r3
 800357c:	2b21      	cmp	r3, #33	; 0x21
 800357e:	d144      	bne.n	800360a <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003588:	d11a      	bne.n	80035c0 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6a1b      	ldr	r3, [r3, #32]
 800358e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	881b      	ldrh	r3, [r3, #0]
 8003594:	461a      	mov	r2, r3
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800359e:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	691b      	ldr	r3, [r3, #16]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d105      	bne.n	80035b4 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6a1b      	ldr	r3, [r3, #32]
 80035ac:	1c9a      	adds	r2, r3, #2
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	621a      	str	r2, [r3, #32]
 80035b2:	e00e      	b.n	80035d2 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6a1b      	ldr	r3, [r3, #32]
 80035b8:	1c5a      	adds	r2, r3, #1
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	621a      	str	r2, [r3, #32]
 80035be:	e008      	b.n	80035d2 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6a1b      	ldr	r3, [r3, #32]
 80035c4:	1c59      	adds	r1, r3, #1
 80035c6:	687a      	ldr	r2, [r7, #4]
 80035c8:	6211      	str	r1, [r2, #32]
 80035ca:	781a      	ldrb	r2, [r3, #0]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80035d6:	b29b      	uxth	r3, r3
 80035d8:	3b01      	subs	r3, #1
 80035da:	b29b      	uxth	r3, r3
 80035dc:	687a      	ldr	r2, [r7, #4]
 80035de:	4619      	mov	r1, r3
 80035e0:	84d1      	strh	r1, [r2, #38]	; 0x26
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d10f      	bne.n	8003606 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	68da      	ldr	r2, [r3, #12]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80035f4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	68da      	ldr	r2, [r3, #12]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003604:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003606:	2300      	movs	r3, #0
 8003608:	e000      	b.n	800360c <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800360a:	2302      	movs	r3, #2
  }
}
 800360c:	4618      	mov	r0, r3
 800360e:	3714      	adds	r7, #20
 8003610:	46bd      	mov	sp, r7
 8003612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003616:	4770      	bx	lr

08003618 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b082      	sub	sp, #8
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	68da      	ldr	r2, [r3, #12]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800362e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2220      	movs	r2, #32
 8003634:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003638:	6878      	ldr	r0, [r7, #4]
 800363a:	f7ff fefd 	bl	8003438 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800363e:	2300      	movs	r3, #0
}
 8003640:	4618      	mov	r0, r3
 8003642:	3708      	adds	r7, #8
 8003644:	46bd      	mov	sp, r7
 8003646:	bd80      	pop	{r7, pc}

08003648 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b084      	sub	sp, #16
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003656:	b2db      	uxtb	r3, r3
 8003658:	2b22      	cmp	r3, #34	; 0x22
 800365a:	d171      	bne.n	8003740 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	689b      	ldr	r3, [r3, #8]
 8003660:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003664:	d123      	bne.n	80036ae <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800366a:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	691b      	ldr	r3, [r3, #16]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d10e      	bne.n	8003692 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	b29b      	uxth	r3, r3
 800367c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003680:	b29a      	uxth	r2, r3
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800368a:	1c9a      	adds	r2, r3, #2
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	629a      	str	r2, [r3, #40]	; 0x28
 8003690:	e029      	b.n	80036e6 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	b29b      	uxth	r3, r3
 800369a:	b2db      	uxtb	r3, r3
 800369c:	b29a      	uxth	r2, r3
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036a6:	1c5a      	adds	r2, r3, #1
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	629a      	str	r2, [r3, #40]	; 0x28
 80036ac:	e01b      	b.n	80036e6 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	691b      	ldr	r3, [r3, #16]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d10a      	bne.n	80036cc <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	6858      	ldr	r0, [r3, #4]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036c0:	1c59      	adds	r1, r3, #1
 80036c2:	687a      	ldr	r2, [r7, #4]
 80036c4:	6291      	str	r1, [r2, #40]	; 0x28
 80036c6:	b2c2      	uxtb	r2, r0
 80036c8:	701a      	strb	r2, [r3, #0]
 80036ca:	e00c      	b.n	80036e6 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	b2da      	uxtb	r2, r3
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036d8:	1c58      	adds	r0, r3, #1
 80036da:	6879      	ldr	r1, [r7, #4]
 80036dc:	6288      	str	r0, [r1, #40]	; 0x28
 80036de:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80036e2:	b2d2      	uxtb	r2, r2
 80036e4:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80036ea:	b29b      	uxth	r3, r3
 80036ec:	3b01      	subs	r3, #1
 80036ee:	b29b      	uxth	r3, r3
 80036f0:	687a      	ldr	r2, [r7, #4]
 80036f2:	4619      	mov	r1, r3
 80036f4:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d120      	bne.n	800373c <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	68da      	ldr	r2, [r3, #12]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f022 0220 	bic.w	r2, r2, #32
 8003708:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	68da      	ldr	r2, [r3, #12]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003718:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	695a      	ldr	r2, [r3, #20]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f022 0201 	bic.w	r2, r2, #1
 8003728:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2220      	movs	r2, #32
 800372e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8003732:	6878      	ldr	r0, [r7, #4]
 8003734:	f7ff fe8a 	bl	800344c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8003738:	2300      	movs	r3, #0
 800373a:	e002      	b.n	8003742 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800373c:	2300      	movs	r3, #0
 800373e:	e000      	b.n	8003742 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8003740:	2302      	movs	r3, #2
  }
}
 8003742:	4618      	mov	r0, r3
 8003744:	3710      	adds	r7, #16
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}
	...

0800374c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800374c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003750:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8003754:	af00      	add	r7, sp, #0
 8003756:	f8c7 01fc 	str.w	r0, [r7, #508]	; 0x1fc
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800375a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	691b      	ldr	r3, [r3, #16]
 8003762:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003766:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800376a:	68d9      	ldr	r1, [r3, #12]
 800376c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003770:	681a      	ldr	r2, [r3, #0]
 8003772:	ea40 0301 	orr.w	r3, r0, r1
 8003776:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003778:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800377c:	689a      	ldr	r2, [r3, #8]
 800377e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003782:	691b      	ldr	r3, [r3, #16]
 8003784:	431a      	orrs	r2, r3
 8003786:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800378a:	695b      	ldr	r3, [r3, #20]
 800378c:	431a      	orrs	r2, r3
 800378e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003792:	69db      	ldr	r3, [r3, #28]
 8003794:	4313      	orrs	r3, r2
 8003796:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
  MODIFY_REG(huart->Instance->CR1,
 800379a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	68db      	ldr	r3, [r3, #12]
 80037a2:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80037a6:	f021 010c 	bic.w	r1, r1, #12
 80037aa:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80037ae:	681a      	ldr	r2, [r3, #0]
 80037b0:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 80037b4:	430b      	orrs	r3, r1
 80037b6:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80037b8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	695b      	ldr	r3, [r3, #20]
 80037c0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80037c4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80037c8:	6999      	ldr	r1, [r3, #24]
 80037ca:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80037ce:	681a      	ldr	r2, [r3, #0]
 80037d0:	ea40 0301 	orr.w	r3, r0, r1
 80037d4:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80037d6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80037da:	69db      	ldr	r3, [r3, #28]
 80037dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037e0:	f040 824a 	bne.w	8003c78 <UART_SetConfig+0x52c>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80037e4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80037e8:	681a      	ldr	r2, [r3, #0]
 80037ea:	4b96      	ldr	r3, [pc, #600]	; (8003a44 <UART_SetConfig+0x2f8>)
 80037ec:	429a      	cmp	r2, r3
 80037ee:	d006      	beq.n	80037fe <UART_SetConfig+0xb2>
 80037f0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80037f4:	681a      	ldr	r2, [r3, #0]
 80037f6:	4b94      	ldr	r3, [pc, #592]	; (8003a48 <UART_SetConfig+0x2fc>)
 80037f8:	429a      	cmp	r2, r3
 80037fa:	f040 8129 	bne.w	8003a50 <UART_SetConfig+0x304>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80037fe:	f7ff fb7b 	bl	8002ef8 <HAL_RCC_GetPCLK2Freq>
 8003802:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003806:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800380a:	2200      	movs	r2, #0
 800380c:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 8003810:	f8c7 21f4 	str.w	r2, [r7, #500]	; 0x1f4
 8003814:	e9d7 457c 	ldrd	r4, r5, [r7, #496]	; 0x1f0
 8003818:	4622      	mov	r2, r4
 800381a:	462b      	mov	r3, r5
 800381c:	1891      	adds	r1, r2, r2
 800381e:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8003822:	415b      	adcs	r3, r3
 8003824:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003828:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 800382c:	4621      	mov	r1, r4
 800382e:	1851      	adds	r1, r2, r1
 8003830:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 8003834:	4629      	mov	r1, r5
 8003836:	414b      	adcs	r3, r1
 8003838:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800383c:	f04f 0200 	mov.w	r2, #0
 8003840:	f04f 0300 	mov.w	r3, #0
 8003844:	e9d7 8932 	ldrd	r8, r9, [r7, #200]	; 0xc8
 8003848:	4649      	mov	r1, r9
 800384a:	00cb      	lsls	r3, r1, #3
 800384c:	4641      	mov	r1, r8
 800384e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003852:	4641      	mov	r1, r8
 8003854:	00ca      	lsls	r2, r1, #3
 8003856:	4610      	mov	r0, r2
 8003858:	4619      	mov	r1, r3
 800385a:	4603      	mov	r3, r0
 800385c:	4622      	mov	r2, r4
 800385e:	189b      	adds	r3, r3, r2
 8003860:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8003864:	462b      	mov	r3, r5
 8003866:	460a      	mov	r2, r1
 8003868:	eb42 0303 	adc.w	r3, r2, r3
 800386c:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 8003870:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	2200      	movs	r2, #0
 8003878:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800387c:	f8c7 21e4 	str.w	r2, [r7, #484]	; 0x1e4
 8003880:	e9d7 1278 	ldrd	r1, r2, [r7, #480]	; 0x1e0
 8003884:	460b      	mov	r3, r1
 8003886:	18db      	adds	r3, r3, r3
 8003888:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800388c:	4613      	mov	r3, r2
 800388e:	eb42 0303 	adc.w	r3, r2, r3
 8003892:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003896:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 800389a:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	; 0x1e8
 800389e:	f7fc fce7 	bl	8000270 <__aeabi_uldivmod>
 80038a2:	4602      	mov	r2, r0
 80038a4:	460b      	mov	r3, r1
 80038a6:	4b69      	ldr	r3, [pc, #420]	; (8003a4c <UART_SetConfig+0x300>)
 80038a8:	fba3 2302 	umull	r2, r3, r3, r2
 80038ac:	095b      	lsrs	r3, r3, #5
 80038ae:	011c      	lsls	r4, r3, #4
 80038b0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80038b4:	2200      	movs	r2, #0
 80038b6:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
 80038ba:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 80038be:	e9d7 8976 	ldrd	r8, r9, [r7, #472]	; 0x1d8
 80038c2:	4642      	mov	r2, r8
 80038c4:	464b      	mov	r3, r9
 80038c6:	1891      	adds	r1, r2, r2
 80038c8:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 80038cc:	415b      	adcs	r3, r3
 80038ce:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80038d2:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 80038d6:	4641      	mov	r1, r8
 80038d8:	1851      	adds	r1, r2, r1
 80038da:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 80038de:	4649      	mov	r1, r9
 80038e0:	414b      	adcs	r3, r1
 80038e2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80038e6:	f04f 0200 	mov.w	r2, #0
 80038ea:	f04f 0300 	mov.w	r3, #0
 80038ee:	e9d7 ab2c 	ldrd	sl, fp, [r7, #176]	; 0xb0
 80038f2:	4659      	mov	r1, fp
 80038f4:	00cb      	lsls	r3, r1, #3
 80038f6:	4651      	mov	r1, sl
 80038f8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80038fc:	4651      	mov	r1, sl
 80038fe:	00ca      	lsls	r2, r1, #3
 8003900:	4610      	mov	r0, r2
 8003902:	4619      	mov	r1, r3
 8003904:	4603      	mov	r3, r0
 8003906:	4642      	mov	r2, r8
 8003908:	189b      	adds	r3, r3, r2
 800390a:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 800390e:	464b      	mov	r3, r9
 8003910:	460a      	mov	r2, r1
 8003912:	eb42 0303 	adc.w	r3, r2, r3
 8003916:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 800391a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	2200      	movs	r2, #0
 8003922:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8003926:	f8c7 21cc 	str.w	r2, [r7, #460]	; 0x1cc
 800392a:	e9d7 1272 	ldrd	r1, r2, [r7, #456]	; 0x1c8
 800392e:	460b      	mov	r3, r1
 8003930:	18db      	adds	r3, r3, r3
 8003932:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003936:	4613      	mov	r3, r2
 8003938:	eb42 0303 	adc.w	r3, r2, r3
 800393c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003940:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8003944:	e9d7 0174 	ldrd	r0, r1, [r7, #464]	; 0x1d0
 8003948:	f7fc fc92 	bl	8000270 <__aeabi_uldivmod>
 800394c:	4602      	mov	r2, r0
 800394e:	460b      	mov	r3, r1
 8003950:	4611      	mov	r1, r2
 8003952:	4b3e      	ldr	r3, [pc, #248]	; (8003a4c <UART_SetConfig+0x300>)
 8003954:	fba3 2301 	umull	r2, r3, r3, r1
 8003958:	095b      	lsrs	r3, r3, #5
 800395a:	2264      	movs	r2, #100	; 0x64
 800395c:	fb02 f303 	mul.w	r3, r2, r3
 8003960:	1acb      	subs	r3, r1, r3
 8003962:	00db      	lsls	r3, r3, #3
 8003964:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003968:	4b38      	ldr	r3, [pc, #224]	; (8003a4c <UART_SetConfig+0x300>)
 800396a:	fba3 2302 	umull	r2, r3, r3, r2
 800396e:	095b      	lsrs	r3, r3, #5
 8003970:	005b      	lsls	r3, r3, #1
 8003972:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003976:	441c      	add	r4, r3
 8003978:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800397c:	2200      	movs	r2, #0
 800397e:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8003982:	f8c7 21c4 	str.w	r2, [r7, #452]	; 0x1c4
 8003986:	e9d7 8970 	ldrd	r8, r9, [r7, #448]	; 0x1c0
 800398a:	4642      	mov	r2, r8
 800398c:	464b      	mov	r3, r9
 800398e:	1891      	adds	r1, r2, r2
 8003990:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 8003994:	415b      	adcs	r3, r3
 8003996:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800399a:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 800399e:	4641      	mov	r1, r8
 80039a0:	1851      	adds	r1, r2, r1
 80039a2:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 80039a6:	4649      	mov	r1, r9
 80039a8:	414b      	adcs	r3, r1
 80039aa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80039ae:	f04f 0200 	mov.w	r2, #0
 80039b2:	f04f 0300 	mov.w	r3, #0
 80039b6:	e9d7 ab26 	ldrd	sl, fp, [r7, #152]	; 0x98
 80039ba:	4659      	mov	r1, fp
 80039bc:	00cb      	lsls	r3, r1, #3
 80039be:	4651      	mov	r1, sl
 80039c0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80039c4:	4651      	mov	r1, sl
 80039c6:	00ca      	lsls	r2, r1, #3
 80039c8:	4610      	mov	r0, r2
 80039ca:	4619      	mov	r1, r3
 80039cc:	4603      	mov	r3, r0
 80039ce:	4642      	mov	r2, r8
 80039d0:	189b      	adds	r3, r3, r2
 80039d2:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 80039d6:	464b      	mov	r3, r9
 80039d8:	460a      	mov	r2, r1
 80039da:	eb42 0303 	adc.w	r3, r2, r3
 80039de:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80039e2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	2200      	movs	r2, #0
 80039ea:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
 80039ee:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
 80039f2:	e9d7 126c 	ldrd	r1, r2, [r7, #432]	; 0x1b0
 80039f6:	460b      	mov	r3, r1
 80039f8:	18db      	adds	r3, r3, r3
 80039fa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80039fe:	4613      	mov	r3, r2
 8003a00:	eb42 0303 	adc.w	r3, r2, r3
 8003a04:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003a08:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8003a0c:	e9d7 016e 	ldrd	r0, r1, [r7, #440]	; 0x1b8
 8003a10:	f7fc fc2e 	bl	8000270 <__aeabi_uldivmod>
 8003a14:	4602      	mov	r2, r0
 8003a16:	460b      	mov	r3, r1
 8003a18:	4b0c      	ldr	r3, [pc, #48]	; (8003a4c <UART_SetConfig+0x300>)
 8003a1a:	fba3 1302 	umull	r1, r3, r3, r2
 8003a1e:	095b      	lsrs	r3, r3, #5
 8003a20:	2164      	movs	r1, #100	; 0x64
 8003a22:	fb01 f303 	mul.w	r3, r1, r3
 8003a26:	1ad3      	subs	r3, r2, r3
 8003a28:	00db      	lsls	r3, r3, #3
 8003a2a:	3332      	adds	r3, #50	; 0x32
 8003a2c:	4a07      	ldr	r2, [pc, #28]	; (8003a4c <UART_SetConfig+0x300>)
 8003a2e:	fba2 2303 	umull	r2, r3, r2, r3
 8003a32:	095b      	lsrs	r3, r3, #5
 8003a34:	f003 0207 	and.w	r2, r3, #7
 8003a38:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4422      	add	r2, r4
 8003a40:	609a      	str	r2, [r3, #8]
 8003a42:	e349      	b.n	80040d8 <UART_SetConfig+0x98c>
 8003a44:	40011000 	.word	0x40011000
 8003a48:	40011400 	.word	0x40011400
 8003a4c:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003a50:	f7ff fa3e 	bl	8002ed0 <HAL_RCC_GetPCLK1Freq>
 8003a54:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003a58:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8003a62:	f8c7 21ac 	str.w	r2, [r7, #428]	; 0x1ac
 8003a66:	e9d7 456a 	ldrd	r4, r5, [r7, #424]	; 0x1a8
 8003a6a:	4622      	mov	r2, r4
 8003a6c:	462b      	mov	r3, r5
 8003a6e:	1891      	adds	r1, r2, r2
 8003a70:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8003a74:	415b      	adcs	r3, r3
 8003a76:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003a7a:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8003a7e:	4621      	mov	r1, r4
 8003a80:	eb12 0a01 	adds.w	sl, r2, r1
 8003a84:	4629      	mov	r1, r5
 8003a86:	eb43 0b01 	adc.w	fp, r3, r1
 8003a8a:	f04f 0200 	mov.w	r2, #0
 8003a8e:	f04f 0300 	mov.w	r3, #0
 8003a92:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003a96:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003a9a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003a9e:	4692      	mov	sl, r2
 8003aa0:	469b      	mov	fp, r3
 8003aa2:	4623      	mov	r3, r4
 8003aa4:	eb1a 0303 	adds.w	r3, sl, r3
 8003aa8:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8003aac:	462b      	mov	r3, r5
 8003aae:	eb4b 0303 	adc.w	r3, fp, r3
 8003ab2:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8003ab6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	2200      	movs	r2, #0
 8003abe:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
 8003ac2:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8003ac6:	e9d7 1266 	ldrd	r1, r2, [r7, #408]	; 0x198
 8003aca:	460b      	mov	r3, r1
 8003acc:	18db      	adds	r3, r3, r3
 8003ace:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003ad2:	4613      	mov	r3, r2
 8003ad4:	eb42 0303 	adc.w	r3, r2, r3
 8003ad8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003adc:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8003ae0:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	; 0x1a0
 8003ae4:	f7fc fbc4 	bl	8000270 <__aeabi_uldivmod>
 8003ae8:	4602      	mov	r2, r0
 8003aea:	460b      	mov	r3, r1
 8003aec:	4b61      	ldr	r3, [pc, #388]	; (8003c74 <UART_SetConfig+0x528>)
 8003aee:	fba3 2302 	umull	r2, r3, r3, r2
 8003af2:	095b      	lsrs	r3, r3, #5
 8003af4:	011c      	lsls	r4, r3, #4
 8003af6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003afa:	2200      	movs	r2, #0
 8003afc:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 8003b00:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
 8003b04:	e9d7 8964 	ldrd	r8, r9, [r7, #400]	; 0x190
 8003b08:	4642      	mov	r2, r8
 8003b0a:	464b      	mov	r3, r9
 8003b0c:	1891      	adds	r1, r2, r2
 8003b0e:	67b9      	str	r1, [r7, #120]	; 0x78
 8003b10:	415b      	adcs	r3, r3
 8003b12:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003b14:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8003b18:	4641      	mov	r1, r8
 8003b1a:	1851      	adds	r1, r2, r1
 8003b1c:	6739      	str	r1, [r7, #112]	; 0x70
 8003b1e:	4649      	mov	r1, r9
 8003b20:	414b      	adcs	r3, r1
 8003b22:	677b      	str	r3, [r7, #116]	; 0x74
 8003b24:	f04f 0200 	mov.w	r2, #0
 8003b28:	f04f 0300 	mov.w	r3, #0
 8003b2c:	e9d7 ab1c 	ldrd	sl, fp, [r7, #112]	; 0x70
 8003b30:	4659      	mov	r1, fp
 8003b32:	00cb      	lsls	r3, r1, #3
 8003b34:	4651      	mov	r1, sl
 8003b36:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b3a:	4651      	mov	r1, sl
 8003b3c:	00ca      	lsls	r2, r1, #3
 8003b3e:	4610      	mov	r0, r2
 8003b40:	4619      	mov	r1, r3
 8003b42:	4603      	mov	r3, r0
 8003b44:	4642      	mov	r2, r8
 8003b46:	189b      	adds	r3, r3, r2
 8003b48:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8003b4c:	464b      	mov	r3, r9
 8003b4e:	460a      	mov	r2, r1
 8003b50:	eb42 0303 	adc.w	r3, r2, r3
 8003b54:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 8003b58:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8003b64:	f8c7 2184 	str.w	r2, [r7, #388]	; 0x184
 8003b68:	e9d7 1260 	ldrd	r1, r2, [r7, #384]	; 0x180
 8003b6c:	460b      	mov	r3, r1
 8003b6e:	18db      	adds	r3, r3, r3
 8003b70:	66bb      	str	r3, [r7, #104]	; 0x68
 8003b72:	4613      	mov	r3, r2
 8003b74:	eb42 0303 	adc.w	r3, r2, r3
 8003b78:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003b7a:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8003b7e:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003b82:	f7fc fb75 	bl	8000270 <__aeabi_uldivmod>
 8003b86:	4602      	mov	r2, r0
 8003b88:	460b      	mov	r3, r1
 8003b8a:	4611      	mov	r1, r2
 8003b8c:	4b39      	ldr	r3, [pc, #228]	; (8003c74 <UART_SetConfig+0x528>)
 8003b8e:	fba3 2301 	umull	r2, r3, r3, r1
 8003b92:	095b      	lsrs	r3, r3, #5
 8003b94:	2264      	movs	r2, #100	; 0x64
 8003b96:	fb02 f303 	mul.w	r3, r2, r3
 8003b9a:	1acb      	subs	r3, r1, r3
 8003b9c:	00db      	lsls	r3, r3, #3
 8003b9e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003ba2:	4b34      	ldr	r3, [pc, #208]	; (8003c74 <UART_SetConfig+0x528>)
 8003ba4:	fba3 2302 	umull	r2, r3, r3, r2
 8003ba8:	095b      	lsrs	r3, r3, #5
 8003baa:	005b      	lsls	r3, r3, #1
 8003bac:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003bb0:	441c      	add	r4, r3
 8003bb2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 8003bbc:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8003bc0:	e9d7 895e 	ldrd	r8, r9, [r7, #376]	; 0x178
 8003bc4:	4642      	mov	r2, r8
 8003bc6:	464b      	mov	r3, r9
 8003bc8:	1891      	adds	r1, r2, r2
 8003bca:	6639      	str	r1, [r7, #96]	; 0x60
 8003bcc:	415b      	adcs	r3, r3
 8003bce:	667b      	str	r3, [r7, #100]	; 0x64
 8003bd0:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8003bd4:	4641      	mov	r1, r8
 8003bd6:	1851      	adds	r1, r2, r1
 8003bd8:	65b9      	str	r1, [r7, #88]	; 0x58
 8003bda:	4649      	mov	r1, r9
 8003bdc:	414b      	adcs	r3, r1
 8003bde:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003be0:	f04f 0200 	mov.w	r2, #0
 8003be4:	f04f 0300 	mov.w	r3, #0
 8003be8:	e9d7 ab16 	ldrd	sl, fp, [r7, #88]	; 0x58
 8003bec:	4659      	mov	r1, fp
 8003bee:	00cb      	lsls	r3, r1, #3
 8003bf0:	4651      	mov	r1, sl
 8003bf2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003bf6:	4651      	mov	r1, sl
 8003bf8:	00ca      	lsls	r2, r1, #3
 8003bfa:	4610      	mov	r0, r2
 8003bfc:	4619      	mov	r1, r3
 8003bfe:	4603      	mov	r3, r0
 8003c00:	4642      	mov	r2, r8
 8003c02:	189b      	adds	r3, r3, r2
 8003c04:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 8003c08:	464b      	mov	r3, r9
 8003c0a:	460a      	mov	r2, r1
 8003c0c:	eb42 0303 	adc.w	r3, r2, r3
 8003c10:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8003c14:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 8003c20:	f8c7 216c 	str.w	r2, [r7, #364]	; 0x16c
 8003c24:	e9d7 125a 	ldrd	r1, r2, [r7, #360]	; 0x168
 8003c28:	460b      	mov	r3, r1
 8003c2a:	18db      	adds	r3, r3, r3
 8003c2c:	653b      	str	r3, [r7, #80]	; 0x50
 8003c2e:	4613      	mov	r3, r2
 8003c30:	eb42 0303 	adc.w	r3, r2, r3
 8003c34:	657b      	str	r3, [r7, #84]	; 0x54
 8003c36:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003c3a:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 8003c3e:	f7fc fb17 	bl	8000270 <__aeabi_uldivmod>
 8003c42:	4602      	mov	r2, r0
 8003c44:	460b      	mov	r3, r1
 8003c46:	4b0b      	ldr	r3, [pc, #44]	; (8003c74 <UART_SetConfig+0x528>)
 8003c48:	fba3 1302 	umull	r1, r3, r3, r2
 8003c4c:	095b      	lsrs	r3, r3, #5
 8003c4e:	2164      	movs	r1, #100	; 0x64
 8003c50:	fb01 f303 	mul.w	r3, r1, r3
 8003c54:	1ad3      	subs	r3, r2, r3
 8003c56:	00db      	lsls	r3, r3, #3
 8003c58:	3332      	adds	r3, #50	; 0x32
 8003c5a:	4a06      	ldr	r2, [pc, #24]	; (8003c74 <UART_SetConfig+0x528>)
 8003c5c:	fba2 2303 	umull	r2, r3, r2, r3
 8003c60:	095b      	lsrs	r3, r3, #5
 8003c62:	f003 0207 	and.w	r2, r3, #7
 8003c66:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4422      	add	r2, r4
 8003c6e:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8003c70:	e232      	b.n	80040d8 <UART_SetConfig+0x98c>
 8003c72:	bf00      	nop
 8003c74:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003c78:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003c7c:	681a      	ldr	r2, [r3, #0]
 8003c7e:	4b8d      	ldr	r3, [pc, #564]	; (8003eb4 <UART_SetConfig+0x768>)
 8003c80:	429a      	cmp	r2, r3
 8003c82:	d006      	beq.n	8003c92 <UART_SetConfig+0x546>
 8003c84:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003c88:	681a      	ldr	r2, [r3, #0]
 8003c8a:	4b8b      	ldr	r3, [pc, #556]	; (8003eb8 <UART_SetConfig+0x76c>)
 8003c8c:	429a      	cmp	r2, r3
 8003c8e:	f040 8117 	bne.w	8003ec0 <UART_SetConfig+0x774>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003c92:	f7ff f931 	bl	8002ef8 <HAL_RCC_GetPCLK2Freq>
 8003c96:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003c9a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 8003ca4:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 8003ca8:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 8003cac:	4622      	mov	r2, r4
 8003cae:	462b      	mov	r3, r5
 8003cb0:	1891      	adds	r1, r2, r2
 8003cb2:	64b9      	str	r1, [r7, #72]	; 0x48
 8003cb4:	415b      	adcs	r3, r3
 8003cb6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003cb8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003cbc:	4621      	mov	r1, r4
 8003cbe:	eb12 0801 	adds.w	r8, r2, r1
 8003cc2:	4629      	mov	r1, r5
 8003cc4:	eb43 0901 	adc.w	r9, r3, r1
 8003cc8:	f04f 0200 	mov.w	r2, #0
 8003ccc:	f04f 0300 	mov.w	r3, #0
 8003cd0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003cd4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003cd8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003cdc:	4690      	mov	r8, r2
 8003cde:	4699      	mov	r9, r3
 8003ce0:	4623      	mov	r3, r4
 8003ce2:	eb18 0303 	adds.w	r3, r8, r3
 8003ce6:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8003cea:	462b      	mov	r3, r5
 8003cec:	eb49 0303 	adc.w	r3, r9, r3
 8003cf0:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8003cf4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003d00:	f8c7 2154 	str.w	r2, [r7, #340]	; 0x154
 8003d04:	f04f 0200 	mov.w	r2, #0
 8003d08:	f04f 0300 	mov.w	r3, #0
 8003d0c:	e9d7 4554 	ldrd	r4, r5, [r7, #336]	; 0x150
 8003d10:	4629      	mov	r1, r5
 8003d12:	008b      	lsls	r3, r1, #2
 8003d14:	4621      	mov	r1, r4
 8003d16:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003d1a:	4621      	mov	r1, r4
 8003d1c:	008a      	lsls	r2, r1, #2
 8003d1e:	e9d7 0156 	ldrd	r0, r1, [r7, #344]	; 0x158
 8003d22:	f7fc faa5 	bl	8000270 <__aeabi_uldivmod>
 8003d26:	4602      	mov	r2, r0
 8003d28:	460b      	mov	r3, r1
 8003d2a:	4b64      	ldr	r3, [pc, #400]	; (8003ebc <UART_SetConfig+0x770>)
 8003d2c:	fba3 2302 	umull	r2, r3, r3, r2
 8003d30:	095b      	lsrs	r3, r3, #5
 8003d32:	011c      	lsls	r4, r3, #4
 8003d34:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003d38:	2200      	movs	r2, #0
 8003d3a:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8003d3e:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8003d42:	e9d7 8952 	ldrd	r8, r9, [r7, #328]	; 0x148
 8003d46:	4642      	mov	r2, r8
 8003d48:	464b      	mov	r3, r9
 8003d4a:	1891      	adds	r1, r2, r2
 8003d4c:	6439      	str	r1, [r7, #64]	; 0x40
 8003d4e:	415b      	adcs	r3, r3
 8003d50:	647b      	str	r3, [r7, #68]	; 0x44
 8003d52:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003d56:	4641      	mov	r1, r8
 8003d58:	1851      	adds	r1, r2, r1
 8003d5a:	63b9      	str	r1, [r7, #56]	; 0x38
 8003d5c:	4649      	mov	r1, r9
 8003d5e:	414b      	adcs	r3, r1
 8003d60:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d62:	f04f 0200 	mov.w	r2, #0
 8003d66:	f04f 0300 	mov.w	r3, #0
 8003d6a:	e9d7 ab0e 	ldrd	sl, fp, [r7, #56]	; 0x38
 8003d6e:	4659      	mov	r1, fp
 8003d70:	00cb      	lsls	r3, r1, #3
 8003d72:	4651      	mov	r1, sl
 8003d74:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d78:	4651      	mov	r1, sl
 8003d7a:	00ca      	lsls	r2, r1, #3
 8003d7c:	4610      	mov	r0, r2
 8003d7e:	4619      	mov	r1, r3
 8003d80:	4603      	mov	r3, r0
 8003d82:	4642      	mov	r2, r8
 8003d84:	189b      	adds	r3, r3, r2
 8003d86:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8003d8a:	464b      	mov	r3, r9
 8003d8c:	460a      	mov	r2, r1
 8003d8e:	eb42 0303 	adc.w	r3, r2, r3
 8003d92:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8003d96:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8003da2:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 8003da6:	f04f 0200 	mov.w	r2, #0
 8003daa:	f04f 0300 	mov.w	r3, #0
 8003dae:	e9d7 894e 	ldrd	r8, r9, [r7, #312]	; 0x138
 8003db2:	4649      	mov	r1, r9
 8003db4:	008b      	lsls	r3, r1, #2
 8003db6:	4641      	mov	r1, r8
 8003db8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003dbc:	4641      	mov	r1, r8
 8003dbe:	008a      	lsls	r2, r1, #2
 8003dc0:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 8003dc4:	f7fc fa54 	bl	8000270 <__aeabi_uldivmod>
 8003dc8:	4602      	mov	r2, r0
 8003dca:	460b      	mov	r3, r1
 8003dcc:	4b3b      	ldr	r3, [pc, #236]	; (8003ebc <UART_SetConfig+0x770>)
 8003dce:	fba3 1302 	umull	r1, r3, r3, r2
 8003dd2:	095b      	lsrs	r3, r3, #5
 8003dd4:	2164      	movs	r1, #100	; 0x64
 8003dd6:	fb01 f303 	mul.w	r3, r1, r3
 8003dda:	1ad3      	subs	r3, r2, r3
 8003ddc:	011b      	lsls	r3, r3, #4
 8003dde:	3332      	adds	r3, #50	; 0x32
 8003de0:	4a36      	ldr	r2, [pc, #216]	; (8003ebc <UART_SetConfig+0x770>)
 8003de2:	fba2 2303 	umull	r2, r3, r2, r3
 8003de6:	095b      	lsrs	r3, r3, #5
 8003de8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003dec:	441c      	add	r4, r3
 8003dee:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003df2:	2200      	movs	r2, #0
 8003df4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8003df8:	f8c7 2134 	str.w	r2, [r7, #308]	; 0x134
 8003dfc:	e9d7 894c 	ldrd	r8, r9, [r7, #304]	; 0x130
 8003e00:	4642      	mov	r2, r8
 8003e02:	464b      	mov	r3, r9
 8003e04:	1891      	adds	r1, r2, r2
 8003e06:	6339      	str	r1, [r7, #48]	; 0x30
 8003e08:	415b      	adcs	r3, r3
 8003e0a:	637b      	str	r3, [r7, #52]	; 0x34
 8003e0c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003e10:	4641      	mov	r1, r8
 8003e12:	1851      	adds	r1, r2, r1
 8003e14:	62b9      	str	r1, [r7, #40]	; 0x28
 8003e16:	4649      	mov	r1, r9
 8003e18:	414b      	adcs	r3, r1
 8003e1a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e1c:	f04f 0200 	mov.w	r2, #0
 8003e20:	f04f 0300 	mov.w	r3, #0
 8003e24:	e9d7 ab0a 	ldrd	sl, fp, [r7, #40]	; 0x28
 8003e28:	4659      	mov	r1, fp
 8003e2a:	00cb      	lsls	r3, r1, #3
 8003e2c:	4651      	mov	r1, sl
 8003e2e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e32:	4651      	mov	r1, sl
 8003e34:	00ca      	lsls	r2, r1, #3
 8003e36:	4610      	mov	r0, r2
 8003e38:	4619      	mov	r1, r3
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	4642      	mov	r2, r8
 8003e3e:	189b      	adds	r3, r3, r2
 8003e40:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8003e44:	464b      	mov	r3, r9
 8003e46:	460a      	mov	r2, r1
 8003e48:	eb42 0303 	adc.w	r3, r2, r3
 8003e4c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8003e50:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	2200      	movs	r2, #0
 8003e58:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003e5c:	f8c7 2124 	str.w	r2, [r7, #292]	; 0x124
 8003e60:	f04f 0200 	mov.w	r2, #0
 8003e64:	f04f 0300 	mov.w	r3, #0
 8003e68:	e9d7 8948 	ldrd	r8, r9, [r7, #288]	; 0x120
 8003e6c:	4649      	mov	r1, r9
 8003e6e:	008b      	lsls	r3, r1, #2
 8003e70:	4641      	mov	r1, r8
 8003e72:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003e76:	4641      	mov	r1, r8
 8003e78:	008a      	lsls	r2, r1, #2
 8003e7a:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 8003e7e:	f7fc f9f7 	bl	8000270 <__aeabi_uldivmod>
 8003e82:	4602      	mov	r2, r0
 8003e84:	460b      	mov	r3, r1
 8003e86:	4b0d      	ldr	r3, [pc, #52]	; (8003ebc <UART_SetConfig+0x770>)
 8003e88:	fba3 1302 	umull	r1, r3, r3, r2
 8003e8c:	095b      	lsrs	r3, r3, #5
 8003e8e:	2164      	movs	r1, #100	; 0x64
 8003e90:	fb01 f303 	mul.w	r3, r1, r3
 8003e94:	1ad3      	subs	r3, r2, r3
 8003e96:	011b      	lsls	r3, r3, #4
 8003e98:	3332      	adds	r3, #50	; 0x32
 8003e9a:	4a08      	ldr	r2, [pc, #32]	; (8003ebc <UART_SetConfig+0x770>)
 8003e9c:	fba2 2303 	umull	r2, r3, r2, r3
 8003ea0:	095b      	lsrs	r3, r3, #5
 8003ea2:	f003 020f 	and.w	r2, r3, #15
 8003ea6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4422      	add	r2, r4
 8003eae:	609a      	str	r2, [r3, #8]
 8003eb0:	e112      	b.n	80040d8 <UART_SetConfig+0x98c>
 8003eb2:	bf00      	nop
 8003eb4:	40011000 	.word	0x40011000
 8003eb8:	40011400 	.word	0x40011400
 8003ebc:	51eb851f 	.word	0x51eb851f
      pclk = HAL_RCC_GetPCLK1Freq();
 8003ec0:	f7ff f806 	bl	8002ed0 <HAL_RCC_GetPCLK1Freq>
 8003ec4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003ec8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003ecc:	2200      	movs	r2, #0
 8003ece:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8003ed2:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8003ed6:	e9d7 8946 	ldrd	r8, r9, [r7, #280]	; 0x118
 8003eda:	4642      	mov	r2, r8
 8003edc:	464b      	mov	r3, r9
 8003ede:	1891      	adds	r1, r2, r2
 8003ee0:	6239      	str	r1, [r7, #32]
 8003ee2:	415b      	adcs	r3, r3
 8003ee4:	627b      	str	r3, [r7, #36]	; 0x24
 8003ee6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003eea:	4641      	mov	r1, r8
 8003eec:	1854      	adds	r4, r2, r1
 8003eee:	4649      	mov	r1, r9
 8003ef0:	eb43 0501 	adc.w	r5, r3, r1
 8003ef4:	f04f 0200 	mov.w	r2, #0
 8003ef8:	f04f 0300 	mov.w	r3, #0
 8003efc:	00eb      	lsls	r3, r5, #3
 8003efe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003f02:	00e2      	lsls	r2, r4, #3
 8003f04:	4614      	mov	r4, r2
 8003f06:	461d      	mov	r5, r3
 8003f08:	4643      	mov	r3, r8
 8003f0a:	18e3      	adds	r3, r4, r3
 8003f0c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8003f10:	464b      	mov	r3, r9
 8003f12:	eb45 0303 	adc.w	r3, r5, r3
 8003f16:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8003f1a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	2200      	movs	r2, #0
 8003f22:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8003f26:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 8003f2a:	f04f 0200 	mov.w	r2, #0
 8003f2e:	f04f 0300 	mov.w	r3, #0
 8003f32:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 8003f36:	4629      	mov	r1, r5
 8003f38:	008b      	lsls	r3, r1, #2
 8003f3a:	4621      	mov	r1, r4
 8003f3c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003f40:	4621      	mov	r1, r4
 8003f42:	008a      	lsls	r2, r1, #2
 8003f44:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8003f48:	f7fc f992 	bl	8000270 <__aeabi_uldivmod>
 8003f4c:	4602      	mov	r2, r0
 8003f4e:	460b      	mov	r3, r1
 8003f50:	4b64      	ldr	r3, [pc, #400]	; (80040e4 <UART_SetConfig+0x998>)
 8003f52:	fba3 2302 	umull	r2, r3, r3, r2
 8003f56:	095b      	lsrs	r3, r3, #5
 8003f58:	011c      	lsls	r4, r3, #4
 8003f5a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003f5e:	2200      	movs	r2, #0
 8003f60:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003f64:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 8003f68:	e9d7 8940 	ldrd	r8, r9, [r7, #256]	; 0x100
 8003f6c:	4642      	mov	r2, r8
 8003f6e:	464b      	mov	r3, r9
 8003f70:	1891      	adds	r1, r2, r2
 8003f72:	61b9      	str	r1, [r7, #24]
 8003f74:	415b      	adcs	r3, r3
 8003f76:	61fb      	str	r3, [r7, #28]
 8003f78:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003f7c:	4641      	mov	r1, r8
 8003f7e:	1851      	adds	r1, r2, r1
 8003f80:	6139      	str	r1, [r7, #16]
 8003f82:	4649      	mov	r1, r9
 8003f84:	414b      	adcs	r3, r1
 8003f86:	617b      	str	r3, [r7, #20]
 8003f88:	f04f 0200 	mov.w	r2, #0
 8003f8c:	f04f 0300 	mov.w	r3, #0
 8003f90:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003f94:	4659      	mov	r1, fp
 8003f96:	00cb      	lsls	r3, r1, #3
 8003f98:	4651      	mov	r1, sl
 8003f9a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f9e:	4651      	mov	r1, sl
 8003fa0:	00ca      	lsls	r2, r1, #3
 8003fa2:	4610      	mov	r0, r2
 8003fa4:	4619      	mov	r1, r3
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	4642      	mov	r2, r8
 8003faa:	189b      	adds	r3, r3, r2
 8003fac:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003fb0:	464b      	mov	r3, r9
 8003fb2:	460a      	mov	r2, r1
 8003fb4:	eb42 0303 	adc.w	r3, r2, r3
 8003fb8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003fbc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8003fc8:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8003fcc:	f04f 0200 	mov.w	r2, #0
 8003fd0:	f04f 0300 	mov.w	r3, #0
 8003fd4:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	; 0xf0
 8003fd8:	4649      	mov	r1, r9
 8003fda:	008b      	lsls	r3, r1, #2
 8003fdc:	4641      	mov	r1, r8
 8003fde:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003fe2:	4641      	mov	r1, r8
 8003fe4:	008a      	lsls	r2, r1, #2
 8003fe6:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 8003fea:	f7fc f941 	bl	8000270 <__aeabi_uldivmod>
 8003fee:	4602      	mov	r2, r0
 8003ff0:	460b      	mov	r3, r1
 8003ff2:	4b3c      	ldr	r3, [pc, #240]	; (80040e4 <UART_SetConfig+0x998>)
 8003ff4:	fba3 1302 	umull	r1, r3, r3, r2
 8003ff8:	095b      	lsrs	r3, r3, #5
 8003ffa:	2164      	movs	r1, #100	; 0x64
 8003ffc:	fb01 f303 	mul.w	r3, r1, r3
 8004000:	1ad3      	subs	r3, r2, r3
 8004002:	011b      	lsls	r3, r3, #4
 8004004:	3332      	adds	r3, #50	; 0x32
 8004006:	4a37      	ldr	r2, [pc, #220]	; (80040e4 <UART_SetConfig+0x998>)
 8004008:	fba2 2303 	umull	r2, r3, r2, r3
 800400c:	095b      	lsrs	r3, r3, #5
 800400e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004012:	441c      	add	r4, r3
 8004014:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004018:	2200      	movs	r2, #0
 800401a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800401e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004022:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 8004026:	4642      	mov	r2, r8
 8004028:	464b      	mov	r3, r9
 800402a:	1891      	adds	r1, r2, r2
 800402c:	60b9      	str	r1, [r7, #8]
 800402e:	415b      	adcs	r3, r3
 8004030:	60fb      	str	r3, [r7, #12]
 8004032:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004036:	4641      	mov	r1, r8
 8004038:	1851      	adds	r1, r2, r1
 800403a:	6039      	str	r1, [r7, #0]
 800403c:	4649      	mov	r1, r9
 800403e:	414b      	adcs	r3, r1
 8004040:	607b      	str	r3, [r7, #4]
 8004042:	f04f 0200 	mov.w	r2, #0
 8004046:	f04f 0300 	mov.w	r3, #0
 800404a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800404e:	4659      	mov	r1, fp
 8004050:	00cb      	lsls	r3, r1, #3
 8004052:	4651      	mov	r1, sl
 8004054:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004058:	4651      	mov	r1, sl
 800405a:	00ca      	lsls	r2, r1, #3
 800405c:	4610      	mov	r0, r2
 800405e:	4619      	mov	r1, r3
 8004060:	4603      	mov	r3, r0
 8004062:	4642      	mov	r2, r8
 8004064:	189b      	adds	r3, r3, r2
 8004066:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800406a:	464b      	mov	r3, r9
 800406c:	460a      	mov	r2, r1
 800406e:	eb42 0303 	adc.w	r3, r2, r3
 8004072:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004076:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	2200      	movs	r2, #0
 800407e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004082:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004086:	f04f 0200 	mov.w	r2, #0
 800408a:	f04f 0300 	mov.w	r3, #0
 800408e:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	; 0xd8
 8004092:	4649      	mov	r1, r9
 8004094:	008b      	lsls	r3, r1, #2
 8004096:	4641      	mov	r1, r8
 8004098:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800409c:	4641      	mov	r1, r8
 800409e:	008a      	lsls	r2, r1, #2
 80040a0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80040a4:	f7fc f8e4 	bl	8000270 <__aeabi_uldivmod>
 80040a8:	4602      	mov	r2, r0
 80040aa:	460b      	mov	r3, r1
 80040ac:	4b0d      	ldr	r3, [pc, #52]	; (80040e4 <UART_SetConfig+0x998>)
 80040ae:	fba3 1302 	umull	r1, r3, r3, r2
 80040b2:	095b      	lsrs	r3, r3, #5
 80040b4:	2164      	movs	r1, #100	; 0x64
 80040b6:	fb01 f303 	mul.w	r3, r1, r3
 80040ba:	1ad3      	subs	r3, r2, r3
 80040bc:	011b      	lsls	r3, r3, #4
 80040be:	3332      	adds	r3, #50	; 0x32
 80040c0:	4a08      	ldr	r2, [pc, #32]	; (80040e4 <UART_SetConfig+0x998>)
 80040c2:	fba2 2303 	umull	r2, r3, r2, r3
 80040c6:	095b      	lsrs	r3, r3, #5
 80040c8:	f003 020f 	and.w	r2, r3, #15
 80040cc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4422      	add	r2, r4
 80040d4:	609a      	str	r2, [r3, #8]
}
 80040d6:	e7ff      	b.n	80040d8 <UART_SetConfig+0x98c>
 80040d8:	bf00      	nop
 80040da:	f507 7702 	add.w	r7, r7, #520	; 0x208
 80040de:	46bd      	mov	sp, r7
 80040e0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80040e4:	51eb851f 	.word	0x51eb851f

080040e8 <__errno>:
 80040e8:	4b01      	ldr	r3, [pc, #4]	; (80040f0 <__errno+0x8>)
 80040ea:	6818      	ldr	r0, [r3, #0]
 80040ec:	4770      	bx	lr
 80040ee:	bf00      	nop
 80040f0:	2000007c 	.word	0x2000007c

080040f4 <__libc_init_array>:
 80040f4:	b570      	push	{r4, r5, r6, lr}
 80040f6:	4d0d      	ldr	r5, [pc, #52]	; (800412c <__libc_init_array+0x38>)
 80040f8:	4c0d      	ldr	r4, [pc, #52]	; (8004130 <__libc_init_array+0x3c>)
 80040fa:	1b64      	subs	r4, r4, r5
 80040fc:	10a4      	asrs	r4, r4, #2
 80040fe:	2600      	movs	r6, #0
 8004100:	42a6      	cmp	r6, r4
 8004102:	d109      	bne.n	8004118 <__libc_init_array+0x24>
 8004104:	4d0b      	ldr	r5, [pc, #44]	; (8004134 <__libc_init_array+0x40>)
 8004106:	4c0c      	ldr	r4, [pc, #48]	; (8004138 <__libc_init_array+0x44>)
 8004108:	f000 fc96 	bl	8004a38 <_init>
 800410c:	1b64      	subs	r4, r4, r5
 800410e:	10a4      	asrs	r4, r4, #2
 8004110:	2600      	movs	r6, #0
 8004112:	42a6      	cmp	r6, r4
 8004114:	d105      	bne.n	8004122 <__libc_init_array+0x2e>
 8004116:	bd70      	pop	{r4, r5, r6, pc}
 8004118:	f855 3b04 	ldr.w	r3, [r5], #4
 800411c:	4798      	blx	r3
 800411e:	3601      	adds	r6, #1
 8004120:	e7ee      	b.n	8004100 <__libc_init_array+0xc>
 8004122:	f855 3b04 	ldr.w	r3, [r5], #4
 8004126:	4798      	blx	r3
 8004128:	3601      	adds	r6, #1
 800412a:	e7f2      	b.n	8004112 <__libc_init_array+0x1e>
 800412c:	08006110 	.word	0x08006110
 8004130:	08006110 	.word	0x08006110
 8004134:	08006110 	.word	0x08006110
 8004138:	08006114 	.word	0x08006114

0800413c <memset>:
 800413c:	4402      	add	r2, r0
 800413e:	4603      	mov	r3, r0
 8004140:	4293      	cmp	r3, r2
 8004142:	d100      	bne.n	8004146 <memset+0xa>
 8004144:	4770      	bx	lr
 8004146:	f803 1b01 	strb.w	r1, [r3], #1
 800414a:	e7f9      	b.n	8004140 <memset+0x4>

0800414c <siprintf>:
 800414c:	b40e      	push	{r1, r2, r3}
 800414e:	b500      	push	{lr}
 8004150:	b09c      	sub	sp, #112	; 0x70
 8004152:	ab1d      	add	r3, sp, #116	; 0x74
 8004154:	9002      	str	r0, [sp, #8]
 8004156:	9006      	str	r0, [sp, #24]
 8004158:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800415c:	4809      	ldr	r0, [pc, #36]	; (8004184 <siprintf+0x38>)
 800415e:	9107      	str	r1, [sp, #28]
 8004160:	9104      	str	r1, [sp, #16]
 8004162:	4909      	ldr	r1, [pc, #36]	; (8004188 <siprintf+0x3c>)
 8004164:	f853 2b04 	ldr.w	r2, [r3], #4
 8004168:	9105      	str	r1, [sp, #20]
 800416a:	6800      	ldr	r0, [r0, #0]
 800416c:	9301      	str	r3, [sp, #4]
 800416e:	a902      	add	r1, sp, #8
 8004170:	f000 f870 	bl	8004254 <_svfiprintf_r>
 8004174:	9b02      	ldr	r3, [sp, #8]
 8004176:	2200      	movs	r2, #0
 8004178:	701a      	strb	r2, [r3, #0]
 800417a:	b01c      	add	sp, #112	; 0x70
 800417c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004180:	b003      	add	sp, #12
 8004182:	4770      	bx	lr
 8004184:	2000007c 	.word	0x2000007c
 8004188:	ffff0208 	.word	0xffff0208

0800418c <strcpy>:
 800418c:	4603      	mov	r3, r0
 800418e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004192:	f803 2b01 	strb.w	r2, [r3], #1
 8004196:	2a00      	cmp	r2, #0
 8004198:	d1f9      	bne.n	800418e <strcpy+0x2>
 800419a:	4770      	bx	lr

0800419c <__ssputs_r>:
 800419c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80041a0:	688e      	ldr	r6, [r1, #8]
 80041a2:	429e      	cmp	r6, r3
 80041a4:	4682      	mov	sl, r0
 80041a6:	460c      	mov	r4, r1
 80041a8:	4690      	mov	r8, r2
 80041aa:	461f      	mov	r7, r3
 80041ac:	d838      	bhi.n	8004220 <__ssputs_r+0x84>
 80041ae:	898a      	ldrh	r2, [r1, #12]
 80041b0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80041b4:	d032      	beq.n	800421c <__ssputs_r+0x80>
 80041b6:	6825      	ldr	r5, [r4, #0]
 80041b8:	6909      	ldr	r1, [r1, #16]
 80041ba:	eba5 0901 	sub.w	r9, r5, r1
 80041be:	6965      	ldr	r5, [r4, #20]
 80041c0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80041c4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80041c8:	3301      	adds	r3, #1
 80041ca:	444b      	add	r3, r9
 80041cc:	106d      	asrs	r5, r5, #1
 80041ce:	429d      	cmp	r5, r3
 80041d0:	bf38      	it	cc
 80041d2:	461d      	movcc	r5, r3
 80041d4:	0553      	lsls	r3, r2, #21
 80041d6:	d531      	bpl.n	800423c <__ssputs_r+0xa0>
 80041d8:	4629      	mov	r1, r5
 80041da:	f000 fb63 	bl	80048a4 <_malloc_r>
 80041de:	4606      	mov	r6, r0
 80041e0:	b950      	cbnz	r0, 80041f8 <__ssputs_r+0x5c>
 80041e2:	230c      	movs	r3, #12
 80041e4:	f8ca 3000 	str.w	r3, [sl]
 80041e8:	89a3      	ldrh	r3, [r4, #12]
 80041ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80041ee:	81a3      	strh	r3, [r4, #12]
 80041f0:	f04f 30ff 	mov.w	r0, #4294967295
 80041f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041f8:	6921      	ldr	r1, [r4, #16]
 80041fa:	464a      	mov	r2, r9
 80041fc:	f000 fabe 	bl	800477c <memcpy>
 8004200:	89a3      	ldrh	r3, [r4, #12]
 8004202:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004206:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800420a:	81a3      	strh	r3, [r4, #12]
 800420c:	6126      	str	r6, [r4, #16]
 800420e:	6165      	str	r5, [r4, #20]
 8004210:	444e      	add	r6, r9
 8004212:	eba5 0509 	sub.w	r5, r5, r9
 8004216:	6026      	str	r6, [r4, #0]
 8004218:	60a5      	str	r5, [r4, #8]
 800421a:	463e      	mov	r6, r7
 800421c:	42be      	cmp	r6, r7
 800421e:	d900      	bls.n	8004222 <__ssputs_r+0x86>
 8004220:	463e      	mov	r6, r7
 8004222:	6820      	ldr	r0, [r4, #0]
 8004224:	4632      	mov	r2, r6
 8004226:	4641      	mov	r1, r8
 8004228:	f000 fab6 	bl	8004798 <memmove>
 800422c:	68a3      	ldr	r3, [r4, #8]
 800422e:	1b9b      	subs	r3, r3, r6
 8004230:	60a3      	str	r3, [r4, #8]
 8004232:	6823      	ldr	r3, [r4, #0]
 8004234:	4433      	add	r3, r6
 8004236:	6023      	str	r3, [r4, #0]
 8004238:	2000      	movs	r0, #0
 800423a:	e7db      	b.n	80041f4 <__ssputs_r+0x58>
 800423c:	462a      	mov	r2, r5
 800423e:	f000 fba5 	bl	800498c <_realloc_r>
 8004242:	4606      	mov	r6, r0
 8004244:	2800      	cmp	r0, #0
 8004246:	d1e1      	bne.n	800420c <__ssputs_r+0x70>
 8004248:	6921      	ldr	r1, [r4, #16]
 800424a:	4650      	mov	r0, sl
 800424c:	f000 fabe 	bl	80047cc <_free_r>
 8004250:	e7c7      	b.n	80041e2 <__ssputs_r+0x46>
	...

08004254 <_svfiprintf_r>:
 8004254:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004258:	4698      	mov	r8, r3
 800425a:	898b      	ldrh	r3, [r1, #12]
 800425c:	061b      	lsls	r3, r3, #24
 800425e:	b09d      	sub	sp, #116	; 0x74
 8004260:	4607      	mov	r7, r0
 8004262:	460d      	mov	r5, r1
 8004264:	4614      	mov	r4, r2
 8004266:	d50e      	bpl.n	8004286 <_svfiprintf_r+0x32>
 8004268:	690b      	ldr	r3, [r1, #16]
 800426a:	b963      	cbnz	r3, 8004286 <_svfiprintf_r+0x32>
 800426c:	2140      	movs	r1, #64	; 0x40
 800426e:	f000 fb19 	bl	80048a4 <_malloc_r>
 8004272:	6028      	str	r0, [r5, #0]
 8004274:	6128      	str	r0, [r5, #16]
 8004276:	b920      	cbnz	r0, 8004282 <_svfiprintf_r+0x2e>
 8004278:	230c      	movs	r3, #12
 800427a:	603b      	str	r3, [r7, #0]
 800427c:	f04f 30ff 	mov.w	r0, #4294967295
 8004280:	e0d1      	b.n	8004426 <_svfiprintf_r+0x1d2>
 8004282:	2340      	movs	r3, #64	; 0x40
 8004284:	616b      	str	r3, [r5, #20]
 8004286:	2300      	movs	r3, #0
 8004288:	9309      	str	r3, [sp, #36]	; 0x24
 800428a:	2320      	movs	r3, #32
 800428c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004290:	f8cd 800c 	str.w	r8, [sp, #12]
 8004294:	2330      	movs	r3, #48	; 0x30
 8004296:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004440 <_svfiprintf_r+0x1ec>
 800429a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800429e:	f04f 0901 	mov.w	r9, #1
 80042a2:	4623      	mov	r3, r4
 80042a4:	469a      	mov	sl, r3
 80042a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80042aa:	b10a      	cbz	r2, 80042b0 <_svfiprintf_r+0x5c>
 80042ac:	2a25      	cmp	r2, #37	; 0x25
 80042ae:	d1f9      	bne.n	80042a4 <_svfiprintf_r+0x50>
 80042b0:	ebba 0b04 	subs.w	fp, sl, r4
 80042b4:	d00b      	beq.n	80042ce <_svfiprintf_r+0x7a>
 80042b6:	465b      	mov	r3, fp
 80042b8:	4622      	mov	r2, r4
 80042ba:	4629      	mov	r1, r5
 80042bc:	4638      	mov	r0, r7
 80042be:	f7ff ff6d 	bl	800419c <__ssputs_r>
 80042c2:	3001      	adds	r0, #1
 80042c4:	f000 80aa 	beq.w	800441c <_svfiprintf_r+0x1c8>
 80042c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80042ca:	445a      	add	r2, fp
 80042cc:	9209      	str	r2, [sp, #36]	; 0x24
 80042ce:	f89a 3000 	ldrb.w	r3, [sl]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	f000 80a2 	beq.w	800441c <_svfiprintf_r+0x1c8>
 80042d8:	2300      	movs	r3, #0
 80042da:	f04f 32ff 	mov.w	r2, #4294967295
 80042de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80042e2:	f10a 0a01 	add.w	sl, sl, #1
 80042e6:	9304      	str	r3, [sp, #16]
 80042e8:	9307      	str	r3, [sp, #28]
 80042ea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80042ee:	931a      	str	r3, [sp, #104]	; 0x68
 80042f0:	4654      	mov	r4, sl
 80042f2:	2205      	movs	r2, #5
 80042f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80042f8:	4851      	ldr	r0, [pc, #324]	; (8004440 <_svfiprintf_r+0x1ec>)
 80042fa:	f7fb ff69 	bl	80001d0 <memchr>
 80042fe:	9a04      	ldr	r2, [sp, #16]
 8004300:	b9d8      	cbnz	r0, 800433a <_svfiprintf_r+0xe6>
 8004302:	06d0      	lsls	r0, r2, #27
 8004304:	bf44      	itt	mi
 8004306:	2320      	movmi	r3, #32
 8004308:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800430c:	0711      	lsls	r1, r2, #28
 800430e:	bf44      	itt	mi
 8004310:	232b      	movmi	r3, #43	; 0x2b
 8004312:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004316:	f89a 3000 	ldrb.w	r3, [sl]
 800431a:	2b2a      	cmp	r3, #42	; 0x2a
 800431c:	d015      	beq.n	800434a <_svfiprintf_r+0xf6>
 800431e:	9a07      	ldr	r2, [sp, #28]
 8004320:	4654      	mov	r4, sl
 8004322:	2000      	movs	r0, #0
 8004324:	f04f 0c0a 	mov.w	ip, #10
 8004328:	4621      	mov	r1, r4
 800432a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800432e:	3b30      	subs	r3, #48	; 0x30
 8004330:	2b09      	cmp	r3, #9
 8004332:	d94e      	bls.n	80043d2 <_svfiprintf_r+0x17e>
 8004334:	b1b0      	cbz	r0, 8004364 <_svfiprintf_r+0x110>
 8004336:	9207      	str	r2, [sp, #28]
 8004338:	e014      	b.n	8004364 <_svfiprintf_r+0x110>
 800433a:	eba0 0308 	sub.w	r3, r0, r8
 800433e:	fa09 f303 	lsl.w	r3, r9, r3
 8004342:	4313      	orrs	r3, r2
 8004344:	9304      	str	r3, [sp, #16]
 8004346:	46a2      	mov	sl, r4
 8004348:	e7d2      	b.n	80042f0 <_svfiprintf_r+0x9c>
 800434a:	9b03      	ldr	r3, [sp, #12]
 800434c:	1d19      	adds	r1, r3, #4
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	9103      	str	r1, [sp, #12]
 8004352:	2b00      	cmp	r3, #0
 8004354:	bfbb      	ittet	lt
 8004356:	425b      	neglt	r3, r3
 8004358:	f042 0202 	orrlt.w	r2, r2, #2
 800435c:	9307      	strge	r3, [sp, #28]
 800435e:	9307      	strlt	r3, [sp, #28]
 8004360:	bfb8      	it	lt
 8004362:	9204      	strlt	r2, [sp, #16]
 8004364:	7823      	ldrb	r3, [r4, #0]
 8004366:	2b2e      	cmp	r3, #46	; 0x2e
 8004368:	d10c      	bne.n	8004384 <_svfiprintf_r+0x130>
 800436a:	7863      	ldrb	r3, [r4, #1]
 800436c:	2b2a      	cmp	r3, #42	; 0x2a
 800436e:	d135      	bne.n	80043dc <_svfiprintf_r+0x188>
 8004370:	9b03      	ldr	r3, [sp, #12]
 8004372:	1d1a      	adds	r2, r3, #4
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	9203      	str	r2, [sp, #12]
 8004378:	2b00      	cmp	r3, #0
 800437a:	bfb8      	it	lt
 800437c:	f04f 33ff 	movlt.w	r3, #4294967295
 8004380:	3402      	adds	r4, #2
 8004382:	9305      	str	r3, [sp, #20]
 8004384:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004450 <_svfiprintf_r+0x1fc>
 8004388:	7821      	ldrb	r1, [r4, #0]
 800438a:	2203      	movs	r2, #3
 800438c:	4650      	mov	r0, sl
 800438e:	f7fb ff1f 	bl	80001d0 <memchr>
 8004392:	b140      	cbz	r0, 80043a6 <_svfiprintf_r+0x152>
 8004394:	2340      	movs	r3, #64	; 0x40
 8004396:	eba0 000a 	sub.w	r0, r0, sl
 800439a:	fa03 f000 	lsl.w	r0, r3, r0
 800439e:	9b04      	ldr	r3, [sp, #16]
 80043a0:	4303      	orrs	r3, r0
 80043a2:	3401      	adds	r4, #1
 80043a4:	9304      	str	r3, [sp, #16]
 80043a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80043aa:	4826      	ldr	r0, [pc, #152]	; (8004444 <_svfiprintf_r+0x1f0>)
 80043ac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80043b0:	2206      	movs	r2, #6
 80043b2:	f7fb ff0d 	bl	80001d0 <memchr>
 80043b6:	2800      	cmp	r0, #0
 80043b8:	d038      	beq.n	800442c <_svfiprintf_r+0x1d8>
 80043ba:	4b23      	ldr	r3, [pc, #140]	; (8004448 <_svfiprintf_r+0x1f4>)
 80043bc:	bb1b      	cbnz	r3, 8004406 <_svfiprintf_r+0x1b2>
 80043be:	9b03      	ldr	r3, [sp, #12]
 80043c0:	3307      	adds	r3, #7
 80043c2:	f023 0307 	bic.w	r3, r3, #7
 80043c6:	3308      	adds	r3, #8
 80043c8:	9303      	str	r3, [sp, #12]
 80043ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80043cc:	4433      	add	r3, r6
 80043ce:	9309      	str	r3, [sp, #36]	; 0x24
 80043d0:	e767      	b.n	80042a2 <_svfiprintf_r+0x4e>
 80043d2:	fb0c 3202 	mla	r2, ip, r2, r3
 80043d6:	460c      	mov	r4, r1
 80043d8:	2001      	movs	r0, #1
 80043da:	e7a5      	b.n	8004328 <_svfiprintf_r+0xd4>
 80043dc:	2300      	movs	r3, #0
 80043de:	3401      	adds	r4, #1
 80043e0:	9305      	str	r3, [sp, #20]
 80043e2:	4619      	mov	r1, r3
 80043e4:	f04f 0c0a 	mov.w	ip, #10
 80043e8:	4620      	mov	r0, r4
 80043ea:	f810 2b01 	ldrb.w	r2, [r0], #1
 80043ee:	3a30      	subs	r2, #48	; 0x30
 80043f0:	2a09      	cmp	r2, #9
 80043f2:	d903      	bls.n	80043fc <_svfiprintf_r+0x1a8>
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d0c5      	beq.n	8004384 <_svfiprintf_r+0x130>
 80043f8:	9105      	str	r1, [sp, #20]
 80043fa:	e7c3      	b.n	8004384 <_svfiprintf_r+0x130>
 80043fc:	fb0c 2101 	mla	r1, ip, r1, r2
 8004400:	4604      	mov	r4, r0
 8004402:	2301      	movs	r3, #1
 8004404:	e7f0      	b.n	80043e8 <_svfiprintf_r+0x194>
 8004406:	ab03      	add	r3, sp, #12
 8004408:	9300      	str	r3, [sp, #0]
 800440a:	462a      	mov	r2, r5
 800440c:	4b0f      	ldr	r3, [pc, #60]	; (800444c <_svfiprintf_r+0x1f8>)
 800440e:	a904      	add	r1, sp, #16
 8004410:	4638      	mov	r0, r7
 8004412:	f3af 8000 	nop.w
 8004416:	1c42      	adds	r2, r0, #1
 8004418:	4606      	mov	r6, r0
 800441a:	d1d6      	bne.n	80043ca <_svfiprintf_r+0x176>
 800441c:	89ab      	ldrh	r3, [r5, #12]
 800441e:	065b      	lsls	r3, r3, #25
 8004420:	f53f af2c 	bmi.w	800427c <_svfiprintf_r+0x28>
 8004424:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004426:	b01d      	add	sp, #116	; 0x74
 8004428:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800442c:	ab03      	add	r3, sp, #12
 800442e:	9300      	str	r3, [sp, #0]
 8004430:	462a      	mov	r2, r5
 8004432:	4b06      	ldr	r3, [pc, #24]	; (800444c <_svfiprintf_r+0x1f8>)
 8004434:	a904      	add	r1, sp, #16
 8004436:	4638      	mov	r0, r7
 8004438:	f000 f87a 	bl	8004530 <_printf_i>
 800443c:	e7eb      	b.n	8004416 <_svfiprintf_r+0x1c2>
 800443e:	bf00      	nop
 8004440:	080060d4 	.word	0x080060d4
 8004444:	080060de 	.word	0x080060de
 8004448:	00000000 	.word	0x00000000
 800444c:	0800419d 	.word	0x0800419d
 8004450:	080060da 	.word	0x080060da

08004454 <_printf_common>:
 8004454:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004458:	4616      	mov	r6, r2
 800445a:	4699      	mov	r9, r3
 800445c:	688a      	ldr	r2, [r1, #8]
 800445e:	690b      	ldr	r3, [r1, #16]
 8004460:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004464:	4293      	cmp	r3, r2
 8004466:	bfb8      	it	lt
 8004468:	4613      	movlt	r3, r2
 800446a:	6033      	str	r3, [r6, #0]
 800446c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004470:	4607      	mov	r7, r0
 8004472:	460c      	mov	r4, r1
 8004474:	b10a      	cbz	r2, 800447a <_printf_common+0x26>
 8004476:	3301      	adds	r3, #1
 8004478:	6033      	str	r3, [r6, #0]
 800447a:	6823      	ldr	r3, [r4, #0]
 800447c:	0699      	lsls	r1, r3, #26
 800447e:	bf42      	ittt	mi
 8004480:	6833      	ldrmi	r3, [r6, #0]
 8004482:	3302      	addmi	r3, #2
 8004484:	6033      	strmi	r3, [r6, #0]
 8004486:	6825      	ldr	r5, [r4, #0]
 8004488:	f015 0506 	ands.w	r5, r5, #6
 800448c:	d106      	bne.n	800449c <_printf_common+0x48>
 800448e:	f104 0a19 	add.w	sl, r4, #25
 8004492:	68e3      	ldr	r3, [r4, #12]
 8004494:	6832      	ldr	r2, [r6, #0]
 8004496:	1a9b      	subs	r3, r3, r2
 8004498:	42ab      	cmp	r3, r5
 800449a:	dc26      	bgt.n	80044ea <_printf_common+0x96>
 800449c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80044a0:	1e13      	subs	r3, r2, #0
 80044a2:	6822      	ldr	r2, [r4, #0]
 80044a4:	bf18      	it	ne
 80044a6:	2301      	movne	r3, #1
 80044a8:	0692      	lsls	r2, r2, #26
 80044aa:	d42b      	bmi.n	8004504 <_printf_common+0xb0>
 80044ac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80044b0:	4649      	mov	r1, r9
 80044b2:	4638      	mov	r0, r7
 80044b4:	47c0      	blx	r8
 80044b6:	3001      	adds	r0, #1
 80044b8:	d01e      	beq.n	80044f8 <_printf_common+0xa4>
 80044ba:	6823      	ldr	r3, [r4, #0]
 80044bc:	68e5      	ldr	r5, [r4, #12]
 80044be:	6832      	ldr	r2, [r6, #0]
 80044c0:	f003 0306 	and.w	r3, r3, #6
 80044c4:	2b04      	cmp	r3, #4
 80044c6:	bf08      	it	eq
 80044c8:	1aad      	subeq	r5, r5, r2
 80044ca:	68a3      	ldr	r3, [r4, #8]
 80044cc:	6922      	ldr	r2, [r4, #16]
 80044ce:	bf0c      	ite	eq
 80044d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80044d4:	2500      	movne	r5, #0
 80044d6:	4293      	cmp	r3, r2
 80044d8:	bfc4      	itt	gt
 80044da:	1a9b      	subgt	r3, r3, r2
 80044dc:	18ed      	addgt	r5, r5, r3
 80044de:	2600      	movs	r6, #0
 80044e0:	341a      	adds	r4, #26
 80044e2:	42b5      	cmp	r5, r6
 80044e4:	d11a      	bne.n	800451c <_printf_common+0xc8>
 80044e6:	2000      	movs	r0, #0
 80044e8:	e008      	b.n	80044fc <_printf_common+0xa8>
 80044ea:	2301      	movs	r3, #1
 80044ec:	4652      	mov	r2, sl
 80044ee:	4649      	mov	r1, r9
 80044f0:	4638      	mov	r0, r7
 80044f2:	47c0      	blx	r8
 80044f4:	3001      	adds	r0, #1
 80044f6:	d103      	bne.n	8004500 <_printf_common+0xac>
 80044f8:	f04f 30ff 	mov.w	r0, #4294967295
 80044fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004500:	3501      	adds	r5, #1
 8004502:	e7c6      	b.n	8004492 <_printf_common+0x3e>
 8004504:	18e1      	adds	r1, r4, r3
 8004506:	1c5a      	adds	r2, r3, #1
 8004508:	2030      	movs	r0, #48	; 0x30
 800450a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800450e:	4422      	add	r2, r4
 8004510:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004514:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004518:	3302      	adds	r3, #2
 800451a:	e7c7      	b.n	80044ac <_printf_common+0x58>
 800451c:	2301      	movs	r3, #1
 800451e:	4622      	mov	r2, r4
 8004520:	4649      	mov	r1, r9
 8004522:	4638      	mov	r0, r7
 8004524:	47c0      	blx	r8
 8004526:	3001      	adds	r0, #1
 8004528:	d0e6      	beq.n	80044f8 <_printf_common+0xa4>
 800452a:	3601      	adds	r6, #1
 800452c:	e7d9      	b.n	80044e2 <_printf_common+0x8e>
	...

08004530 <_printf_i>:
 8004530:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004534:	7e0f      	ldrb	r7, [r1, #24]
 8004536:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004538:	2f78      	cmp	r7, #120	; 0x78
 800453a:	4691      	mov	r9, r2
 800453c:	4680      	mov	r8, r0
 800453e:	460c      	mov	r4, r1
 8004540:	469a      	mov	sl, r3
 8004542:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004546:	d807      	bhi.n	8004558 <_printf_i+0x28>
 8004548:	2f62      	cmp	r7, #98	; 0x62
 800454a:	d80a      	bhi.n	8004562 <_printf_i+0x32>
 800454c:	2f00      	cmp	r7, #0
 800454e:	f000 80d8 	beq.w	8004702 <_printf_i+0x1d2>
 8004552:	2f58      	cmp	r7, #88	; 0x58
 8004554:	f000 80a3 	beq.w	800469e <_printf_i+0x16e>
 8004558:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800455c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004560:	e03a      	b.n	80045d8 <_printf_i+0xa8>
 8004562:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004566:	2b15      	cmp	r3, #21
 8004568:	d8f6      	bhi.n	8004558 <_printf_i+0x28>
 800456a:	a101      	add	r1, pc, #4	; (adr r1, 8004570 <_printf_i+0x40>)
 800456c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004570:	080045c9 	.word	0x080045c9
 8004574:	080045dd 	.word	0x080045dd
 8004578:	08004559 	.word	0x08004559
 800457c:	08004559 	.word	0x08004559
 8004580:	08004559 	.word	0x08004559
 8004584:	08004559 	.word	0x08004559
 8004588:	080045dd 	.word	0x080045dd
 800458c:	08004559 	.word	0x08004559
 8004590:	08004559 	.word	0x08004559
 8004594:	08004559 	.word	0x08004559
 8004598:	08004559 	.word	0x08004559
 800459c:	080046e9 	.word	0x080046e9
 80045a0:	0800460d 	.word	0x0800460d
 80045a4:	080046cb 	.word	0x080046cb
 80045a8:	08004559 	.word	0x08004559
 80045ac:	08004559 	.word	0x08004559
 80045b0:	0800470b 	.word	0x0800470b
 80045b4:	08004559 	.word	0x08004559
 80045b8:	0800460d 	.word	0x0800460d
 80045bc:	08004559 	.word	0x08004559
 80045c0:	08004559 	.word	0x08004559
 80045c4:	080046d3 	.word	0x080046d3
 80045c8:	682b      	ldr	r3, [r5, #0]
 80045ca:	1d1a      	adds	r2, r3, #4
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	602a      	str	r2, [r5, #0]
 80045d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80045d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80045d8:	2301      	movs	r3, #1
 80045da:	e0a3      	b.n	8004724 <_printf_i+0x1f4>
 80045dc:	6820      	ldr	r0, [r4, #0]
 80045de:	6829      	ldr	r1, [r5, #0]
 80045e0:	0606      	lsls	r6, r0, #24
 80045e2:	f101 0304 	add.w	r3, r1, #4
 80045e6:	d50a      	bpl.n	80045fe <_printf_i+0xce>
 80045e8:	680e      	ldr	r6, [r1, #0]
 80045ea:	602b      	str	r3, [r5, #0]
 80045ec:	2e00      	cmp	r6, #0
 80045ee:	da03      	bge.n	80045f8 <_printf_i+0xc8>
 80045f0:	232d      	movs	r3, #45	; 0x2d
 80045f2:	4276      	negs	r6, r6
 80045f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80045f8:	485e      	ldr	r0, [pc, #376]	; (8004774 <_printf_i+0x244>)
 80045fa:	230a      	movs	r3, #10
 80045fc:	e019      	b.n	8004632 <_printf_i+0x102>
 80045fe:	680e      	ldr	r6, [r1, #0]
 8004600:	602b      	str	r3, [r5, #0]
 8004602:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004606:	bf18      	it	ne
 8004608:	b236      	sxthne	r6, r6
 800460a:	e7ef      	b.n	80045ec <_printf_i+0xbc>
 800460c:	682b      	ldr	r3, [r5, #0]
 800460e:	6820      	ldr	r0, [r4, #0]
 8004610:	1d19      	adds	r1, r3, #4
 8004612:	6029      	str	r1, [r5, #0]
 8004614:	0601      	lsls	r1, r0, #24
 8004616:	d501      	bpl.n	800461c <_printf_i+0xec>
 8004618:	681e      	ldr	r6, [r3, #0]
 800461a:	e002      	b.n	8004622 <_printf_i+0xf2>
 800461c:	0646      	lsls	r6, r0, #25
 800461e:	d5fb      	bpl.n	8004618 <_printf_i+0xe8>
 8004620:	881e      	ldrh	r6, [r3, #0]
 8004622:	4854      	ldr	r0, [pc, #336]	; (8004774 <_printf_i+0x244>)
 8004624:	2f6f      	cmp	r7, #111	; 0x6f
 8004626:	bf0c      	ite	eq
 8004628:	2308      	moveq	r3, #8
 800462a:	230a      	movne	r3, #10
 800462c:	2100      	movs	r1, #0
 800462e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004632:	6865      	ldr	r5, [r4, #4]
 8004634:	60a5      	str	r5, [r4, #8]
 8004636:	2d00      	cmp	r5, #0
 8004638:	bfa2      	ittt	ge
 800463a:	6821      	ldrge	r1, [r4, #0]
 800463c:	f021 0104 	bicge.w	r1, r1, #4
 8004640:	6021      	strge	r1, [r4, #0]
 8004642:	b90e      	cbnz	r6, 8004648 <_printf_i+0x118>
 8004644:	2d00      	cmp	r5, #0
 8004646:	d04d      	beq.n	80046e4 <_printf_i+0x1b4>
 8004648:	4615      	mov	r5, r2
 800464a:	fbb6 f1f3 	udiv	r1, r6, r3
 800464e:	fb03 6711 	mls	r7, r3, r1, r6
 8004652:	5dc7      	ldrb	r7, [r0, r7]
 8004654:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004658:	4637      	mov	r7, r6
 800465a:	42bb      	cmp	r3, r7
 800465c:	460e      	mov	r6, r1
 800465e:	d9f4      	bls.n	800464a <_printf_i+0x11a>
 8004660:	2b08      	cmp	r3, #8
 8004662:	d10b      	bne.n	800467c <_printf_i+0x14c>
 8004664:	6823      	ldr	r3, [r4, #0]
 8004666:	07de      	lsls	r6, r3, #31
 8004668:	d508      	bpl.n	800467c <_printf_i+0x14c>
 800466a:	6923      	ldr	r3, [r4, #16]
 800466c:	6861      	ldr	r1, [r4, #4]
 800466e:	4299      	cmp	r1, r3
 8004670:	bfde      	ittt	le
 8004672:	2330      	movle	r3, #48	; 0x30
 8004674:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004678:	f105 35ff 	addle.w	r5, r5, #4294967295
 800467c:	1b52      	subs	r2, r2, r5
 800467e:	6122      	str	r2, [r4, #16]
 8004680:	f8cd a000 	str.w	sl, [sp]
 8004684:	464b      	mov	r3, r9
 8004686:	aa03      	add	r2, sp, #12
 8004688:	4621      	mov	r1, r4
 800468a:	4640      	mov	r0, r8
 800468c:	f7ff fee2 	bl	8004454 <_printf_common>
 8004690:	3001      	adds	r0, #1
 8004692:	d14c      	bne.n	800472e <_printf_i+0x1fe>
 8004694:	f04f 30ff 	mov.w	r0, #4294967295
 8004698:	b004      	add	sp, #16
 800469a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800469e:	4835      	ldr	r0, [pc, #212]	; (8004774 <_printf_i+0x244>)
 80046a0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80046a4:	6829      	ldr	r1, [r5, #0]
 80046a6:	6823      	ldr	r3, [r4, #0]
 80046a8:	f851 6b04 	ldr.w	r6, [r1], #4
 80046ac:	6029      	str	r1, [r5, #0]
 80046ae:	061d      	lsls	r5, r3, #24
 80046b0:	d514      	bpl.n	80046dc <_printf_i+0x1ac>
 80046b2:	07df      	lsls	r7, r3, #31
 80046b4:	bf44      	itt	mi
 80046b6:	f043 0320 	orrmi.w	r3, r3, #32
 80046ba:	6023      	strmi	r3, [r4, #0]
 80046bc:	b91e      	cbnz	r6, 80046c6 <_printf_i+0x196>
 80046be:	6823      	ldr	r3, [r4, #0]
 80046c0:	f023 0320 	bic.w	r3, r3, #32
 80046c4:	6023      	str	r3, [r4, #0]
 80046c6:	2310      	movs	r3, #16
 80046c8:	e7b0      	b.n	800462c <_printf_i+0xfc>
 80046ca:	6823      	ldr	r3, [r4, #0]
 80046cc:	f043 0320 	orr.w	r3, r3, #32
 80046d0:	6023      	str	r3, [r4, #0]
 80046d2:	2378      	movs	r3, #120	; 0x78
 80046d4:	4828      	ldr	r0, [pc, #160]	; (8004778 <_printf_i+0x248>)
 80046d6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80046da:	e7e3      	b.n	80046a4 <_printf_i+0x174>
 80046dc:	0659      	lsls	r1, r3, #25
 80046de:	bf48      	it	mi
 80046e0:	b2b6      	uxthmi	r6, r6
 80046e2:	e7e6      	b.n	80046b2 <_printf_i+0x182>
 80046e4:	4615      	mov	r5, r2
 80046e6:	e7bb      	b.n	8004660 <_printf_i+0x130>
 80046e8:	682b      	ldr	r3, [r5, #0]
 80046ea:	6826      	ldr	r6, [r4, #0]
 80046ec:	6961      	ldr	r1, [r4, #20]
 80046ee:	1d18      	adds	r0, r3, #4
 80046f0:	6028      	str	r0, [r5, #0]
 80046f2:	0635      	lsls	r5, r6, #24
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	d501      	bpl.n	80046fc <_printf_i+0x1cc>
 80046f8:	6019      	str	r1, [r3, #0]
 80046fa:	e002      	b.n	8004702 <_printf_i+0x1d2>
 80046fc:	0670      	lsls	r0, r6, #25
 80046fe:	d5fb      	bpl.n	80046f8 <_printf_i+0x1c8>
 8004700:	8019      	strh	r1, [r3, #0]
 8004702:	2300      	movs	r3, #0
 8004704:	6123      	str	r3, [r4, #16]
 8004706:	4615      	mov	r5, r2
 8004708:	e7ba      	b.n	8004680 <_printf_i+0x150>
 800470a:	682b      	ldr	r3, [r5, #0]
 800470c:	1d1a      	adds	r2, r3, #4
 800470e:	602a      	str	r2, [r5, #0]
 8004710:	681d      	ldr	r5, [r3, #0]
 8004712:	6862      	ldr	r2, [r4, #4]
 8004714:	2100      	movs	r1, #0
 8004716:	4628      	mov	r0, r5
 8004718:	f7fb fd5a 	bl	80001d0 <memchr>
 800471c:	b108      	cbz	r0, 8004722 <_printf_i+0x1f2>
 800471e:	1b40      	subs	r0, r0, r5
 8004720:	6060      	str	r0, [r4, #4]
 8004722:	6863      	ldr	r3, [r4, #4]
 8004724:	6123      	str	r3, [r4, #16]
 8004726:	2300      	movs	r3, #0
 8004728:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800472c:	e7a8      	b.n	8004680 <_printf_i+0x150>
 800472e:	6923      	ldr	r3, [r4, #16]
 8004730:	462a      	mov	r2, r5
 8004732:	4649      	mov	r1, r9
 8004734:	4640      	mov	r0, r8
 8004736:	47d0      	blx	sl
 8004738:	3001      	adds	r0, #1
 800473a:	d0ab      	beq.n	8004694 <_printf_i+0x164>
 800473c:	6823      	ldr	r3, [r4, #0]
 800473e:	079b      	lsls	r3, r3, #30
 8004740:	d413      	bmi.n	800476a <_printf_i+0x23a>
 8004742:	68e0      	ldr	r0, [r4, #12]
 8004744:	9b03      	ldr	r3, [sp, #12]
 8004746:	4298      	cmp	r0, r3
 8004748:	bfb8      	it	lt
 800474a:	4618      	movlt	r0, r3
 800474c:	e7a4      	b.n	8004698 <_printf_i+0x168>
 800474e:	2301      	movs	r3, #1
 8004750:	4632      	mov	r2, r6
 8004752:	4649      	mov	r1, r9
 8004754:	4640      	mov	r0, r8
 8004756:	47d0      	blx	sl
 8004758:	3001      	adds	r0, #1
 800475a:	d09b      	beq.n	8004694 <_printf_i+0x164>
 800475c:	3501      	adds	r5, #1
 800475e:	68e3      	ldr	r3, [r4, #12]
 8004760:	9903      	ldr	r1, [sp, #12]
 8004762:	1a5b      	subs	r3, r3, r1
 8004764:	42ab      	cmp	r3, r5
 8004766:	dcf2      	bgt.n	800474e <_printf_i+0x21e>
 8004768:	e7eb      	b.n	8004742 <_printf_i+0x212>
 800476a:	2500      	movs	r5, #0
 800476c:	f104 0619 	add.w	r6, r4, #25
 8004770:	e7f5      	b.n	800475e <_printf_i+0x22e>
 8004772:	bf00      	nop
 8004774:	080060e5 	.word	0x080060e5
 8004778:	080060f6 	.word	0x080060f6

0800477c <memcpy>:
 800477c:	440a      	add	r2, r1
 800477e:	4291      	cmp	r1, r2
 8004780:	f100 33ff 	add.w	r3, r0, #4294967295
 8004784:	d100      	bne.n	8004788 <memcpy+0xc>
 8004786:	4770      	bx	lr
 8004788:	b510      	push	{r4, lr}
 800478a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800478e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004792:	4291      	cmp	r1, r2
 8004794:	d1f9      	bne.n	800478a <memcpy+0xe>
 8004796:	bd10      	pop	{r4, pc}

08004798 <memmove>:
 8004798:	4288      	cmp	r0, r1
 800479a:	b510      	push	{r4, lr}
 800479c:	eb01 0402 	add.w	r4, r1, r2
 80047a0:	d902      	bls.n	80047a8 <memmove+0x10>
 80047a2:	4284      	cmp	r4, r0
 80047a4:	4623      	mov	r3, r4
 80047a6:	d807      	bhi.n	80047b8 <memmove+0x20>
 80047a8:	1e43      	subs	r3, r0, #1
 80047aa:	42a1      	cmp	r1, r4
 80047ac:	d008      	beq.n	80047c0 <memmove+0x28>
 80047ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 80047b2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80047b6:	e7f8      	b.n	80047aa <memmove+0x12>
 80047b8:	4402      	add	r2, r0
 80047ba:	4601      	mov	r1, r0
 80047bc:	428a      	cmp	r2, r1
 80047be:	d100      	bne.n	80047c2 <memmove+0x2a>
 80047c0:	bd10      	pop	{r4, pc}
 80047c2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80047c6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80047ca:	e7f7      	b.n	80047bc <memmove+0x24>

080047cc <_free_r>:
 80047cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80047ce:	2900      	cmp	r1, #0
 80047d0:	d044      	beq.n	800485c <_free_r+0x90>
 80047d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80047d6:	9001      	str	r0, [sp, #4]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	f1a1 0404 	sub.w	r4, r1, #4
 80047de:	bfb8      	it	lt
 80047e0:	18e4      	addlt	r4, r4, r3
 80047e2:	f000 f913 	bl	8004a0c <__malloc_lock>
 80047e6:	4a1e      	ldr	r2, [pc, #120]	; (8004860 <_free_r+0x94>)
 80047e8:	9801      	ldr	r0, [sp, #4]
 80047ea:	6813      	ldr	r3, [r2, #0]
 80047ec:	b933      	cbnz	r3, 80047fc <_free_r+0x30>
 80047ee:	6063      	str	r3, [r4, #4]
 80047f0:	6014      	str	r4, [r2, #0]
 80047f2:	b003      	add	sp, #12
 80047f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80047f8:	f000 b90e 	b.w	8004a18 <__malloc_unlock>
 80047fc:	42a3      	cmp	r3, r4
 80047fe:	d908      	bls.n	8004812 <_free_r+0x46>
 8004800:	6825      	ldr	r5, [r4, #0]
 8004802:	1961      	adds	r1, r4, r5
 8004804:	428b      	cmp	r3, r1
 8004806:	bf01      	itttt	eq
 8004808:	6819      	ldreq	r1, [r3, #0]
 800480a:	685b      	ldreq	r3, [r3, #4]
 800480c:	1949      	addeq	r1, r1, r5
 800480e:	6021      	streq	r1, [r4, #0]
 8004810:	e7ed      	b.n	80047ee <_free_r+0x22>
 8004812:	461a      	mov	r2, r3
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	b10b      	cbz	r3, 800481c <_free_r+0x50>
 8004818:	42a3      	cmp	r3, r4
 800481a:	d9fa      	bls.n	8004812 <_free_r+0x46>
 800481c:	6811      	ldr	r1, [r2, #0]
 800481e:	1855      	adds	r5, r2, r1
 8004820:	42a5      	cmp	r5, r4
 8004822:	d10b      	bne.n	800483c <_free_r+0x70>
 8004824:	6824      	ldr	r4, [r4, #0]
 8004826:	4421      	add	r1, r4
 8004828:	1854      	adds	r4, r2, r1
 800482a:	42a3      	cmp	r3, r4
 800482c:	6011      	str	r1, [r2, #0]
 800482e:	d1e0      	bne.n	80047f2 <_free_r+0x26>
 8004830:	681c      	ldr	r4, [r3, #0]
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	6053      	str	r3, [r2, #4]
 8004836:	4421      	add	r1, r4
 8004838:	6011      	str	r1, [r2, #0]
 800483a:	e7da      	b.n	80047f2 <_free_r+0x26>
 800483c:	d902      	bls.n	8004844 <_free_r+0x78>
 800483e:	230c      	movs	r3, #12
 8004840:	6003      	str	r3, [r0, #0]
 8004842:	e7d6      	b.n	80047f2 <_free_r+0x26>
 8004844:	6825      	ldr	r5, [r4, #0]
 8004846:	1961      	adds	r1, r4, r5
 8004848:	428b      	cmp	r3, r1
 800484a:	bf04      	itt	eq
 800484c:	6819      	ldreq	r1, [r3, #0]
 800484e:	685b      	ldreq	r3, [r3, #4]
 8004850:	6063      	str	r3, [r4, #4]
 8004852:	bf04      	itt	eq
 8004854:	1949      	addeq	r1, r1, r5
 8004856:	6021      	streq	r1, [r4, #0]
 8004858:	6054      	str	r4, [r2, #4]
 800485a:	e7ca      	b.n	80047f2 <_free_r+0x26>
 800485c:	b003      	add	sp, #12
 800485e:	bd30      	pop	{r4, r5, pc}
 8004860:	200005e8 	.word	0x200005e8

08004864 <sbrk_aligned>:
 8004864:	b570      	push	{r4, r5, r6, lr}
 8004866:	4e0e      	ldr	r6, [pc, #56]	; (80048a0 <sbrk_aligned+0x3c>)
 8004868:	460c      	mov	r4, r1
 800486a:	6831      	ldr	r1, [r6, #0]
 800486c:	4605      	mov	r5, r0
 800486e:	b911      	cbnz	r1, 8004876 <sbrk_aligned+0x12>
 8004870:	f000 f8bc 	bl	80049ec <_sbrk_r>
 8004874:	6030      	str	r0, [r6, #0]
 8004876:	4621      	mov	r1, r4
 8004878:	4628      	mov	r0, r5
 800487a:	f000 f8b7 	bl	80049ec <_sbrk_r>
 800487e:	1c43      	adds	r3, r0, #1
 8004880:	d00a      	beq.n	8004898 <sbrk_aligned+0x34>
 8004882:	1cc4      	adds	r4, r0, #3
 8004884:	f024 0403 	bic.w	r4, r4, #3
 8004888:	42a0      	cmp	r0, r4
 800488a:	d007      	beq.n	800489c <sbrk_aligned+0x38>
 800488c:	1a21      	subs	r1, r4, r0
 800488e:	4628      	mov	r0, r5
 8004890:	f000 f8ac 	bl	80049ec <_sbrk_r>
 8004894:	3001      	adds	r0, #1
 8004896:	d101      	bne.n	800489c <sbrk_aligned+0x38>
 8004898:	f04f 34ff 	mov.w	r4, #4294967295
 800489c:	4620      	mov	r0, r4
 800489e:	bd70      	pop	{r4, r5, r6, pc}
 80048a0:	200005ec 	.word	0x200005ec

080048a4 <_malloc_r>:
 80048a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80048a8:	1ccd      	adds	r5, r1, #3
 80048aa:	f025 0503 	bic.w	r5, r5, #3
 80048ae:	3508      	adds	r5, #8
 80048b0:	2d0c      	cmp	r5, #12
 80048b2:	bf38      	it	cc
 80048b4:	250c      	movcc	r5, #12
 80048b6:	2d00      	cmp	r5, #0
 80048b8:	4607      	mov	r7, r0
 80048ba:	db01      	blt.n	80048c0 <_malloc_r+0x1c>
 80048bc:	42a9      	cmp	r1, r5
 80048be:	d905      	bls.n	80048cc <_malloc_r+0x28>
 80048c0:	230c      	movs	r3, #12
 80048c2:	603b      	str	r3, [r7, #0]
 80048c4:	2600      	movs	r6, #0
 80048c6:	4630      	mov	r0, r6
 80048c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80048cc:	4e2e      	ldr	r6, [pc, #184]	; (8004988 <_malloc_r+0xe4>)
 80048ce:	f000 f89d 	bl	8004a0c <__malloc_lock>
 80048d2:	6833      	ldr	r3, [r6, #0]
 80048d4:	461c      	mov	r4, r3
 80048d6:	bb34      	cbnz	r4, 8004926 <_malloc_r+0x82>
 80048d8:	4629      	mov	r1, r5
 80048da:	4638      	mov	r0, r7
 80048dc:	f7ff ffc2 	bl	8004864 <sbrk_aligned>
 80048e0:	1c43      	adds	r3, r0, #1
 80048e2:	4604      	mov	r4, r0
 80048e4:	d14d      	bne.n	8004982 <_malloc_r+0xde>
 80048e6:	6834      	ldr	r4, [r6, #0]
 80048e8:	4626      	mov	r6, r4
 80048ea:	2e00      	cmp	r6, #0
 80048ec:	d140      	bne.n	8004970 <_malloc_r+0xcc>
 80048ee:	6823      	ldr	r3, [r4, #0]
 80048f0:	4631      	mov	r1, r6
 80048f2:	4638      	mov	r0, r7
 80048f4:	eb04 0803 	add.w	r8, r4, r3
 80048f8:	f000 f878 	bl	80049ec <_sbrk_r>
 80048fc:	4580      	cmp	r8, r0
 80048fe:	d13a      	bne.n	8004976 <_malloc_r+0xd2>
 8004900:	6821      	ldr	r1, [r4, #0]
 8004902:	3503      	adds	r5, #3
 8004904:	1a6d      	subs	r5, r5, r1
 8004906:	f025 0503 	bic.w	r5, r5, #3
 800490a:	3508      	adds	r5, #8
 800490c:	2d0c      	cmp	r5, #12
 800490e:	bf38      	it	cc
 8004910:	250c      	movcc	r5, #12
 8004912:	4629      	mov	r1, r5
 8004914:	4638      	mov	r0, r7
 8004916:	f7ff ffa5 	bl	8004864 <sbrk_aligned>
 800491a:	3001      	adds	r0, #1
 800491c:	d02b      	beq.n	8004976 <_malloc_r+0xd2>
 800491e:	6823      	ldr	r3, [r4, #0]
 8004920:	442b      	add	r3, r5
 8004922:	6023      	str	r3, [r4, #0]
 8004924:	e00e      	b.n	8004944 <_malloc_r+0xa0>
 8004926:	6822      	ldr	r2, [r4, #0]
 8004928:	1b52      	subs	r2, r2, r5
 800492a:	d41e      	bmi.n	800496a <_malloc_r+0xc6>
 800492c:	2a0b      	cmp	r2, #11
 800492e:	d916      	bls.n	800495e <_malloc_r+0xba>
 8004930:	1961      	adds	r1, r4, r5
 8004932:	42a3      	cmp	r3, r4
 8004934:	6025      	str	r5, [r4, #0]
 8004936:	bf18      	it	ne
 8004938:	6059      	strne	r1, [r3, #4]
 800493a:	6863      	ldr	r3, [r4, #4]
 800493c:	bf08      	it	eq
 800493e:	6031      	streq	r1, [r6, #0]
 8004940:	5162      	str	r2, [r4, r5]
 8004942:	604b      	str	r3, [r1, #4]
 8004944:	4638      	mov	r0, r7
 8004946:	f104 060b 	add.w	r6, r4, #11
 800494a:	f000 f865 	bl	8004a18 <__malloc_unlock>
 800494e:	f026 0607 	bic.w	r6, r6, #7
 8004952:	1d23      	adds	r3, r4, #4
 8004954:	1af2      	subs	r2, r6, r3
 8004956:	d0b6      	beq.n	80048c6 <_malloc_r+0x22>
 8004958:	1b9b      	subs	r3, r3, r6
 800495a:	50a3      	str	r3, [r4, r2]
 800495c:	e7b3      	b.n	80048c6 <_malloc_r+0x22>
 800495e:	6862      	ldr	r2, [r4, #4]
 8004960:	42a3      	cmp	r3, r4
 8004962:	bf0c      	ite	eq
 8004964:	6032      	streq	r2, [r6, #0]
 8004966:	605a      	strne	r2, [r3, #4]
 8004968:	e7ec      	b.n	8004944 <_malloc_r+0xa0>
 800496a:	4623      	mov	r3, r4
 800496c:	6864      	ldr	r4, [r4, #4]
 800496e:	e7b2      	b.n	80048d6 <_malloc_r+0x32>
 8004970:	4634      	mov	r4, r6
 8004972:	6876      	ldr	r6, [r6, #4]
 8004974:	e7b9      	b.n	80048ea <_malloc_r+0x46>
 8004976:	230c      	movs	r3, #12
 8004978:	603b      	str	r3, [r7, #0]
 800497a:	4638      	mov	r0, r7
 800497c:	f000 f84c 	bl	8004a18 <__malloc_unlock>
 8004980:	e7a1      	b.n	80048c6 <_malloc_r+0x22>
 8004982:	6025      	str	r5, [r4, #0]
 8004984:	e7de      	b.n	8004944 <_malloc_r+0xa0>
 8004986:	bf00      	nop
 8004988:	200005e8 	.word	0x200005e8

0800498c <_realloc_r>:
 800498c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004990:	4680      	mov	r8, r0
 8004992:	4614      	mov	r4, r2
 8004994:	460e      	mov	r6, r1
 8004996:	b921      	cbnz	r1, 80049a2 <_realloc_r+0x16>
 8004998:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800499c:	4611      	mov	r1, r2
 800499e:	f7ff bf81 	b.w	80048a4 <_malloc_r>
 80049a2:	b92a      	cbnz	r2, 80049b0 <_realloc_r+0x24>
 80049a4:	f7ff ff12 	bl	80047cc <_free_r>
 80049a8:	4625      	mov	r5, r4
 80049aa:	4628      	mov	r0, r5
 80049ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80049b0:	f000 f838 	bl	8004a24 <_malloc_usable_size_r>
 80049b4:	4284      	cmp	r4, r0
 80049b6:	4607      	mov	r7, r0
 80049b8:	d802      	bhi.n	80049c0 <_realloc_r+0x34>
 80049ba:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80049be:	d812      	bhi.n	80049e6 <_realloc_r+0x5a>
 80049c0:	4621      	mov	r1, r4
 80049c2:	4640      	mov	r0, r8
 80049c4:	f7ff ff6e 	bl	80048a4 <_malloc_r>
 80049c8:	4605      	mov	r5, r0
 80049ca:	2800      	cmp	r0, #0
 80049cc:	d0ed      	beq.n	80049aa <_realloc_r+0x1e>
 80049ce:	42bc      	cmp	r4, r7
 80049d0:	4622      	mov	r2, r4
 80049d2:	4631      	mov	r1, r6
 80049d4:	bf28      	it	cs
 80049d6:	463a      	movcs	r2, r7
 80049d8:	f7ff fed0 	bl	800477c <memcpy>
 80049dc:	4631      	mov	r1, r6
 80049de:	4640      	mov	r0, r8
 80049e0:	f7ff fef4 	bl	80047cc <_free_r>
 80049e4:	e7e1      	b.n	80049aa <_realloc_r+0x1e>
 80049e6:	4635      	mov	r5, r6
 80049e8:	e7df      	b.n	80049aa <_realloc_r+0x1e>
	...

080049ec <_sbrk_r>:
 80049ec:	b538      	push	{r3, r4, r5, lr}
 80049ee:	4d06      	ldr	r5, [pc, #24]	; (8004a08 <_sbrk_r+0x1c>)
 80049f0:	2300      	movs	r3, #0
 80049f2:	4604      	mov	r4, r0
 80049f4:	4608      	mov	r0, r1
 80049f6:	602b      	str	r3, [r5, #0]
 80049f8:	f7fc fd48 	bl	800148c <_sbrk>
 80049fc:	1c43      	adds	r3, r0, #1
 80049fe:	d102      	bne.n	8004a06 <_sbrk_r+0x1a>
 8004a00:	682b      	ldr	r3, [r5, #0]
 8004a02:	b103      	cbz	r3, 8004a06 <_sbrk_r+0x1a>
 8004a04:	6023      	str	r3, [r4, #0]
 8004a06:	bd38      	pop	{r3, r4, r5, pc}
 8004a08:	200005f0 	.word	0x200005f0

08004a0c <__malloc_lock>:
 8004a0c:	4801      	ldr	r0, [pc, #4]	; (8004a14 <__malloc_lock+0x8>)
 8004a0e:	f000 b811 	b.w	8004a34 <__retarget_lock_acquire_recursive>
 8004a12:	bf00      	nop
 8004a14:	200005f4 	.word	0x200005f4

08004a18 <__malloc_unlock>:
 8004a18:	4801      	ldr	r0, [pc, #4]	; (8004a20 <__malloc_unlock+0x8>)
 8004a1a:	f000 b80c 	b.w	8004a36 <__retarget_lock_release_recursive>
 8004a1e:	bf00      	nop
 8004a20:	200005f4 	.word	0x200005f4

08004a24 <_malloc_usable_size_r>:
 8004a24:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004a28:	1f18      	subs	r0, r3, #4
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	bfbc      	itt	lt
 8004a2e:	580b      	ldrlt	r3, [r1, r0]
 8004a30:	18c0      	addlt	r0, r0, r3
 8004a32:	4770      	bx	lr

08004a34 <__retarget_lock_acquire_recursive>:
 8004a34:	4770      	bx	lr

08004a36 <__retarget_lock_release_recursive>:
 8004a36:	4770      	bx	lr

08004a38 <_init>:
 8004a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a3a:	bf00      	nop
 8004a3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a3e:	bc08      	pop	{r3}
 8004a40:	469e      	mov	lr, r3
 8004a42:	4770      	bx	lr

08004a44 <_fini>:
 8004a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a46:	bf00      	nop
 8004a48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a4a:	bc08      	pop	{r3}
 8004a4c:	469e      	mov	lr, r3
 8004a4e:	4770      	bx	lr
