
SDK_UART_l2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002910  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08002a98  08002a98  00012a98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002ab8  08002ab8  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  08002ab8  08002ab8  00012ab8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002ac0  08002ac0  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002ac0  08002ac0  00012ac0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002ac4  08002ac4  00012ac4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08002ac8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020060  2**0
                  CONTENTS
 10 .bss          00000060  20000060  20000060  00020060  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200000c0  200000c0  00020060  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 13 .debug_info   00006f16  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000175f  00000000  00000000  00026fa6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000006b0  00000000  00000000  00028708  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000005e8  00000000  00000000  00028db8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f558  00000000  00000000  000293a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00007e50  00000000  00000000  000488f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bd974  00000000  00000000  00050748  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0010e0bc  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000019a8  00000000  00000000  0010e10c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000060 	.word	0x20000060
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002a80 	.word	0x08002a80

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000064 	.word	0x20000064
 80001c4:	08002a80 	.word	0x08002a80

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b088      	sub	sp, #32
 80004d0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004d2:	f107 030c 	add.w	r3, r7, #12
 80004d6:	2200      	movs	r2, #0
 80004d8:	601a      	str	r2, [r3, #0]
 80004da:	605a      	str	r2, [r3, #4]
 80004dc:	609a      	str	r2, [r3, #8]
 80004de:	60da      	str	r2, [r3, #12]
 80004e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80004e2:	2300      	movs	r3, #0
 80004e4:	60bb      	str	r3, [r7, #8]
 80004e6:	4b19      	ldr	r3, [pc, #100]	; (800054c <MX_GPIO_Init+0x80>)
 80004e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004ea:	4a18      	ldr	r2, [pc, #96]	; (800054c <MX_GPIO_Init+0x80>)
 80004ec:	f043 0308 	orr.w	r3, r3, #8
 80004f0:	6313      	str	r3, [r2, #48]	; 0x30
 80004f2:	4b16      	ldr	r3, [pc, #88]	; (800054c <MX_GPIO_Init+0x80>)
 80004f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004f6:	f003 0308 	and.w	r3, r3, #8
 80004fa:	60bb      	str	r3, [r7, #8]
 80004fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004fe:	2300      	movs	r3, #0
 8000500:	607b      	str	r3, [r7, #4]
 8000502:	4b12      	ldr	r3, [pc, #72]	; (800054c <MX_GPIO_Init+0x80>)
 8000504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000506:	4a11      	ldr	r2, [pc, #68]	; (800054c <MX_GPIO_Init+0x80>)
 8000508:	f043 0304 	orr.w	r3, r3, #4
 800050c:	6313      	str	r3, [r2, #48]	; 0x30
 800050e:	4b0f      	ldr	r3, [pc, #60]	; (800054c <MX_GPIO_Init+0x80>)
 8000510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000512:	f003 0304 	and.w	r3, r3, #4
 8000516:	607b      	str	r3, [r7, #4]
 8000518:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800051a:	2200      	movs	r2, #0
 800051c:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8000520:	480b      	ldr	r0, [pc, #44]	; (8000550 <MX_GPIO_Init+0x84>)
 8000522:	f000 fd35 	bl	8000f90 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000526:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800052a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800052c:	2301      	movs	r3, #1
 800052e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000530:	2300      	movs	r3, #0
 8000532:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000534:	2300      	movs	r3, #0
 8000536:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000538:	f107 030c 	add.w	r3, r7, #12
 800053c:	4619      	mov	r1, r3
 800053e:	4804      	ldr	r0, [pc, #16]	; (8000550 <MX_GPIO_Init+0x84>)
 8000540:	f000 fb8a 	bl	8000c58 <HAL_GPIO_Init>

}
 8000544:	bf00      	nop
 8000546:	3720      	adds	r7, #32
 8000548:	46bd      	mov	sp, r7
 800054a:	bd80      	pop	{r7, pc}
 800054c:	40023800 	.word	0x40023800
 8000550:	40020c00 	.word	0x40020c00

08000554 <ReadCommand>:
  */
char error[] = "\n\rI don't understand you, try again\n\r>>";
char ask[] = "\n\rWhat do you want? Print . in the end\n\r>>";


void ReadCommand(){
 8000554:	b580      	push	{r7, lr}
 8000556:	b088      	sub	sp, #32
 8000558:	af00      	add	r7, sp, #0
	//char txt[] = "What do you want?\n\r>>";
	char buff[20];
	char symb = '7';
 800055a:	2337      	movs	r3, #55	; 0x37
 800055c:	71fb      	strb	r3, [r7, #7]
	size_t i = 0;
 800055e:	2300      	movs	r3, #0
 8000560:	61fb      	str	r3, [r7, #28]
	HAL_UART_Transmit(&huart6, (uint8_t*)ask, 42, 25);
 8000562:	2319      	movs	r3, #25
 8000564:	222a      	movs	r2, #42	; 0x2a
 8000566:	491c      	ldr	r1, [pc, #112]	; (80005d8 <ReadCommand+0x84>)
 8000568:	481c      	ldr	r0, [pc, #112]	; (80005dc <ReadCommand+0x88>)
 800056a:	f001 f9c6 	bl	80018fa <HAL_UART_Transmit>
	while(symb != '.' && i < 20){
 800056e:	e019      	b.n	80005a4 <ReadCommand+0x50>
	    	  //HAL_UART_Transmit(&huart6, (uint8_t*)txt1, 3, 20);
	  if(HAL_UART_Receive(&huart6, &symb, 1, 1000) == HAL_OK){
 8000570:	1df9      	adds	r1, r7, #7
 8000572:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000576:	2201      	movs	r2, #1
 8000578:	4818      	ldr	r0, [pc, #96]	; (80005dc <ReadCommand+0x88>)
 800057a:	f001 fa57 	bl	8001a2c <HAL_UART_Receive>
 800057e:	4603      	mov	r3, r0
 8000580:	2b00      	cmp	r3, #0
 8000582:	d10f      	bne.n	80005a4 <ReadCommand+0x50>
		  HAL_UART_Transmit(&huart6, &symb, 1, 20);
 8000584:	1df9      	adds	r1, r7, #7
 8000586:	2314      	movs	r3, #20
 8000588:	2201      	movs	r2, #1
 800058a:	4814      	ldr	r0, [pc, #80]	; (80005dc <ReadCommand+0x88>)
 800058c:	f001 f9b5 	bl	80018fa <HAL_UART_Transmit>
		  buff[i] = symb;
 8000590:	79f9      	ldrb	r1, [r7, #7]
 8000592:	f107 0208 	add.w	r2, r7, #8
 8000596:	69fb      	ldr	r3, [r7, #28]
 8000598:	4413      	add	r3, r2
 800059a:	460a      	mov	r2, r1
 800059c:	701a      	strb	r2, [r3, #0]
		  i++;
 800059e:	69fb      	ldr	r3, [r7, #28]
 80005a0:	3301      	adds	r3, #1
 80005a2:	61fb      	str	r3, [r7, #28]
	while(symb != '.' && i < 20){
 80005a4:	79fb      	ldrb	r3, [r7, #7]
 80005a6:	2b2e      	cmp	r3, #46	; 0x2e
 80005a8:	d002      	beq.n	80005b0 <ReadCommand+0x5c>
 80005aa:	69fb      	ldr	r3, [r7, #28]
 80005ac:	2b13      	cmp	r3, #19
 80005ae:	d9df      	bls.n	8000570 <ReadCommand+0x1c>
	  }
	}
	if(i >= 20){
 80005b0:	69fb      	ldr	r3, [r7, #28]
 80005b2:	2b13      	cmp	r3, #19
 80005b4:	d906      	bls.n	80005c4 <ReadCommand+0x70>
		HAL_UART_Transmit(&huart6, (uint8_t*)error, 50, 25);
 80005b6:	2319      	movs	r3, #25
 80005b8:	2232      	movs	r2, #50	; 0x32
 80005ba:	4909      	ldr	r1, [pc, #36]	; (80005e0 <ReadCommand+0x8c>)
 80005bc:	4807      	ldr	r0, [pc, #28]	; (80005dc <ReadCommand+0x88>)
 80005be:	f001 f99c 	bl	80018fa <HAL_UART_Transmit>
	 * set timeout X
	 * set interrupts on
	 * set interrupts off
	 * help
	 */
}
 80005c2:	e005      	b.n	80005d0 <ReadCommand+0x7c>
		HAL_UART_Transmit(&huart6, (uint8_t*)"GOOOOD", 10, 25);
 80005c4:	2319      	movs	r3, #25
 80005c6:	220a      	movs	r2, #10
 80005c8:	4906      	ldr	r1, [pc, #24]	; (80005e4 <ReadCommand+0x90>)
 80005ca:	4804      	ldr	r0, [pc, #16]	; (80005dc <ReadCommand+0x88>)
 80005cc:	f001 f995 	bl	80018fa <HAL_UART_Transmit>
}
 80005d0:	bf00      	nop
 80005d2:	3720      	adds	r7, #32
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	20000028 	.word	0x20000028
 80005dc:	2000007c 	.word	0x2000007c
 80005e0:	20000000 	.word	0x20000000
 80005e4:	08002a98 	.word	0x08002a98

080005e8 <main>:
	  }

}

int main(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b09a      	sub	sp, #104	; 0x68
 80005ec:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ee:	f000 f98d 	bl	800090c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f2:	f000 f80b 	bl	800060c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005f6:	f7ff ff69 	bl	80004cc <MX_GPIO_Init>
  MX_USART6_UART_Init();
 80005fa:	f000 f8e3 	bl	80007c4 <MX_USART6_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  /* USER CODE BEGIN WHILE */
  //Phore();
  ReadCommand();
 80005fe:	f7ff ffa9 	bl	8000554 <ReadCommand>
 8000602:	2300      	movs	r3, #0
  uint8_t str[100];

}
 8000604:	4618      	mov	r0, r3
 8000606:	3768      	adds	r7, #104	; 0x68
 8000608:	46bd      	mov	sp, r7
 800060a:	bd80      	pop	{r7, pc}

0800060c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b094      	sub	sp, #80	; 0x50
 8000610:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000612:	f107 0320 	add.w	r3, r7, #32
 8000616:	2230      	movs	r2, #48	; 0x30
 8000618:	2100      	movs	r1, #0
 800061a:	4618      	mov	r0, r3
 800061c:	f002 fa28 	bl	8002a70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000620:	f107 030c 	add.w	r3, r7, #12
 8000624:	2200      	movs	r2, #0
 8000626:	601a      	str	r2, [r3, #0]
 8000628:	605a      	str	r2, [r3, #4]
 800062a:	609a      	str	r2, [r3, #8]
 800062c:	60da      	str	r2, [r3, #12]
 800062e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000630:	2300      	movs	r3, #0
 8000632:	60bb      	str	r3, [r7, #8]
 8000634:	4b22      	ldr	r3, [pc, #136]	; (80006c0 <SystemClock_Config+0xb4>)
 8000636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000638:	4a21      	ldr	r2, [pc, #132]	; (80006c0 <SystemClock_Config+0xb4>)
 800063a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800063e:	6413      	str	r3, [r2, #64]	; 0x40
 8000640:	4b1f      	ldr	r3, [pc, #124]	; (80006c0 <SystemClock_Config+0xb4>)
 8000642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000644:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000648:	60bb      	str	r3, [r7, #8]
 800064a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800064c:	2300      	movs	r3, #0
 800064e:	607b      	str	r3, [r7, #4]
 8000650:	4b1c      	ldr	r3, [pc, #112]	; (80006c4 <SystemClock_Config+0xb8>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	4a1b      	ldr	r2, [pc, #108]	; (80006c4 <SystemClock_Config+0xb8>)
 8000656:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800065a:	6013      	str	r3, [r2, #0]
 800065c:	4b19      	ldr	r3, [pc, #100]	; (80006c4 <SystemClock_Config+0xb8>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000664:	607b      	str	r3, [r7, #4]
 8000666:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000668:	2302      	movs	r3, #2
 800066a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800066c:	2301      	movs	r3, #1
 800066e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000670:	2310      	movs	r3, #16
 8000672:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000674:	2300      	movs	r3, #0
 8000676:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000678:	f107 0320 	add.w	r3, r7, #32
 800067c:	4618      	mov	r0, r3
 800067e:	f000 fca1 	bl	8000fc4 <HAL_RCC_OscConfig>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d001      	beq.n	800068c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000688:	f000 f81e 	bl	80006c8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800068c:	230f      	movs	r3, #15
 800068e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000690:	2300      	movs	r3, #0
 8000692:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000694:	2300      	movs	r3, #0
 8000696:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000698:	2300      	movs	r3, #0
 800069a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800069c:	2300      	movs	r3, #0
 800069e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006a0:	f107 030c 	add.w	r3, r7, #12
 80006a4:	2100      	movs	r1, #0
 80006a6:	4618      	mov	r0, r3
 80006a8:	f000 fefa 	bl	80014a0 <HAL_RCC_ClockConfig>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80006b2:	f000 f809 	bl	80006c8 <Error_Handler>
  }
}
 80006b6:	bf00      	nop
 80006b8:	3750      	adds	r7, #80	; 0x50
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	40023800 	.word	0x40023800
 80006c4:	40007000 	.word	0x40007000

080006c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006c8:	b480      	push	{r7}
 80006ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80006cc:	bf00      	nop
 80006ce:	46bd      	mov	sp, r7
 80006d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d4:	4770      	bx	lr
	...

080006d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006d8:	b480      	push	{r7}
 80006da:	b083      	sub	sp, #12
 80006dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006de:	2300      	movs	r3, #0
 80006e0:	607b      	str	r3, [r7, #4]
 80006e2:	4b10      	ldr	r3, [pc, #64]	; (8000724 <HAL_MspInit+0x4c>)
 80006e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006e6:	4a0f      	ldr	r2, [pc, #60]	; (8000724 <HAL_MspInit+0x4c>)
 80006e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006ec:	6453      	str	r3, [r2, #68]	; 0x44
 80006ee:	4b0d      	ldr	r3, [pc, #52]	; (8000724 <HAL_MspInit+0x4c>)
 80006f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006f6:	607b      	str	r3, [r7, #4]
 80006f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006fa:	2300      	movs	r3, #0
 80006fc:	603b      	str	r3, [r7, #0]
 80006fe:	4b09      	ldr	r3, [pc, #36]	; (8000724 <HAL_MspInit+0x4c>)
 8000700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000702:	4a08      	ldr	r2, [pc, #32]	; (8000724 <HAL_MspInit+0x4c>)
 8000704:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000708:	6413      	str	r3, [r2, #64]	; 0x40
 800070a:	4b06      	ldr	r3, [pc, #24]	; (8000724 <HAL_MspInit+0x4c>)
 800070c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800070e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000712:	603b      	str	r3, [r7, #0]
 8000714:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000716:	bf00      	nop
 8000718:	370c      	adds	r7, #12
 800071a:	46bd      	mov	sp, r7
 800071c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000720:	4770      	bx	lr
 8000722:	bf00      	nop
 8000724:	40023800 	.word	0x40023800

08000728 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000728:	b480      	push	{r7}
 800072a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800072c:	bf00      	nop
 800072e:	46bd      	mov	sp, r7
 8000730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000734:	4770      	bx	lr

08000736 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000736:	b480      	push	{r7}
 8000738:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800073a:	e7fe      	b.n	800073a <HardFault_Handler+0x4>

0800073c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800073c:	b480      	push	{r7}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000740:	e7fe      	b.n	8000740 <MemManage_Handler+0x4>

08000742 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000742:	b480      	push	{r7}
 8000744:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000746:	e7fe      	b.n	8000746 <BusFault_Handler+0x4>

08000748 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000748:	b480      	push	{r7}
 800074a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800074c:	e7fe      	b.n	800074c <UsageFault_Handler+0x4>

0800074e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800074e:	b480      	push	{r7}
 8000750:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000752:	bf00      	nop
 8000754:	46bd      	mov	sp, r7
 8000756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075a:	4770      	bx	lr

0800075c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800075c:	b480      	push	{r7}
 800075e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000760:	bf00      	nop
 8000762:	46bd      	mov	sp, r7
 8000764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000768:	4770      	bx	lr

0800076a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800076a:	b480      	push	{r7}
 800076c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800076e:	bf00      	nop
 8000770:	46bd      	mov	sp, r7
 8000772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000776:	4770      	bx	lr

08000778 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800077c:	f000 f918 	bl	80009b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000780:	bf00      	nop
 8000782:	bd80      	pop	{r7, pc}

08000784 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8000788:	4802      	ldr	r0, [pc, #8]	; (8000794 <USART6_IRQHandler+0x10>)
 800078a:	f001 f9f5 	bl	8001b78 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800078e:	bf00      	nop
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	2000007c 	.word	0x2000007c

08000798 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800079c:	4b08      	ldr	r3, [pc, #32]	; (80007c0 <SystemInit+0x28>)
 800079e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80007a2:	4a07      	ldr	r2, [pc, #28]	; (80007c0 <SystemInit+0x28>)
 80007a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80007a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80007ac:	4b04      	ldr	r3, [pc, #16]	; (80007c0 <SystemInit+0x28>)
 80007ae:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80007b2:	609a      	str	r2, [r3, #8]
#endif
}
 80007b4:	bf00      	nop
 80007b6:	46bd      	mov	sp, r7
 80007b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007bc:	4770      	bx	lr
 80007be:	bf00      	nop
 80007c0:	e000ed00 	.word	0xe000ed00

080007c4 <MX_USART6_UART_Init>:
UART_HandleTypeDef huart6;

/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0

  huart6.Instance = USART6;
 80007c8:	4b11      	ldr	r3, [pc, #68]	; (8000810 <MX_USART6_UART_Init+0x4c>)
 80007ca:	4a12      	ldr	r2, [pc, #72]	; (8000814 <MX_USART6_UART_Init+0x50>)
 80007cc:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80007ce:	4b10      	ldr	r3, [pc, #64]	; (8000810 <MX_USART6_UART_Init+0x4c>)
 80007d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007d4:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80007d6:	4b0e      	ldr	r3, [pc, #56]	; (8000810 <MX_USART6_UART_Init+0x4c>)
 80007d8:	2200      	movs	r2, #0
 80007da:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80007dc:	4b0c      	ldr	r3, [pc, #48]	; (8000810 <MX_USART6_UART_Init+0x4c>)
 80007de:	2200      	movs	r2, #0
 80007e0:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80007e2:	4b0b      	ldr	r3, [pc, #44]	; (8000810 <MX_USART6_UART_Init+0x4c>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80007e8:	4b09      	ldr	r3, [pc, #36]	; (8000810 <MX_USART6_UART_Init+0x4c>)
 80007ea:	220c      	movs	r2, #12
 80007ec:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ee:	4b08      	ldr	r3, [pc, #32]	; (8000810 <MX_USART6_UART_Init+0x4c>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80007f4:	4b06      	ldr	r3, [pc, #24]	; (8000810 <MX_USART6_UART_Init+0x4c>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80007fa:	4805      	ldr	r0, [pc, #20]	; (8000810 <MX_USART6_UART_Init+0x4c>)
 80007fc:	f001 f830 	bl	8001860 <HAL_UART_Init>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d001      	beq.n	800080a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000806:	f7ff ff5f 	bl	80006c8 <Error_Handler>
  }

}
 800080a:	bf00      	nop
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	2000007c 	.word	0x2000007c
 8000814:	40011400 	.word	0x40011400

08000818 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b08a      	sub	sp, #40	; 0x28
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000820:	f107 0314 	add.w	r3, r7, #20
 8000824:	2200      	movs	r2, #0
 8000826:	601a      	str	r2, [r3, #0]
 8000828:	605a      	str	r2, [r3, #4]
 800082a:	609a      	str	r2, [r3, #8]
 800082c:	60da      	str	r2, [r3, #12]
 800082e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART6)
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	4a1d      	ldr	r2, [pc, #116]	; (80008ac <HAL_UART_MspInit+0x94>)
 8000836:	4293      	cmp	r3, r2
 8000838:	d133      	bne.n	80008a2 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* USART6 clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 800083a:	2300      	movs	r3, #0
 800083c:	613b      	str	r3, [r7, #16]
 800083e:	4b1c      	ldr	r3, [pc, #112]	; (80008b0 <HAL_UART_MspInit+0x98>)
 8000840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000842:	4a1b      	ldr	r2, [pc, #108]	; (80008b0 <HAL_UART_MspInit+0x98>)
 8000844:	f043 0320 	orr.w	r3, r3, #32
 8000848:	6453      	str	r3, [r2, #68]	; 0x44
 800084a:	4b19      	ldr	r3, [pc, #100]	; (80008b0 <HAL_UART_MspInit+0x98>)
 800084c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800084e:	f003 0320 	and.w	r3, r3, #32
 8000852:	613b      	str	r3, [r7, #16]
 8000854:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000856:	2300      	movs	r3, #0
 8000858:	60fb      	str	r3, [r7, #12]
 800085a:	4b15      	ldr	r3, [pc, #84]	; (80008b0 <HAL_UART_MspInit+0x98>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085e:	4a14      	ldr	r2, [pc, #80]	; (80008b0 <HAL_UART_MspInit+0x98>)
 8000860:	f043 0304 	orr.w	r3, r3, #4
 8000864:	6313      	str	r3, [r2, #48]	; 0x30
 8000866:	4b12      	ldr	r3, [pc, #72]	; (80008b0 <HAL_UART_MspInit+0x98>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086a:	f003 0304 	and.w	r3, r3, #4
 800086e:	60fb      	str	r3, [r7, #12]
 8000870:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000872:	23c0      	movs	r3, #192	; 0xc0
 8000874:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000876:	2302      	movs	r3, #2
 8000878:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087a:	2300      	movs	r3, #0
 800087c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800087e:	2303      	movs	r3, #3
 8000880:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000882:	2308      	movs	r3, #8
 8000884:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000886:	f107 0314 	add.w	r3, r7, #20
 800088a:	4619      	mov	r1, r3
 800088c:	4809      	ldr	r0, [pc, #36]	; (80008b4 <HAL_UART_MspInit+0x9c>)
 800088e:	f000 f9e3 	bl	8000c58 <HAL_GPIO_Init>

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8000892:	2200      	movs	r2, #0
 8000894:	2100      	movs	r1, #0
 8000896:	2047      	movs	r0, #71	; 0x47
 8000898:	f000 f985 	bl	8000ba6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800089c:	2047      	movs	r0, #71	; 0x47
 800089e:	f000 f99e 	bl	8000bde <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 80008a2:	bf00      	nop
 80008a4:	3728      	adds	r7, #40	; 0x28
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	40011400 	.word	0x40011400
 80008b0:	40023800 	.word	0x40023800
 80008b4:	40020800 	.word	0x40020800

080008b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80008b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80008f0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80008bc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80008be:	e003      	b.n	80008c8 <LoopCopyDataInit>

080008c0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80008c0:	4b0c      	ldr	r3, [pc, #48]	; (80008f4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80008c2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80008c4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80008c6:	3104      	adds	r1, #4

080008c8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80008c8:	480b      	ldr	r0, [pc, #44]	; (80008f8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80008ca:	4b0c      	ldr	r3, [pc, #48]	; (80008fc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80008cc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80008ce:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80008d0:	d3f6      	bcc.n	80008c0 <CopyDataInit>
  ldr  r2, =_sbss
 80008d2:	4a0b      	ldr	r2, [pc, #44]	; (8000900 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80008d4:	e002      	b.n	80008dc <LoopFillZerobss>

080008d6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80008d6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80008d8:	f842 3b04 	str.w	r3, [r2], #4

080008dc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80008dc:	4b09      	ldr	r3, [pc, #36]	; (8000904 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80008de:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80008e0:	d3f9      	bcc.n	80008d6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80008e2:	f7ff ff59 	bl	8000798 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80008e6:	f002 f89f 	bl	8002a28 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80008ea:	f7ff fe7d 	bl	80005e8 <main>
  bx  lr    
 80008ee:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80008f0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80008f4:	08002ac8 	.word	0x08002ac8
  ldr  r0, =_sdata
 80008f8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80008fc:	20000060 	.word	0x20000060
  ldr  r2, =_sbss
 8000900:	20000060 	.word	0x20000060
  ldr  r3, = _ebss
 8000904:	200000c0 	.word	0x200000c0

08000908 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000908:	e7fe      	b.n	8000908 <ADC_IRQHandler>
	...

0800090c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000910:	4b0e      	ldr	r3, [pc, #56]	; (800094c <HAL_Init+0x40>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	4a0d      	ldr	r2, [pc, #52]	; (800094c <HAL_Init+0x40>)
 8000916:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800091a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800091c:	4b0b      	ldr	r3, [pc, #44]	; (800094c <HAL_Init+0x40>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	4a0a      	ldr	r2, [pc, #40]	; (800094c <HAL_Init+0x40>)
 8000922:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000926:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000928:	4b08      	ldr	r3, [pc, #32]	; (800094c <HAL_Init+0x40>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	4a07      	ldr	r2, [pc, #28]	; (800094c <HAL_Init+0x40>)
 800092e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000932:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000934:	2003      	movs	r0, #3
 8000936:	f000 f92b 	bl	8000b90 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800093a:	2000      	movs	r0, #0
 800093c:	f000 f808 	bl	8000950 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000940:	f7ff feca 	bl	80006d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000944:	2300      	movs	r3, #0
}
 8000946:	4618      	mov	r0, r3
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	40023c00 	.word	0x40023c00

08000950 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b082      	sub	sp, #8
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000958:	4b12      	ldr	r3, [pc, #72]	; (80009a4 <HAL_InitTick+0x54>)
 800095a:	681a      	ldr	r2, [r3, #0]
 800095c:	4b12      	ldr	r3, [pc, #72]	; (80009a8 <HAL_InitTick+0x58>)
 800095e:	781b      	ldrb	r3, [r3, #0]
 8000960:	4619      	mov	r1, r3
 8000962:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000966:	fbb3 f3f1 	udiv	r3, r3, r1
 800096a:	fbb2 f3f3 	udiv	r3, r2, r3
 800096e:	4618      	mov	r0, r3
 8000970:	f000 f943 	bl	8000bfa <HAL_SYSTICK_Config>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d001      	beq.n	800097e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800097a:	2301      	movs	r3, #1
 800097c:	e00e      	b.n	800099c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	2b0f      	cmp	r3, #15
 8000982:	d80a      	bhi.n	800099a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000984:	2200      	movs	r2, #0
 8000986:	6879      	ldr	r1, [r7, #4]
 8000988:	f04f 30ff 	mov.w	r0, #4294967295
 800098c:	f000 f90b 	bl	8000ba6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000990:	4a06      	ldr	r2, [pc, #24]	; (80009ac <HAL_InitTick+0x5c>)
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000996:	2300      	movs	r3, #0
 8000998:	e000      	b.n	800099c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800099a:	2301      	movs	r3, #1
}
 800099c:	4618      	mov	r0, r3
 800099e:	3708      	adds	r7, #8
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	20000054 	.word	0x20000054
 80009a8:	2000005c 	.word	0x2000005c
 80009ac:	20000058 	.word	0x20000058

080009b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009b4:	4b06      	ldr	r3, [pc, #24]	; (80009d0 <HAL_IncTick+0x20>)
 80009b6:	781b      	ldrb	r3, [r3, #0]
 80009b8:	461a      	mov	r2, r3
 80009ba:	4b06      	ldr	r3, [pc, #24]	; (80009d4 <HAL_IncTick+0x24>)
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	4413      	add	r3, r2
 80009c0:	4a04      	ldr	r2, [pc, #16]	; (80009d4 <HAL_IncTick+0x24>)
 80009c2:	6013      	str	r3, [r2, #0]
}
 80009c4:	bf00      	nop
 80009c6:	46bd      	mov	sp, r7
 80009c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009cc:	4770      	bx	lr
 80009ce:	bf00      	nop
 80009d0:	2000005c 	.word	0x2000005c
 80009d4:	200000bc 	.word	0x200000bc

080009d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
  return uwTick;
 80009dc:	4b03      	ldr	r3, [pc, #12]	; (80009ec <HAL_GetTick+0x14>)
 80009de:	681b      	ldr	r3, [r3, #0]
}
 80009e0:	4618      	mov	r0, r3
 80009e2:	46bd      	mov	sp, r7
 80009e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e8:	4770      	bx	lr
 80009ea:	bf00      	nop
 80009ec:	200000bc 	.word	0x200000bc

080009f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009f0:	b480      	push	{r7}
 80009f2:	b085      	sub	sp, #20
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	f003 0307 	and.w	r3, r3, #7
 80009fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a00:	4b0c      	ldr	r3, [pc, #48]	; (8000a34 <__NVIC_SetPriorityGrouping+0x44>)
 8000a02:	68db      	ldr	r3, [r3, #12]
 8000a04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a06:	68ba      	ldr	r2, [r7, #8]
 8000a08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a0c:	4013      	ands	r3, r2
 8000a0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a10:	68fb      	ldr	r3, [r7, #12]
 8000a12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a14:	68bb      	ldr	r3, [r7, #8]
 8000a16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a18:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a22:	4a04      	ldr	r2, [pc, #16]	; (8000a34 <__NVIC_SetPriorityGrouping+0x44>)
 8000a24:	68bb      	ldr	r3, [r7, #8]
 8000a26:	60d3      	str	r3, [r2, #12]
}
 8000a28:	bf00      	nop
 8000a2a:	3714      	adds	r7, #20
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a32:	4770      	bx	lr
 8000a34:	e000ed00 	.word	0xe000ed00

08000a38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a3c:	4b04      	ldr	r3, [pc, #16]	; (8000a50 <__NVIC_GetPriorityGrouping+0x18>)
 8000a3e:	68db      	ldr	r3, [r3, #12]
 8000a40:	0a1b      	lsrs	r3, r3, #8
 8000a42:	f003 0307 	and.w	r3, r3, #7
}
 8000a46:	4618      	mov	r0, r3
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4e:	4770      	bx	lr
 8000a50:	e000ed00 	.word	0xe000ed00

08000a54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a54:	b480      	push	{r7}
 8000a56:	b083      	sub	sp, #12
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	db0b      	blt.n	8000a7e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a66:	79fb      	ldrb	r3, [r7, #7]
 8000a68:	f003 021f 	and.w	r2, r3, #31
 8000a6c:	4907      	ldr	r1, [pc, #28]	; (8000a8c <__NVIC_EnableIRQ+0x38>)
 8000a6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a72:	095b      	lsrs	r3, r3, #5
 8000a74:	2001      	movs	r0, #1
 8000a76:	fa00 f202 	lsl.w	r2, r0, r2
 8000a7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a7e:	bf00      	nop
 8000a80:	370c      	adds	r7, #12
 8000a82:	46bd      	mov	sp, r7
 8000a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop
 8000a8c:	e000e100 	.word	0xe000e100

08000a90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a90:	b480      	push	{r7}
 8000a92:	b083      	sub	sp, #12
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	4603      	mov	r3, r0
 8000a98:	6039      	str	r1, [r7, #0]
 8000a9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	db0a      	blt.n	8000aba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aa4:	683b      	ldr	r3, [r7, #0]
 8000aa6:	b2da      	uxtb	r2, r3
 8000aa8:	490c      	ldr	r1, [pc, #48]	; (8000adc <__NVIC_SetPriority+0x4c>)
 8000aaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aae:	0112      	lsls	r2, r2, #4
 8000ab0:	b2d2      	uxtb	r2, r2
 8000ab2:	440b      	add	r3, r1
 8000ab4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ab8:	e00a      	b.n	8000ad0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aba:	683b      	ldr	r3, [r7, #0]
 8000abc:	b2da      	uxtb	r2, r3
 8000abe:	4908      	ldr	r1, [pc, #32]	; (8000ae0 <__NVIC_SetPriority+0x50>)
 8000ac0:	79fb      	ldrb	r3, [r7, #7]
 8000ac2:	f003 030f 	and.w	r3, r3, #15
 8000ac6:	3b04      	subs	r3, #4
 8000ac8:	0112      	lsls	r2, r2, #4
 8000aca:	b2d2      	uxtb	r2, r2
 8000acc:	440b      	add	r3, r1
 8000ace:	761a      	strb	r2, [r3, #24]
}
 8000ad0:	bf00      	nop
 8000ad2:	370c      	adds	r7, #12
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ada:	4770      	bx	lr
 8000adc:	e000e100 	.word	0xe000e100
 8000ae0:	e000ed00 	.word	0xe000ed00

08000ae4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	b089      	sub	sp, #36	; 0x24
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	60f8      	str	r0, [r7, #12]
 8000aec:	60b9      	str	r1, [r7, #8]
 8000aee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	f003 0307 	and.w	r3, r3, #7
 8000af6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000af8:	69fb      	ldr	r3, [r7, #28]
 8000afa:	f1c3 0307 	rsb	r3, r3, #7
 8000afe:	2b04      	cmp	r3, #4
 8000b00:	bf28      	it	cs
 8000b02:	2304      	movcs	r3, #4
 8000b04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b06:	69fb      	ldr	r3, [r7, #28]
 8000b08:	3304      	adds	r3, #4
 8000b0a:	2b06      	cmp	r3, #6
 8000b0c:	d902      	bls.n	8000b14 <NVIC_EncodePriority+0x30>
 8000b0e:	69fb      	ldr	r3, [r7, #28]
 8000b10:	3b03      	subs	r3, #3
 8000b12:	e000      	b.n	8000b16 <NVIC_EncodePriority+0x32>
 8000b14:	2300      	movs	r3, #0
 8000b16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b18:	f04f 32ff 	mov.w	r2, #4294967295
 8000b1c:	69bb      	ldr	r3, [r7, #24]
 8000b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b22:	43da      	mvns	r2, r3
 8000b24:	68bb      	ldr	r3, [r7, #8]
 8000b26:	401a      	ands	r2, r3
 8000b28:	697b      	ldr	r3, [r7, #20]
 8000b2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b2c:	f04f 31ff 	mov.w	r1, #4294967295
 8000b30:	697b      	ldr	r3, [r7, #20]
 8000b32:	fa01 f303 	lsl.w	r3, r1, r3
 8000b36:	43d9      	mvns	r1, r3
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b3c:	4313      	orrs	r3, r2
         );
}
 8000b3e:	4618      	mov	r0, r3
 8000b40:	3724      	adds	r7, #36	; 0x24
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr
	...

08000b4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	3b01      	subs	r3, #1
 8000b58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b5c:	d301      	bcc.n	8000b62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b5e:	2301      	movs	r3, #1
 8000b60:	e00f      	b.n	8000b82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b62:	4a0a      	ldr	r2, [pc, #40]	; (8000b8c <SysTick_Config+0x40>)
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	3b01      	subs	r3, #1
 8000b68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b6a:	210f      	movs	r1, #15
 8000b6c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b70:	f7ff ff8e 	bl	8000a90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b74:	4b05      	ldr	r3, [pc, #20]	; (8000b8c <SysTick_Config+0x40>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b7a:	4b04      	ldr	r3, [pc, #16]	; (8000b8c <SysTick_Config+0x40>)
 8000b7c:	2207      	movs	r2, #7
 8000b7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b80:	2300      	movs	r3, #0
}
 8000b82:	4618      	mov	r0, r3
 8000b84:	3708      	adds	r7, #8
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	e000e010 	.word	0xe000e010

08000b90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b082      	sub	sp, #8
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b98:	6878      	ldr	r0, [r7, #4]
 8000b9a:	f7ff ff29 	bl	80009f0 <__NVIC_SetPriorityGrouping>
}
 8000b9e:	bf00      	nop
 8000ba0:	3708      	adds	r7, #8
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}

08000ba6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ba6:	b580      	push	{r7, lr}
 8000ba8:	b086      	sub	sp, #24
 8000baa:	af00      	add	r7, sp, #0
 8000bac:	4603      	mov	r3, r0
 8000bae:	60b9      	str	r1, [r7, #8]
 8000bb0:	607a      	str	r2, [r7, #4]
 8000bb2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000bb8:	f7ff ff3e 	bl	8000a38 <__NVIC_GetPriorityGrouping>
 8000bbc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bbe:	687a      	ldr	r2, [r7, #4]
 8000bc0:	68b9      	ldr	r1, [r7, #8]
 8000bc2:	6978      	ldr	r0, [r7, #20]
 8000bc4:	f7ff ff8e 	bl	8000ae4 <NVIC_EncodePriority>
 8000bc8:	4602      	mov	r2, r0
 8000bca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bce:	4611      	mov	r1, r2
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f7ff ff5d 	bl	8000a90 <__NVIC_SetPriority>
}
 8000bd6:	bf00      	nop
 8000bd8:	3718      	adds	r7, #24
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}

08000bde <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bde:	b580      	push	{r7, lr}
 8000be0:	b082      	sub	sp, #8
 8000be2:	af00      	add	r7, sp, #0
 8000be4:	4603      	mov	r3, r0
 8000be6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000be8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bec:	4618      	mov	r0, r3
 8000bee:	f7ff ff31 	bl	8000a54 <__NVIC_EnableIRQ>
}
 8000bf2:	bf00      	nop
 8000bf4:	3708      	adds	r7, #8
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}

08000bfa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bfa:	b580      	push	{r7, lr}
 8000bfc:	b082      	sub	sp, #8
 8000bfe:	af00      	add	r7, sp, #0
 8000c00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c02:	6878      	ldr	r0, [r7, #4]
 8000c04:	f7ff ffa2 	bl	8000b4c <SysTick_Config>
 8000c08:	4603      	mov	r3, r0
}
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	3708      	adds	r7, #8
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}

08000c12 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000c12:	b480      	push	{r7}
 8000c14:	b083      	sub	sp, #12
 8000c16:	af00      	add	r7, sp, #0
 8000c18:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000c20:	b2db      	uxtb	r3, r3
 8000c22:	2b02      	cmp	r3, #2
 8000c24:	d004      	beq.n	8000c30 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	2280      	movs	r2, #128	; 0x80
 8000c2a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000c2c:	2301      	movs	r3, #1
 8000c2e:	e00c      	b.n	8000c4a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	2205      	movs	r2, #5
 8000c34:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	681a      	ldr	r2, [r3, #0]
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	f022 0201 	bic.w	r2, r2, #1
 8000c46:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000c48:	2300      	movs	r3, #0
}
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	370c      	adds	r7, #12
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr
	...

08000c58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b089      	sub	sp, #36	; 0x24
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
 8000c60:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000c62:	2300      	movs	r3, #0
 8000c64:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000c66:	2300      	movs	r3, #0
 8000c68:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c6e:	2300      	movs	r3, #0
 8000c70:	61fb      	str	r3, [r7, #28]
 8000c72:	e16b      	b.n	8000f4c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000c74:	2201      	movs	r2, #1
 8000c76:	69fb      	ldr	r3, [r7, #28]
 8000c78:	fa02 f303 	lsl.w	r3, r2, r3
 8000c7c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	697a      	ldr	r2, [r7, #20]
 8000c84:	4013      	ands	r3, r2
 8000c86:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000c88:	693a      	ldr	r2, [r7, #16]
 8000c8a:	697b      	ldr	r3, [r7, #20]
 8000c8c:	429a      	cmp	r2, r3
 8000c8e:	f040 815a 	bne.w	8000f46 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	685b      	ldr	r3, [r3, #4]
 8000c96:	2b01      	cmp	r3, #1
 8000c98:	d00b      	beq.n	8000cb2 <HAL_GPIO_Init+0x5a>
 8000c9a:	683b      	ldr	r3, [r7, #0]
 8000c9c:	685b      	ldr	r3, [r3, #4]
 8000c9e:	2b02      	cmp	r3, #2
 8000ca0:	d007      	beq.n	8000cb2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ca2:	683b      	ldr	r3, [r7, #0]
 8000ca4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ca6:	2b11      	cmp	r3, #17
 8000ca8:	d003      	beq.n	8000cb2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000caa:	683b      	ldr	r3, [r7, #0]
 8000cac:	685b      	ldr	r3, [r3, #4]
 8000cae:	2b12      	cmp	r3, #18
 8000cb0:	d130      	bne.n	8000d14 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	689b      	ldr	r3, [r3, #8]
 8000cb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000cb8:	69fb      	ldr	r3, [r7, #28]
 8000cba:	005b      	lsls	r3, r3, #1
 8000cbc:	2203      	movs	r2, #3
 8000cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc2:	43db      	mvns	r3, r3
 8000cc4:	69ba      	ldr	r2, [r7, #24]
 8000cc6:	4013      	ands	r3, r2
 8000cc8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000cca:	683b      	ldr	r3, [r7, #0]
 8000ccc:	68da      	ldr	r2, [r3, #12]
 8000cce:	69fb      	ldr	r3, [r7, #28]
 8000cd0:	005b      	lsls	r3, r3, #1
 8000cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd6:	69ba      	ldr	r2, [r7, #24]
 8000cd8:	4313      	orrs	r3, r2
 8000cda:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	69ba      	ldr	r2, [r7, #24]
 8000ce0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	685b      	ldr	r3, [r3, #4]
 8000ce6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ce8:	2201      	movs	r2, #1
 8000cea:	69fb      	ldr	r3, [r7, #28]
 8000cec:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf0:	43db      	mvns	r3, r3
 8000cf2:	69ba      	ldr	r2, [r7, #24]
 8000cf4:	4013      	ands	r3, r2
 8000cf6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	685b      	ldr	r3, [r3, #4]
 8000cfc:	091b      	lsrs	r3, r3, #4
 8000cfe:	f003 0201 	and.w	r2, r3, #1
 8000d02:	69fb      	ldr	r3, [r7, #28]
 8000d04:	fa02 f303 	lsl.w	r3, r2, r3
 8000d08:	69ba      	ldr	r2, [r7, #24]
 8000d0a:	4313      	orrs	r3, r2
 8000d0c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	69ba      	ldr	r2, [r7, #24]
 8000d12:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	68db      	ldr	r3, [r3, #12]
 8000d18:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d1a:	69fb      	ldr	r3, [r7, #28]
 8000d1c:	005b      	lsls	r3, r3, #1
 8000d1e:	2203      	movs	r2, #3
 8000d20:	fa02 f303 	lsl.w	r3, r2, r3
 8000d24:	43db      	mvns	r3, r3
 8000d26:	69ba      	ldr	r2, [r7, #24]
 8000d28:	4013      	ands	r3, r2
 8000d2a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	689a      	ldr	r2, [r3, #8]
 8000d30:	69fb      	ldr	r3, [r7, #28]
 8000d32:	005b      	lsls	r3, r3, #1
 8000d34:	fa02 f303 	lsl.w	r3, r2, r3
 8000d38:	69ba      	ldr	r2, [r7, #24]
 8000d3a:	4313      	orrs	r3, r2
 8000d3c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	69ba      	ldr	r2, [r7, #24]
 8000d42:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	685b      	ldr	r3, [r3, #4]
 8000d48:	2b02      	cmp	r3, #2
 8000d4a:	d003      	beq.n	8000d54 <HAL_GPIO_Init+0xfc>
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	685b      	ldr	r3, [r3, #4]
 8000d50:	2b12      	cmp	r3, #18
 8000d52:	d123      	bne.n	8000d9c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d54:	69fb      	ldr	r3, [r7, #28]
 8000d56:	08da      	lsrs	r2, r3, #3
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	3208      	adds	r2, #8
 8000d5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d60:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d62:	69fb      	ldr	r3, [r7, #28]
 8000d64:	f003 0307 	and.w	r3, r3, #7
 8000d68:	009b      	lsls	r3, r3, #2
 8000d6a:	220f      	movs	r2, #15
 8000d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d70:	43db      	mvns	r3, r3
 8000d72:	69ba      	ldr	r2, [r7, #24]
 8000d74:	4013      	ands	r3, r2
 8000d76:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	691a      	ldr	r2, [r3, #16]
 8000d7c:	69fb      	ldr	r3, [r7, #28]
 8000d7e:	f003 0307 	and.w	r3, r3, #7
 8000d82:	009b      	lsls	r3, r3, #2
 8000d84:	fa02 f303 	lsl.w	r3, r2, r3
 8000d88:	69ba      	ldr	r2, [r7, #24]
 8000d8a:	4313      	orrs	r3, r2
 8000d8c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000d8e:	69fb      	ldr	r3, [r7, #28]
 8000d90:	08da      	lsrs	r2, r3, #3
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	3208      	adds	r2, #8
 8000d96:	69b9      	ldr	r1, [r7, #24]
 8000d98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000da2:	69fb      	ldr	r3, [r7, #28]
 8000da4:	005b      	lsls	r3, r3, #1
 8000da6:	2203      	movs	r2, #3
 8000da8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dac:	43db      	mvns	r3, r3
 8000dae:	69ba      	ldr	r2, [r7, #24]
 8000db0:	4013      	ands	r3, r2
 8000db2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	685b      	ldr	r3, [r3, #4]
 8000db8:	f003 0203 	and.w	r2, r3, #3
 8000dbc:	69fb      	ldr	r3, [r7, #28]
 8000dbe:	005b      	lsls	r3, r3, #1
 8000dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc4:	69ba      	ldr	r2, [r7, #24]
 8000dc6:	4313      	orrs	r3, r2
 8000dc8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	69ba      	ldr	r2, [r7, #24]
 8000dce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	685b      	ldr	r3, [r3, #4]
 8000dd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	f000 80b4 	beq.w	8000f46 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dde:	2300      	movs	r3, #0
 8000de0:	60fb      	str	r3, [r7, #12]
 8000de2:	4b60      	ldr	r3, [pc, #384]	; (8000f64 <HAL_GPIO_Init+0x30c>)
 8000de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000de6:	4a5f      	ldr	r2, [pc, #380]	; (8000f64 <HAL_GPIO_Init+0x30c>)
 8000de8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dec:	6453      	str	r3, [r2, #68]	; 0x44
 8000dee:	4b5d      	ldr	r3, [pc, #372]	; (8000f64 <HAL_GPIO_Init+0x30c>)
 8000df0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000df2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000df6:	60fb      	str	r3, [r7, #12]
 8000df8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000dfa:	4a5b      	ldr	r2, [pc, #364]	; (8000f68 <HAL_GPIO_Init+0x310>)
 8000dfc:	69fb      	ldr	r3, [r7, #28]
 8000dfe:	089b      	lsrs	r3, r3, #2
 8000e00:	3302      	adds	r3, #2
 8000e02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e06:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e08:	69fb      	ldr	r3, [r7, #28]
 8000e0a:	f003 0303 	and.w	r3, r3, #3
 8000e0e:	009b      	lsls	r3, r3, #2
 8000e10:	220f      	movs	r2, #15
 8000e12:	fa02 f303 	lsl.w	r3, r2, r3
 8000e16:	43db      	mvns	r3, r3
 8000e18:	69ba      	ldr	r2, [r7, #24]
 8000e1a:	4013      	ands	r3, r2
 8000e1c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	4a52      	ldr	r2, [pc, #328]	; (8000f6c <HAL_GPIO_Init+0x314>)
 8000e22:	4293      	cmp	r3, r2
 8000e24:	d02b      	beq.n	8000e7e <HAL_GPIO_Init+0x226>
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	4a51      	ldr	r2, [pc, #324]	; (8000f70 <HAL_GPIO_Init+0x318>)
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	d025      	beq.n	8000e7a <HAL_GPIO_Init+0x222>
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	4a50      	ldr	r2, [pc, #320]	; (8000f74 <HAL_GPIO_Init+0x31c>)
 8000e32:	4293      	cmp	r3, r2
 8000e34:	d01f      	beq.n	8000e76 <HAL_GPIO_Init+0x21e>
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	4a4f      	ldr	r2, [pc, #316]	; (8000f78 <HAL_GPIO_Init+0x320>)
 8000e3a:	4293      	cmp	r3, r2
 8000e3c:	d019      	beq.n	8000e72 <HAL_GPIO_Init+0x21a>
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	4a4e      	ldr	r2, [pc, #312]	; (8000f7c <HAL_GPIO_Init+0x324>)
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d013      	beq.n	8000e6e <HAL_GPIO_Init+0x216>
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	4a4d      	ldr	r2, [pc, #308]	; (8000f80 <HAL_GPIO_Init+0x328>)
 8000e4a:	4293      	cmp	r3, r2
 8000e4c:	d00d      	beq.n	8000e6a <HAL_GPIO_Init+0x212>
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	4a4c      	ldr	r2, [pc, #304]	; (8000f84 <HAL_GPIO_Init+0x32c>)
 8000e52:	4293      	cmp	r3, r2
 8000e54:	d007      	beq.n	8000e66 <HAL_GPIO_Init+0x20e>
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	4a4b      	ldr	r2, [pc, #300]	; (8000f88 <HAL_GPIO_Init+0x330>)
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	d101      	bne.n	8000e62 <HAL_GPIO_Init+0x20a>
 8000e5e:	2307      	movs	r3, #7
 8000e60:	e00e      	b.n	8000e80 <HAL_GPIO_Init+0x228>
 8000e62:	2308      	movs	r3, #8
 8000e64:	e00c      	b.n	8000e80 <HAL_GPIO_Init+0x228>
 8000e66:	2306      	movs	r3, #6
 8000e68:	e00a      	b.n	8000e80 <HAL_GPIO_Init+0x228>
 8000e6a:	2305      	movs	r3, #5
 8000e6c:	e008      	b.n	8000e80 <HAL_GPIO_Init+0x228>
 8000e6e:	2304      	movs	r3, #4
 8000e70:	e006      	b.n	8000e80 <HAL_GPIO_Init+0x228>
 8000e72:	2303      	movs	r3, #3
 8000e74:	e004      	b.n	8000e80 <HAL_GPIO_Init+0x228>
 8000e76:	2302      	movs	r3, #2
 8000e78:	e002      	b.n	8000e80 <HAL_GPIO_Init+0x228>
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	e000      	b.n	8000e80 <HAL_GPIO_Init+0x228>
 8000e7e:	2300      	movs	r3, #0
 8000e80:	69fa      	ldr	r2, [r7, #28]
 8000e82:	f002 0203 	and.w	r2, r2, #3
 8000e86:	0092      	lsls	r2, r2, #2
 8000e88:	4093      	lsls	r3, r2
 8000e8a:	69ba      	ldr	r2, [r7, #24]
 8000e8c:	4313      	orrs	r3, r2
 8000e8e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e90:	4935      	ldr	r1, [pc, #212]	; (8000f68 <HAL_GPIO_Init+0x310>)
 8000e92:	69fb      	ldr	r3, [r7, #28]
 8000e94:	089b      	lsrs	r3, r3, #2
 8000e96:	3302      	adds	r3, #2
 8000e98:	69ba      	ldr	r2, [r7, #24]
 8000e9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e9e:	4b3b      	ldr	r3, [pc, #236]	; (8000f8c <HAL_GPIO_Init+0x334>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ea4:	693b      	ldr	r3, [r7, #16]
 8000ea6:	43db      	mvns	r3, r3
 8000ea8:	69ba      	ldr	r2, [r7, #24]
 8000eaa:	4013      	ands	r3, r2
 8000eac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	685b      	ldr	r3, [r3, #4]
 8000eb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d003      	beq.n	8000ec2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000eba:	69ba      	ldr	r2, [r7, #24]
 8000ebc:	693b      	ldr	r3, [r7, #16]
 8000ebe:	4313      	orrs	r3, r2
 8000ec0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000ec2:	4a32      	ldr	r2, [pc, #200]	; (8000f8c <HAL_GPIO_Init+0x334>)
 8000ec4:	69bb      	ldr	r3, [r7, #24]
 8000ec6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000ec8:	4b30      	ldr	r3, [pc, #192]	; (8000f8c <HAL_GPIO_Init+0x334>)
 8000eca:	685b      	ldr	r3, [r3, #4]
 8000ecc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ece:	693b      	ldr	r3, [r7, #16]
 8000ed0:	43db      	mvns	r3, r3
 8000ed2:	69ba      	ldr	r2, [r7, #24]
 8000ed4:	4013      	ands	r3, r2
 8000ed6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	685b      	ldr	r3, [r3, #4]
 8000edc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d003      	beq.n	8000eec <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000ee4:	69ba      	ldr	r2, [r7, #24]
 8000ee6:	693b      	ldr	r3, [r7, #16]
 8000ee8:	4313      	orrs	r3, r2
 8000eea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000eec:	4a27      	ldr	r2, [pc, #156]	; (8000f8c <HAL_GPIO_Init+0x334>)
 8000eee:	69bb      	ldr	r3, [r7, #24]
 8000ef0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ef2:	4b26      	ldr	r3, [pc, #152]	; (8000f8c <HAL_GPIO_Init+0x334>)
 8000ef4:	689b      	ldr	r3, [r3, #8]
 8000ef6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ef8:	693b      	ldr	r3, [r7, #16]
 8000efa:	43db      	mvns	r3, r3
 8000efc:	69ba      	ldr	r2, [r7, #24]
 8000efe:	4013      	ands	r3, r2
 8000f00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	685b      	ldr	r3, [r3, #4]
 8000f06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d003      	beq.n	8000f16 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000f0e:	69ba      	ldr	r2, [r7, #24]
 8000f10:	693b      	ldr	r3, [r7, #16]
 8000f12:	4313      	orrs	r3, r2
 8000f14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f16:	4a1d      	ldr	r2, [pc, #116]	; (8000f8c <HAL_GPIO_Init+0x334>)
 8000f18:	69bb      	ldr	r3, [r7, #24]
 8000f1a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f1c:	4b1b      	ldr	r3, [pc, #108]	; (8000f8c <HAL_GPIO_Init+0x334>)
 8000f1e:	68db      	ldr	r3, [r3, #12]
 8000f20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f22:	693b      	ldr	r3, [r7, #16]
 8000f24:	43db      	mvns	r3, r3
 8000f26:	69ba      	ldr	r2, [r7, #24]
 8000f28:	4013      	ands	r3, r2
 8000f2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	685b      	ldr	r3, [r3, #4]
 8000f30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d003      	beq.n	8000f40 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000f38:	69ba      	ldr	r2, [r7, #24]
 8000f3a:	693b      	ldr	r3, [r7, #16]
 8000f3c:	4313      	orrs	r3, r2
 8000f3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f40:	4a12      	ldr	r2, [pc, #72]	; (8000f8c <HAL_GPIO_Init+0x334>)
 8000f42:	69bb      	ldr	r3, [r7, #24]
 8000f44:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f46:	69fb      	ldr	r3, [r7, #28]
 8000f48:	3301      	adds	r3, #1
 8000f4a:	61fb      	str	r3, [r7, #28]
 8000f4c:	69fb      	ldr	r3, [r7, #28]
 8000f4e:	2b0f      	cmp	r3, #15
 8000f50:	f67f ae90 	bls.w	8000c74 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000f54:	bf00      	nop
 8000f56:	bf00      	nop
 8000f58:	3724      	adds	r7, #36	; 0x24
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop
 8000f64:	40023800 	.word	0x40023800
 8000f68:	40013800 	.word	0x40013800
 8000f6c:	40020000 	.word	0x40020000
 8000f70:	40020400 	.word	0x40020400
 8000f74:	40020800 	.word	0x40020800
 8000f78:	40020c00 	.word	0x40020c00
 8000f7c:	40021000 	.word	0x40021000
 8000f80:	40021400 	.word	0x40021400
 8000f84:	40021800 	.word	0x40021800
 8000f88:	40021c00 	.word	0x40021c00
 8000f8c:	40013c00 	.word	0x40013c00

08000f90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b083      	sub	sp, #12
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
 8000f98:	460b      	mov	r3, r1
 8000f9a:	807b      	strh	r3, [r7, #2]
 8000f9c:	4613      	mov	r3, r2
 8000f9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000fa0:	787b      	ldrb	r3, [r7, #1]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d003      	beq.n	8000fae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000fa6:	887a      	ldrh	r2, [r7, #2]
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000fac:	e003      	b.n	8000fb6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000fae:	887b      	ldrh	r3, [r7, #2]
 8000fb0:	041a      	lsls	r2, r3, #16
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	619a      	str	r2, [r3, #24]
}
 8000fb6:	bf00      	nop
 8000fb8:	370c      	adds	r7, #12
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr
	...

08000fc4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b086      	sub	sp, #24
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d101      	bne.n	8000fd6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	e25e      	b.n	8001494 <HAL_RCC_OscConfig+0x4d0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	f003 0301 	and.w	r3, r3, #1
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d075      	beq.n	80010ce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000fe2:	4b88      	ldr	r3, [pc, #544]	; (8001204 <HAL_RCC_OscConfig+0x240>)
 8000fe4:	689b      	ldr	r3, [r3, #8]
 8000fe6:	f003 030c 	and.w	r3, r3, #12
 8000fea:	2b04      	cmp	r3, #4
 8000fec:	d00c      	beq.n	8001008 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000fee:	4b85      	ldr	r3, [pc, #532]	; (8001204 <HAL_RCC_OscConfig+0x240>)
 8000ff0:	689b      	ldr	r3, [r3, #8]
 8000ff2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000ff6:	2b08      	cmp	r3, #8
 8000ff8:	d112      	bne.n	8001020 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000ffa:	4b82      	ldr	r3, [pc, #520]	; (8001204 <HAL_RCC_OscConfig+0x240>)
 8000ffc:	685b      	ldr	r3, [r3, #4]
 8000ffe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001002:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001006:	d10b      	bne.n	8001020 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001008:	4b7e      	ldr	r3, [pc, #504]	; (8001204 <HAL_RCC_OscConfig+0x240>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001010:	2b00      	cmp	r3, #0
 8001012:	d05b      	beq.n	80010cc <HAL_RCC_OscConfig+0x108>
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d157      	bne.n	80010cc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800101c:	2301      	movs	r3, #1
 800101e:	e239      	b.n	8001494 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001028:	d106      	bne.n	8001038 <HAL_RCC_OscConfig+0x74>
 800102a:	4b76      	ldr	r3, [pc, #472]	; (8001204 <HAL_RCC_OscConfig+0x240>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	4a75      	ldr	r2, [pc, #468]	; (8001204 <HAL_RCC_OscConfig+0x240>)
 8001030:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001034:	6013      	str	r3, [r2, #0]
 8001036:	e01d      	b.n	8001074 <HAL_RCC_OscConfig+0xb0>
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001040:	d10c      	bne.n	800105c <HAL_RCC_OscConfig+0x98>
 8001042:	4b70      	ldr	r3, [pc, #448]	; (8001204 <HAL_RCC_OscConfig+0x240>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	4a6f      	ldr	r2, [pc, #444]	; (8001204 <HAL_RCC_OscConfig+0x240>)
 8001048:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800104c:	6013      	str	r3, [r2, #0]
 800104e:	4b6d      	ldr	r3, [pc, #436]	; (8001204 <HAL_RCC_OscConfig+0x240>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	4a6c      	ldr	r2, [pc, #432]	; (8001204 <HAL_RCC_OscConfig+0x240>)
 8001054:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001058:	6013      	str	r3, [r2, #0]
 800105a:	e00b      	b.n	8001074 <HAL_RCC_OscConfig+0xb0>
 800105c:	4b69      	ldr	r3, [pc, #420]	; (8001204 <HAL_RCC_OscConfig+0x240>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4a68      	ldr	r2, [pc, #416]	; (8001204 <HAL_RCC_OscConfig+0x240>)
 8001062:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001066:	6013      	str	r3, [r2, #0]
 8001068:	4b66      	ldr	r3, [pc, #408]	; (8001204 <HAL_RCC_OscConfig+0x240>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4a65      	ldr	r2, [pc, #404]	; (8001204 <HAL_RCC_OscConfig+0x240>)
 800106e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001072:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	2b00      	cmp	r3, #0
 800107a:	d013      	beq.n	80010a4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800107c:	f7ff fcac 	bl	80009d8 <HAL_GetTick>
 8001080:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001082:	e008      	b.n	8001096 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001084:	f7ff fca8 	bl	80009d8 <HAL_GetTick>
 8001088:	4602      	mov	r2, r0
 800108a:	693b      	ldr	r3, [r7, #16]
 800108c:	1ad3      	subs	r3, r2, r3
 800108e:	2b64      	cmp	r3, #100	; 0x64
 8001090:	d901      	bls.n	8001096 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001092:	2303      	movs	r3, #3
 8001094:	e1fe      	b.n	8001494 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001096:	4b5b      	ldr	r3, [pc, #364]	; (8001204 <HAL_RCC_OscConfig+0x240>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d0f0      	beq.n	8001084 <HAL_RCC_OscConfig+0xc0>
 80010a2:	e014      	b.n	80010ce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010a4:	f7ff fc98 	bl	80009d8 <HAL_GetTick>
 80010a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010aa:	e008      	b.n	80010be <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010ac:	f7ff fc94 	bl	80009d8 <HAL_GetTick>
 80010b0:	4602      	mov	r2, r0
 80010b2:	693b      	ldr	r3, [r7, #16]
 80010b4:	1ad3      	subs	r3, r2, r3
 80010b6:	2b64      	cmp	r3, #100	; 0x64
 80010b8:	d901      	bls.n	80010be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80010ba:	2303      	movs	r3, #3
 80010bc:	e1ea      	b.n	8001494 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010be:	4b51      	ldr	r3, [pc, #324]	; (8001204 <HAL_RCC_OscConfig+0x240>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d1f0      	bne.n	80010ac <HAL_RCC_OscConfig+0xe8>
 80010ca:	e000      	b.n	80010ce <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f003 0302 	and.w	r3, r3, #2
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d063      	beq.n	80011a2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80010da:	4b4a      	ldr	r3, [pc, #296]	; (8001204 <HAL_RCC_OscConfig+0x240>)
 80010dc:	689b      	ldr	r3, [r3, #8]
 80010de:	f003 030c 	and.w	r3, r3, #12
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d00b      	beq.n	80010fe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80010e6:	4b47      	ldr	r3, [pc, #284]	; (8001204 <HAL_RCC_OscConfig+0x240>)
 80010e8:	689b      	ldr	r3, [r3, #8]
 80010ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80010ee:	2b08      	cmp	r3, #8
 80010f0:	d11c      	bne.n	800112c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80010f2:	4b44      	ldr	r3, [pc, #272]	; (8001204 <HAL_RCC_OscConfig+0x240>)
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d116      	bne.n	800112c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010fe:	4b41      	ldr	r3, [pc, #260]	; (8001204 <HAL_RCC_OscConfig+0x240>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f003 0302 	and.w	r3, r3, #2
 8001106:	2b00      	cmp	r3, #0
 8001108:	d005      	beq.n	8001116 <HAL_RCC_OscConfig+0x152>
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	68db      	ldr	r3, [r3, #12]
 800110e:	2b01      	cmp	r3, #1
 8001110:	d001      	beq.n	8001116 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001112:	2301      	movs	r3, #1
 8001114:	e1be      	b.n	8001494 <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001116:	4b3b      	ldr	r3, [pc, #236]	; (8001204 <HAL_RCC_OscConfig+0x240>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	691b      	ldr	r3, [r3, #16]
 8001122:	00db      	lsls	r3, r3, #3
 8001124:	4937      	ldr	r1, [pc, #220]	; (8001204 <HAL_RCC_OscConfig+0x240>)
 8001126:	4313      	orrs	r3, r2
 8001128:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800112a:	e03a      	b.n	80011a2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	68db      	ldr	r3, [r3, #12]
 8001130:	2b00      	cmp	r3, #0
 8001132:	d020      	beq.n	8001176 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001134:	4b34      	ldr	r3, [pc, #208]	; (8001208 <HAL_RCC_OscConfig+0x244>)
 8001136:	2201      	movs	r2, #1
 8001138:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800113a:	f7ff fc4d 	bl	80009d8 <HAL_GetTick>
 800113e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001140:	e008      	b.n	8001154 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001142:	f7ff fc49 	bl	80009d8 <HAL_GetTick>
 8001146:	4602      	mov	r2, r0
 8001148:	693b      	ldr	r3, [r7, #16]
 800114a:	1ad3      	subs	r3, r2, r3
 800114c:	2b02      	cmp	r3, #2
 800114e:	d901      	bls.n	8001154 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001150:	2303      	movs	r3, #3
 8001152:	e19f      	b.n	8001494 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001154:	4b2b      	ldr	r3, [pc, #172]	; (8001204 <HAL_RCC_OscConfig+0x240>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f003 0302 	and.w	r3, r3, #2
 800115c:	2b00      	cmp	r3, #0
 800115e:	d0f0      	beq.n	8001142 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001160:	4b28      	ldr	r3, [pc, #160]	; (8001204 <HAL_RCC_OscConfig+0x240>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	691b      	ldr	r3, [r3, #16]
 800116c:	00db      	lsls	r3, r3, #3
 800116e:	4925      	ldr	r1, [pc, #148]	; (8001204 <HAL_RCC_OscConfig+0x240>)
 8001170:	4313      	orrs	r3, r2
 8001172:	600b      	str	r3, [r1, #0]
 8001174:	e015      	b.n	80011a2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001176:	4b24      	ldr	r3, [pc, #144]	; (8001208 <HAL_RCC_OscConfig+0x244>)
 8001178:	2200      	movs	r2, #0
 800117a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800117c:	f7ff fc2c 	bl	80009d8 <HAL_GetTick>
 8001180:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001182:	e008      	b.n	8001196 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001184:	f7ff fc28 	bl	80009d8 <HAL_GetTick>
 8001188:	4602      	mov	r2, r0
 800118a:	693b      	ldr	r3, [r7, #16]
 800118c:	1ad3      	subs	r3, r2, r3
 800118e:	2b02      	cmp	r3, #2
 8001190:	d901      	bls.n	8001196 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001192:	2303      	movs	r3, #3
 8001194:	e17e      	b.n	8001494 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001196:	4b1b      	ldr	r3, [pc, #108]	; (8001204 <HAL_RCC_OscConfig+0x240>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f003 0302 	and.w	r3, r3, #2
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d1f0      	bne.n	8001184 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f003 0308 	and.w	r3, r3, #8
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d036      	beq.n	800121c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	695b      	ldr	r3, [r3, #20]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d016      	beq.n	80011e4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80011b6:	4b15      	ldr	r3, [pc, #84]	; (800120c <HAL_RCC_OscConfig+0x248>)
 80011b8:	2201      	movs	r2, #1
 80011ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011bc:	f7ff fc0c 	bl	80009d8 <HAL_GetTick>
 80011c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011c2:	e008      	b.n	80011d6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80011c4:	f7ff fc08 	bl	80009d8 <HAL_GetTick>
 80011c8:	4602      	mov	r2, r0
 80011ca:	693b      	ldr	r3, [r7, #16]
 80011cc:	1ad3      	subs	r3, r2, r3
 80011ce:	2b02      	cmp	r3, #2
 80011d0:	d901      	bls.n	80011d6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80011d2:	2303      	movs	r3, #3
 80011d4:	e15e      	b.n	8001494 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011d6:	4b0b      	ldr	r3, [pc, #44]	; (8001204 <HAL_RCC_OscConfig+0x240>)
 80011d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80011da:	f003 0302 	and.w	r3, r3, #2
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d0f0      	beq.n	80011c4 <HAL_RCC_OscConfig+0x200>
 80011e2:	e01b      	b.n	800121c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80011e4:	4b09      	ldr	r3, [pc, #36]	; (800120c <HAL_RCC_OscConfig+0x248>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011ea:	f7ff fbf5 	bl	80009d8 <HAL_GetTick>
 80011ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011f0:	e00e      	b.n	8001210 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80011f2:	f7ff fbf1 	bl	80009d8 <HAL_GetTick>
 80011f6:	4602      	mov	r2, r0
 80011f8:	693b      	ldr	r3, [r7, #16]
 80011fa:	1ad3      	subs	r3, r2, r3
 80011fc:	2b02      	cmp	r3, #2
 80011fe:	d907      	bls.n	8001210 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001200:	2303      	movs	r3, #3
 8001202:	e147      	b.n	8001494 <HAL_RCC_OscConfig+0x4d0>
 8001204:	40023800 	.word	0x40023800
 8001208:	42470000 	.word	0x42470000
 800120c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001210:	4b88      	ldr	r3, [pc, #544]	; (8001434 <HAL_RCC_OscConfig+0x470>)
 8001212:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001214:	f003 0302 	and.w	r3, r3, #2
 8001218:	2b00      	cmp	r3, #0
 800121a:	d1ea      	bne.n	80011f2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f003 0304 	and.w	r3, r3, #4
 8001224:	2b00      	cmp	r3, #0
 8001226:	f000 8097 	beq.w	8001358 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800122a:	2300      	movs	r3, #0
 800122c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800122e:	4b81      	ldr	r3, [pc, #516]	; (8001434 <HAL_RCC_OscConfig+0x470>)
 8001230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001232:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001236:	2b00      	cmp	r3, #0
 8001238:	d10f      	bne.n	800125a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800123a:	2300      	movs	r3, #0
 800123c:	60bb      	str	r3, [r7, #8]
 800123e:	4b7d      	ldr	r3, [pc, #500]	; (8001434 <HAL_RCC_OscConfig+0x470>)
 8001240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001242:	4a7c      	ldr	r2, [pc, #496]	; (8001434 <HAL_RCC_OscConfig+0x470>)
 8001244:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001248:	6413      	str	r3, [r2, #64]	; 0x40
 800124a:	4b7a      	ldr	r3, [pc, #488]	; (8001434 <HAL_RCC_OscConfig+0x470>)
 800124c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800124e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001252:	60bb      	str	r3, [r7, #8]
 8001254:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001256:	2301      	movs	r3, #1
 8001258:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800125a:	4b77      	ldr	r3, [pc, #476]	; (8001438 <HAL_RCC_OscConfig+0x474>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001262:	2b00      	cmp	r3, #0
 8001264:	d118      	bne.n	8001298 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001266:	4b74      	ldr	r3, [pc, #464]	; (8001438 <HAL_RCC_OscConfig+0x474>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4a73      	ldr	r2, [pc, #460]	; (8001438 <HAL_RCC_OscConfig+0x474>)
 800126c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001270:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001272:	f7ff fbb1 	bl	80009d8 <HAL_GetTick>
 8001276:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001278:	e008      	b.n	800128c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800127a:	f7ff fbad 	bl	80009d8 <HAL_GetTick>
 800127e:	4602      	mov	r2, r0
 8001280:	693b      	ldr	r3, [r7, #16]
 8001282:	1ad3      	subs	r3, r2, r3
 8001284:	2b02      	cmp	r3, #2
 8001286:	d901      	bls.n	800128c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001288:	2303      	movs	r3, #3
 800128a:	e103      	b.n	8001494 <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800128c:	4b6a      	ldr	r3, [pc, #424]	; (8001438 <HAL_RCC_OscConfig+0x474>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001294:	2b00      	cmp	r3, #0
 8001296:	d0f0      	beq.n	800127a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	689b      	ldr	r3, [r3, #8]
 800129c:	2b01      	cmp	r3, #1
 800129e:	d106      	bne.n	80012ae <HAL_RCC_OscConfig+0x2ea>
 80012a0:	4b64      	ldr	r3, [pc, #400]	; (8001434 <HAL_RCC_OscConfig+0x470>)
 80012a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012a4:	4a63      	ldr	r2, [pc, #396]	; (8001434 <HAL_RCC_OscConfig+0x470>)
 80012a6:	f043 0301 	orr.w	r3, r3, #1
 80012aa:	6713      	str	r3, [r2, #112]	; 0x70
 80012ac:	e01c      	b.n	80012e8 <HAL_RCC_OscConfig+0x324>
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	689b      	ldr	r3, [r3, #8]
 80012b2:	2b05      	cmp	r3, #5
 80012b4:	d10c      	bne.n	80012d0 <HAL_RCC_OscConfig+0x30c>
 80012b6:	4b5f      	ldr	r3, [pc, #380]	; (8001434 <HAL_RCC_OscConfig+0x470>)
 80012b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012ba:	4a5e      	ldr	r2, [pc, #376]	; (8001434 <HAL_RCC_OscConfig+0x470>)
 80012bc:	f043 0304 	orr.w	r3, r3, #4
 80012c0:	6713      	str	r3, [r2, #112]	; 0x70
 80012c2:	4b5c      	ldr	r3, [pc, #368]	; (8001434 <HAL_RCC_OscConfig+0x470>)
 80012c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012c6:	4a5b      	ldr	r2, [pc, #364]	; (8001434 <HAL_RCC_OscConfig+0x470>)
 80012c8:	f043 0301 	orr.w	r3, r3, #1
 80012cc:	6713      	str	r3, [r2, #112]	; 0x70
 80012ce:	e00b      	b.n	80012e8 <HAL_RCC_OscConfig+0x324>
 80012d0:	4b58      	ldr	r3, [pc, #352]	; (8001434 <HAL_RCC_OscConfig+0x470>)
 80012d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012d4:	4a57      	ldr	r2, [pc, #348]	; (8001434 <HAL_RCC_OscConfig+0x470>)
 80012d6:	f023 0301 	bic.w	r3, r3, #1
 80012da:	6713      	str	r3, [r2, #112]	; 0x70
 80012dc:	4b55      	ldr	r3, [pc, #340]	; (8001434 <HAL_RCC_OscConfig+0x470>)
 80012de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012e0:	4a54      	ldr	r2, [pc, #336]	; (8001434 <HAL_RCC_OscConfig+0x470>)
 80012e2:	f023 0304 	bic.w	r3, r3, #4
 80012e6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	689b      	ldr	r3, [r3, #8]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d015      	beq.n	800131c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012f0:	f7ff fb72 	bl	80009d8 <HAL_GetTick>
 80012f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012f6:	e00a      	b.n	800130e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012f8:	f7ff fb6e 	bl	80009d8 <HAL_GetTick>
 80012fc:	4602      	mov	r2, r0
 80012fe:	693b      	ldr	r3, [r7, #16]
 8001300:	1ad3      	subs	r3, r2, r3
 8001302:	f241 3288 	movw	r2, #5000	; 0x1388
 8001306:	4293      	cmp	r3, r2
 8001308:	d901      	bls.n	800130e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800130a:	2303      	movs	r3, #3
 800130c:	e0c2      	b.n	8001494 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800130e:	4b49      	ldr	r3, [pc, #292]	; (8001434 <HAL_RCC_OscConfig+0x470>)
 8001310:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001312:	f003 0302 	and.w	r3, r3, #2
 8001316:	2b00      	cmp	r3, #0
 8001318:	d0ee      	beq.n	80012f8 <HAL_RCC_OscConfig+0x334>
 800131a:	e014      	b.n	8001346 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800131c:	f7ff fb5c 	bl	80009d8 <HAL_GetTick>
 8001320:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001322:	e00a      	b.n	800133a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001324:	f7ff fb58 	bl	80009d8 <HAL_GetTick>
 8001328:	4602      	mov	r2, r0
 800132a:	693b      	ldr	r3, [r7, #16]
 800132c:	1ad3      	subs	r3, r2, r3
 800132e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001332:	4293      	cmp	r3, r2
 8001334:	d901      	bls.n	800133a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001336:	2303      	movs	r3, #3
 8001338:	e0ac      	b.n	8001494 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800133a:	4b3e      	ldr	r3, [pc, #248]	; (8001434 <HAL_RCC_OscConfig+0x470>)
 800133c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800133e:	f003 0302 	and.w	r3, r3, #2
 8001342:	2b00      	cmp	r3, #0
 8001344:	d1ee      	bne.n	8001324 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001346:	7dfb      	ldrb	r3, [r7, #23]
 8001348:	2b01      	cmp	r3, #1
 800134a:	d105      	bne.n	8001358 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800134c:	4b39      	ldr	r3, [pc, #228]	; (8001434 <HAL_RCC_OscConfig+0x470>)
 800134e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001350:	4a38      	ldr	r2, [pc, #224]	; (8001434 <HAL_RCC_OscConfig+0x470>)
 8001352:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001356:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	699b      	ldr	r3, [r3, #24]
 800135c:	2b00      	cmp	r3, #0
 800135e:	f000 8098 	beq.w	8001492 <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001362:	4b34      	ldr	r3, [pc, #208]	; (8001434 <HAL_RCC_OscConfig+0x470>)
 8001364:	689b      	ldr	r3, [r3, #8]
 8001366:	f003 030c 	and.w	r3, r3, #12
 800136a:	2b08      	cmp	r3, #8
 800136c:	d05c      	beq.n	8001428 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	699b      	ldr	r3, [r3, #24]
 8001372:	2b02      	cmp	r3, #2
 8001374:	d141      	bne.n	80013fa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001376:	4b31      	ldr	r3, [pc, #196]	; (800143c <HAL_RCC_OscConfig+0x478>)
 8001378:	2200      	movs	r2, #0
 800137a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800137c:	f7ff fb2c 	bl	80009d8 <HAL_GetTick>
 8001380:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001382:	e008      	b.n	8001396 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001384:	f7ff fb28 	bl	80009d8 <HAL_GetTick>
 8001388:	4602      	mov	r2, r0
 800138a:	693b      	ldr	r3, [r7, #16]
 800138c:	1ad3      	subs	r3, r2, r3
 800138e:	2b02      	cmp	r3, #2
 8001390:	d901      	bls.n	8001396 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001392:	2303      	movs	r3, #3
 8001394:	e07e      	b.n	8001494 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001396:	4b27      	ldr	r3, [pc, #156]	; (8001434 <HAL_RCC_OscConfig+0x470>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d1f0      	bne.n	8001384 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	69da      	ldr	r2, [r3, #28]
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6a1b      	ldr	r3, [r3, #32]
 80013aa:	431a      	orrs	r2, r3
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013b0:	019b      	lsls	r3, r3, #6
 80013b2:	431a      	orrs	r2, r3
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013b8:	085b      	lsrs	r3, r3, #1
 80013ba:	3b01      	subs	r3, #1
 80013bc:	041b      	lsls	r3, r3, #16
 80013be:	431a      	orrs	r2, r3
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013c4:	061b      	lsls	r3, r3, #24
 80013c6:	491b      	ldr	r1, [pc, #108]	; (8001434 <HAL_RCC_OscConfig+0x470>)
 80013c8:	4313      	orrs	r3, r2
 80013ca:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80013cc:	4b1b      	ldr	r3, [pc, #108]	; (800143c <HAL_RCC_OscConfig+0x478>)
 80013ce:	2201      	movs	r2, #1
 80013d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013d2:	f7ff fb01 	bl	80009d8 <HAL_GetTick>
 80013d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013d8:	e008      	b.n	80013ec <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013da:	f7ff fafd 	bl	80009d8 <HAL_GetTick>
 80013de:	4602      	mov	r2, r0
 80013e0:	693b      	ldr	r3, [r7, #16]
 80013e2:	1ad3      	subs	r3, r2, r3
 80013e4:	2b02      	cmp	r3, #2
 80013e6:	d901      	bls.n	80013ec <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80013e8:	2303      	movs	r3, #3
 80013ea:	e053      	b.n	8001494 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013ec:	4b11      	ldr	r3, [pc, #68]	; (8001434 <HAL_RCC_OscConfig+0x470>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d0f0      	beq.n	80013da <HAL_RCC_OscConfig+0x416>
 80013f8:	e04b      	b.n	8001492 <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013fa:	4b10      	ldr	r3, [pc, #64]	; (800143c <HAL_RCC_OscConfig+0x478>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001400:	f7ff faea 	bl	80009d8 <HAL_GetTick>
 8001404:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001406:	e008      	b.n	800141a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001408:	f7ff fae6 	bl	80009d8 <HAL_GetTick>
 800140c:	4602      	mov	r2, r0
 800140e:	693b      	ldr	r3, [r7, #16]
 8001410:	1ad3      	subs	r3, r2, r3
 8001412:	2b02      	cmp	r3, #2
 8001414:	d901      	bls.n	800141a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001416:	2303      	movs	r3, #3
 8001418:	e03c      	b.n	8001494 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800141a:	4b06      	ldr	r3, [pc, #24]	; (8001434 <HAL_RCC_OscConfig+0x470>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001422:	2b00      	cmp	r3, #0
 8001424:	d1f0      	bne.n	8001408 <HAL_RCC_OscConfig+0x444>
 8001426:	e034      	b.n	8001492 <HAL_RCC_OscConfig+0x4ce>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	699b      	ldr	r3, [r3, #24]
 800142c:	2b01      	cmp	r3, #1
 800142e:	d107      	bne.n	8001440 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001430:	2301      	movs	r3, #1
 8001432:	e02f      	b.n	8001494 <HAL_RCC_OscConfig+0x4d0>
 8001434:	40023800 	.word	0x40023800
 8001438:	40007000 	.word	0x40007000
 800143c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001440:	4b16      	ldr	r3, [pc, #88]	; (800149c <HAL_RCC_OscConfig+0x4d8>)
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	69db      	ldr	r3, [r3, #28]
 8001450:	429a      	cmp	r2, r3
 8001452:	d11c      	bne.n	800148e <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800145e:	429a      	cmp	r2, r3
 8001460:	d115      	bne.n	800148e <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001462:	68fa      	ldr	r2, [r7, #12]
 8001464:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001468:	4013      	ands	r3, r2
 800146a:	687a      	ldr	r2, [r7, #4]
 800146c:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800146e:	4293      	cmp	r3, r2
 8001470:	d10d      	bne.n	800148e <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800147c:	429a      	cmp	r2, r3
 800147e:	d106      	bne.n	800148e <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800148a:	429a      	cmp	r2, r3
 800148c:	d001      	beq.n	8001492 <HAL_RCC_OscConfig+0x4ce>
        {
          return HAL_ERROR;
 800148e:	2301      	movs	r3, #1
 8001490:	e000      	b.n	8001494 <HAL_RCC_OscConfig+0x4d0>
        }
      }
    }
  }
  return HAL_OK;
 8001492:	2300      	movs	r3, #0
}
 8001494:	4618      	mov	r0, r3
 8001496:	3718      	adds	r7, #24
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}
 800149c:	40023800 	.word	0x40023800

080014a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b084      	sub	sp, #16
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
 80014a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d101      	bne.n	80014b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80014b0:	2301      	movs	r3, #1
 80014b2:	e0cc      	b.n	800164e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80014b4:	4b68      	ldr	r3, [pc, #416]	; (8001658 <HAL_RCC_ClockConfig+0x1b8>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f003 030f 	and.w	r3, r3, #15
 80014bc:	683a      	ldr	r2, [r7, #0]
 80014be:	429a      	cmp	r2, r3
 80014c0:	d90c      	bls.n	80014dc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014c2:	4b65      	ldr	r3, [pc, #404]	; (8001658 <HAL_RCC_ClockConfig+0x1b8>)
 80014c4:	683a      	ldr	r2, [r7, #0]
 80014c6:	b2d2      	uxtb	r2, r2
 80014c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80014ca:	4b63      	ldr	r3, [pc, #396]	; (8001658 <HAL_RCC_ClockConfig+0x1b8>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f003 030f 	and.w	r3, r3, #15
 80014d2:	683a      	ldr	r2, [r7, #0]
 80014d4:	429a      	cmp	r2, r3
 80014d6:	d001      	beq.n	80014dc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80014d8:	2301      	movs	r3, #1
 80014da:	e0b8      	b.n	800164e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f003 0302 	and.w	r3, r3, #2
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d020      	beq.n	800152a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f003 0304 	and.w	r3, r3, #4
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d005      	beq.n	8001500 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80014f4:	4b59      	ldr	r3, [pc, #356]	; (800165c <HAL_RCC_ClockConfig+0x1bc>)
 80014f6:	689b      	ldr	r3, [r3, #8]
 80014f8:	4a58      	ldr	r2, [pc, #352]	; (800165c <HAL_RCC_ClockConfig+0x1bc>)
 80014fa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80014fe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f003 0308 	and.w	r3, r3, #8
 8001508:	2b00      	cmp	r3, #0
 800150a:	d005      	beq.n	8001518 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800150c:	4b53      	ldr	r3, [pc, #332]	; (800165c <HAL_RCC_ClockConfig+0x1bc>)
 800150e:	689b      	ldr	r3, [r3, #8]
 8001510:	4a52      	ldr	r2, [pc, #328]	; (800165c <HAL_RCC_ClockConfig+0x1bc>)
 8001512:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001516:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001518:	4b50      	ldr	r3, [pc, #320]	; (800165c <HAL_RCC_ClockConfig+0x1bc>)
 800151a:	689b      	ldr	r3, [r3, #8]
 800151c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	689b      	ldr	r3, [r3, #8]
 8001524:	494d      	ldr	r1, [pc, #308]	; (800165c <HAL_RCC_ClockConfig+0x1bc>)
 8001526:	4313      	orrs	r3, r2
 8001528:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f003 0301 	and.w	r3, r3, #1
 8001532:	2b00      	cmp	r3, #0
 8001534:	d044      	beq.n	80015c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	2b01      	cmp	r3, #1
 800153c:	d107      	bne.n	800154e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800153e:	4b47      	ldr	r3, [pc, #284]	; (800165c <HAL_RCC_ClockConfig+0x1bc>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001546:	2b00      	cmp	r3, #0
 8001548:	d119      	bne.n	800157e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800154a:	2301      	movs	r3, #1
 800154c:	e07f      	b.n	800164e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	2b02      	cmp	r3, #2
 8001554:	d003      	beq.n	800155e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800155a:	2b03      	cmp	r3, #3
 800155c:	d107      	bne.n	800156e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800155e:	4b3f      	ldr	r3, [pc, #252]	; (800165c <HAL_RCC_ClockConfig+0x1bc>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001566:	2b00      	cmp	r3, #0
 8001568:	d109      	bne.n	800157e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800156a:	2301      	movs	r3, #1
 800156c:	e06f      	b.n	800164e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800156e:	4b3b      	ldr	r3, [pc, #236]	; (800165c <HAL_RCC_ClockConfig+0x1bc>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f003 0302 	and.w	r3, r3, #2
 8001576:	2b00      	cmp	r3, #0
 8001578:	d101      	bne.n	800157e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800157a:	2301      	movs	r3, #1
 800157c:	e067      	b.n	800164e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800157e:	4b37      	ldr	r3, [pc, #220]	; (800165c <HAL_RCC_ClockConfig+0x1bc>)
 8001580:	689b      	ldr	r3, [r3, #8]
 8001582:	f023 0203 	bic.w	r2, r3, #3
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	4934      	ldr	r1, [pc, #208]	; (800165c <HAL_RCC_ClockConfig+0x1bc>)
 800158c:	4313      	orrs	r3, r2
 800158e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001590:	f7ff fa22 	bl	80009d8 <HAL_GetTick>
 8001594:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001596:	e00a      	b.n	80015ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001598:	f7ff fa1e 	bl	80009d8 <HAL_GetTick>
 800159c:	4602      	mov	r2, r0
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	1ad3      	subs	r3, r2, r3
 80015a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d901      	bls.n	80015ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80015aa:	2303      	movs	r3, #3
 80015ac:	e04f      	b.n	800164e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015ae:	4b2b      	ldr	r3, [pc, #172]	; (800165c <HAL_RCC_ClockConfig+0x1bc>)
 80015b0:	689b      	ldr	r3, [r3, #8]
 80015b2:	f003 020c 	and.w	r2, r3, #12
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	009b      	lsls	r3, r3, #2
 80015bc:	429a      	cmp	r2, r3
 80015be:	d1eb      	bne.n	8001598 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80015c0:	4b25      	ldr	r3, [pc, #148]	; (8001658 <HAL_RCC_ClockConfig+0x1b8>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f003 030f 	and.w	r3, r3, #15
 80015c8:	683a      	ldr	r2, [r7, #0]
 80015ca:	429a      	cmp	r2, r3
 80015cc:	d20c      	bcs.n	80015e8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015ce:	4b22      	ldr	r3, [pc, #136]	; (8001658 <HAL_RCC_ClockConfig+0x1b8>)
 80015d0:	683a      	ldr	r2, [r7, #0]
 80015d2:	b2d2      	uxtb	r2, r2
 80015d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015d6:	4b20      	ldr	r3, [pc, #128]	; (8001658 <HAL_RCC_ClockConfig+0x1b8>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f003 030f 	and.w	r3, r3, #15
 80015de:	683a      	ldr	r2, [r7, #0]
 80015e0:	429a      	cmp	r2, r3
 80015e2:	d001      	beq.n	80015e8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80015e4:	2301      	movs	r3, #1
 80015e6:	e032      	b.n	800164e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f003 0304 	and.w	r3, r3, #4
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d008      	beq.n	8001606 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80015f4:	4b19      	ldr	r3, [pc, #100]	; (800165c <HAL_RCC_ClockConfig+0x1bc>)
 80015f6:	689b      	ldr	r3, [r3, #8]
 80015f8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	68db      	ldr	r3, [r3, #12]
 8001600:	4916      	ldr	r1, [pc, #88]	; (800165c <HAL_RCC_ClockConfig+0x1bc>)
 8001602:	4313      	orrs	r3, r2
 8001604:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f003 0308 	and.w	r3, r3, #8
 800160e:	2b00      	cmp	r3, #0
 8001610:	d009      	beq.n	8001626 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001612:	4b12      	ldr	r3, [pc, #72]	; (800165c <HAL_RCC_ClockConfig+0x1bc>)
 8001614:	689b      	ldr	r3, [r3, #8]
 8001616:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	691b      	ldr	r3, [r3, #16]
 800161e:	00db      	lsls	r3, r3, #3
 8001620:	490e      	ldr	r1, [pc, #56]	; (800165c <HAL_RCC_ClockConfig+0x1bc>)
 8001622:	4313      	orrs	r3, r2
 8001624:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001626:	f000 f821 	bl	800166c <HAL_RCC_GetSysClockFreq>
 800162a:	4602      	mov	r2, r0
 800162c:	4b0b      	ldr	r3, [pc, #44]	; (800165c <HAL_RCC_ClockConfig+0x1bc>)
 800162e:	689b      	ldr	r3, [r3, #8]
 8001630:	091b      	lsrs	r3, r3, #4
 8001632:	f003 030f 	and.w	r3, r3, #15
 8001636:	490a      	ldr	r1, [pc, #40]	; (8001660 <HAL_RCC_ClockConfig+0x1c0>)
 8001638:	5ccb      	ldrb	r3, [r1, r3]
 800163a:	fa22 f303 	lsr.w	r3, r2, r3
 800163e:	4a09      	ldr	r2, [pc, #36]	; (8001664 <HAL_RCC_ClockConfig+0x1c4>)
 8001640:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001642:	4b09      	ldr	r3, [pc, #36]	; (8001668 <HAL_RCC_ClockConfig+0x1c8>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4618      	mov	r0, r3
 8001648:	f7ff f982 	bl	8000950 <HAL_InitTick>

  return HAL_OK;
 800164c:	2300      	movs	r3, #0
}
 800164e:	4618      	mov	r0, r3
 8001650:	3710      	adds	r7, #16
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	40023c00 	.word	0x40023c00
 800165c:	40023800 	.word	0x40023800
 8001660:	08002aa0 	.word	0x08002aa0
 8001664:	20000054 	.word	0x20000054
 8001668:	20000058 	.word	0x20000058

0800166c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800166c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001670:	b090      	sub	sp, #64	; 0x40
 8001672:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001674:	2300      	movs	r3, #0
 8001676:	637b      	str	r3, [r7, #52]	; 0x34
 8001678:	2300      	movs	r3, #0
 800167a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800167c:	2300      	movs	r3, #0
 800167e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001680:	2300      	movs	r3, #0
 8001682:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001684:	4b59      	ldr	r3, [pc, #356]	; (80017ec <HAL_RCC_GetSysClockFreq+0x180>)
 8001686:	689b      	ldr	r3, [r3, #8]
 8001688:	f003 030c 	and.w	r3, r3, #12
 800168c:	2b08      	cmp	r3, #8
 800168e:	d00d      	beq.n	80016ac <HAL_RCC_GetSysClockFreq+0x40>
 8001690:	2b08      	cmp	r3, #8
 8001692:	f200 80a1 	bhi.w	80017d8 <HAL_RCC_GetSysClockFreq+0x16c>
 8001696:	2b00      	cmp	r3, #0
 8001698:	d002      	beq.n	80016a0 <HAL_RCC_GetSysClockFreq+0x34>
 800169a:	2b04      	cmp	r3, #4
 800169c:	d003      	beq.n	80016a6 <HAL_RCC_GetSysClockFreq+0x3a>
 800169e:	e09b      	b.n	80017d8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80016a0:	4b53      	ldr	r3, [pc, #332]	; (80017f0 <HAL_RCC_GetSysClockFreq+0x184>)
 80016a2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80016a4:	e09b      	b.n	80017de <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80016a6:	4b53      	ldr	r3, [pc, #332]	; (80017f4 <HAL_RCC_GetSysClockFreq+0x188>)
 80016a8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80016aa:	e098      	b.n	80017de <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80016ac:	4b4f      	ldr	r3, [pc, #316]	; (80017ec <HAL_RCC_GetSysClockFreq+0x180>)
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80016b4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80016b6:	4b4d      	ldr	r3, [pc, #308]	; (80017ec <HAL_RCC_GetSysClockFreq+0x180>)
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d028      	beq.n	8001714 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016c2:	4b4a      	ldr	r3, [pc, #296]	; (80017ec <HAL_RCC_GetSysClockFreq+0x180>)
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	099b      	lsrs	r3, r3, #6
 80016c8:	2200      	movs	r2, #0
 80016ca:	623b      	str	r3, [r7, #32]
 80016cc:	627a      	str	r2, [r7, #36]	; 0x24
 80016ce:	6a3b      	ldr	r3, [r7, #32]
 80016d0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80016d4:	2100      	movs	r1, #0
 80016d6:	4b47      	ldr	r3, [pc, #284]	; (80017f4 <HAL_RCC_GetSysClockFreq+0x188>)
 80016d8:	fb03 f201 	mul.w	r2, r3, r1
 80016dc:	2300      	movs	r3, #0
 80016de:	fb00 f303 	mul.w	r3, r0, r3
 80016e2:	4413      	add	r3, r2
 80016e4:	4a43      	ldr	r2, [pc, #268]	; (80017f4 <HAL_RCC_GetSysClockFreq+0x188>)
 80016e6:	fba0 1202 	umull	r1, r2, r0, r2
 80016ea:	62fa      	str	r2, [r7, #44]	; 0x2c
 80016ec:	460a      	mov	r2, r1
 80016ee:	62ba      	str	r2, [r7, #40]	; 0x28
 80016f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80016f2:	4413      	add	r3, r2
 80016f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80016f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016f8:	2200      	movs	r2, #0
 80016fa:	61bb      	str	r3, [r7, #24]
 80016fc:	61fa      	str	r2, [r7, #28]
 80016fe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001702:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001706:	f7fe fd5f 	bl	80001c8 <__aeabi_uldivmod>
 800170a:	4602      	mov	r2, r0
 800170c:	460b      	mov	r3, r1
 800170e:	4613      	mov	r3, r2
 8001710:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001712:	e053      	b.n	80017bc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001714:	4b35      	ldr	r3, [pc, #212]	; (80017ec <HAL_RCC_GetSysClockFreq+0x180>)
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	099b      	lsrs	r3, r3, #6
 800171a:	2200      	movs	r2, #0
 800171c:	613b      	str	r3, [r7, #16]
 800171e:	617a      	str	r2, [r7, #20]
 8001720:	693b      	ldr	r3, [r7, #16]
 8001722:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001726:	f04f 0b00 	mov.w	fp, #0
 800172a:	4652      	mov	r2, sl
 800172c:	465b      	mov	r3, fp
 800172e:	f04f 0000 	mov.w	r0, #0
 8001732:	f04f 0100 	mov.w	r1, #0
 8001736:	0159      	lsls	r1, r3, #5
 8001738:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800173c:	0150      	lsls	r0, r2, #5
 800173e:	4602      	mov	r2, r0
 8001740:	460b      	mov	r3, r1
 8001742:	ebb2 080a 	subs.w	r8, r2, sl
 8001746:	eb63 090b 	sbc.w	r9, r3, fp
 800174a:	f04f 0200 	mov.w	r2, #0
 800174e:	f04f 0300 	mov.w	r3, #0
 8001752:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001756:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800175a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800175e:	ebb2 0408 	subs.w	r4, r2, r8
 8001762:	eb63 0509 	sbc.w	r5, r3, r9
 8001766:	f04f 0200 	mov.w	r2, #0
 800176a:	f04f 0300 	mov.w	r3, #0
 800176e:	00eb      	lsls	r3, r5, #3
 8001770:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001774:	00e2      	lsls	r2, r4, #3
 8001776:	4614      	mov	r4, r2
 8001778:	461d      	mov	r5, r3
 800177a:	eb14 030a 	adds.w	r3, r4, sl
 800177e:	603b      	str	r3, [r7, #0]
 8001780:	eb45 030b 	adc.w	r3, r5, fp
 8001784:	607b      	str	r3, [r7, #4]
 8001786:	f04f 0200 	mov.w	r2, #0
 800178a:	f04f 0300 	mov.w	r3, #0
 800178e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001792:	4629      	mov	r1, r5
 8001794:	028b      	lsls	r3, r1, #10
 8001796:	4621      	mov	r1, r4
 8001798:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800179c:	4621      	mov	r1, r4
 800179e:	028a      	lsls	r2, r1, #10
 80017a0:	4610      	mov	r0, r2
 80017a2:	4619      	mov	r1, r3
 80017a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017a6:	2200      	movs	r2, #0
 80017a8:	60bb      	str	r3, [r7, #8]
 80017aa:	60fa      	str	r2, [r7, #12]
 80017ac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80017b0:	f7fe fd0a 	bl	80001c8 <__aeabi_uldivmod>
 80017b4:	4602      	mov	r2, r0
 80017b6:	460b      	mov	r3, r1
 80017b8:	4613      	mov	r3, r2
 80017ba:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80017bc:	4b0b      	ldr	r3, [pc, #44]	; (80017ec <HAL_RCC_GetSysClockFreq+0x180>)
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	0c1b      	lsrs	r3, r3, #16
 80017c2:	f003 0303 	and.w	r3, r3, #3
 80017c6:	3301      	adds	r3, #1
 80017c8:	005b      	lsls	r3, r3, #1
 80017ca:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80017cc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80017ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80017d4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80017d6:	e002      	b.n	80017de <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80017d8:	4b05      	ldr	r3, [pc, #20]	; (80017f0 <HAL_RCC_GetSysClockFreq+0x184>)
 80017da:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80017dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80017de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	3740      	adds	r7, #64	; 0x40
 80017e4:	46bd      	mov	sp, r7
 80017e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80017ea:	bf00      	nop
 80017ec:	40023800 	.word	0x40023800
 80017f0:	00f42400 	.word	0x00f42400
 80017f4:	017d7840 	.word	0x017d7840

080017f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80017f8:	b480      	push	{r7}
 80017fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80017fc:	4b03      	ldr	r3, [pc, #12]	; (800180c <HAL_RCC_GetHCLKFreq+0x14>)
 80017fe:	681b      	ldr	r3, [r3, #0]
}
 8001800:	4618      	mov	r0, r3
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr
 800180a:	bf00      	nop
 800180c:	20000054 	.word	0x20000054

08001810 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001814:	f7ff fff0 	bl	80017f8 <HAL_RCC_GetHCLKFreq>
 8001818:	4602      	mov	r2, r0
 800181a:	4b05      	ldr	r3, [pc, #20]	; (8001830 <HAL_RCC_GetPCLK1Freq+0x20>)
 800181c:	689b      	ldr	r3, [r3, #8]
 800181e:	0a9b      	lsrs	r3, r3, #10
 8001820:	f003 0307 	and.w	r3, r3, #7
 8001824:	4903      	ldr	r1, [pc, #12]	; (8001834 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001826:	5ccb      	ldrb	r3, [r1, r3]
 8001828:	fa22 f303 	lsr.w	r3, r2, r3
}
 800182c:	4618      	mov	r0, r3
 800182e:	bd80      	pop	{r7, pc}
 8001830:	40023800 	.word	0x40023800
 8001834:	08002ab0 	.word	0x08002ab0

08001838 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800183c:	f7ff ffdc 	bl	80017f8 <HAL_RCC_GetHCLKFreq>
 8001840:	4602      	mov	r2, r0
 8001842:	4b05      	ldr	r3, [pc, #20]	; (8001858 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001844:	689b      	ldr	r3, [r3, #8]
 8001846:	0b5b      	lsrs	r3, r3, #13
 8001848:	f003 0307 	and.w	r3, r3, #7
 800184c:	4903      	ldr	r1, [pc, #12]	; (800185c <HAL_RCC_GetPCLK2Freq+0x24>)
 800184e:	5ccb      	ldrb	r3, [r1, r3]
 8001850:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001854:	4618      	mov	r0, r3
 8001856:	bd80      	pop	{r7, pc}
 8001858:	40023800 	.word	0x40023800
 800185c:	08002ab0 	.word	0x08002ab0

08001860 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b082      	sub	sp, #8
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d101      	bne.n	8001872 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800186e:	2301      	movs	r3, #1
 8001870:	e03f      	b.n	80018f2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001878:	b2db      	uxtb	r3, r3
 800187a:	2b00      	cmp	r3, #0
 800187c:	d106      	bne.n	800188c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2200      	movs	r2, #0
 8001882:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001886:	6878      	ldr	r0, [r7, #4]
 8001888:	f7fe ffc6 	bl	8000818 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2224      	movs	r2, #36	; 0x24
 8001890:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	68da      	ldr	r2, [r3, #12]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80018a2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80018a4:	6878      	ldr	r0, [r7, #4]
 80018a6:	f000 fbf1 	bl	800208c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	691a      	ldr	r2, [r3, #16]
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80018b8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	695a      	ldr	r2, [r3, #20]
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80018c8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	68da      	ldr	r2, [r3, #12]
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80018d8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2200      	movs	r2, #0
 80018de:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2220      	movs	r2, #32
 80018e4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2220      	movs	r2, #32
 80018ec:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80018f0:	2300      	movs	r3, #0
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	3708      	adds	r7, #8
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}

080018fa <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80018fa:	b580      	push	{r7, lr}
 80018fc:	b088      	sub	sp, #32
 80018fe:	af02      	add	r7, sp, #8
 8001900:	60f8      	str	r0, [r7, #12]
 8001902:	60b9      	str	r1, [r7, #8]
 8001904:	603b      	str	r3, [r7, #0]
 8001906:	4613      	mov	r3, r2
 8001908:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800190a:	2300      	movs	r3, #0
 800190c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001914:	b2db      	uxtb	r3, r3
 8001916:	2b20      	cmp	r3, #32
 8001918:	f040 8083 	bne.w	8001a22 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800191c:	68bb      	ldr	r3, [r7, #8]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d002      	beq.n	8001928 <HAL_UART_Transmit+0x2e>
 8001922:	88fb      	ldrh	r3, [r7, #6]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d101      	bne.n	800192c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8001928:	2301      	movs	r3, #1
 800192a:	e07b      	b.n	8001a24 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001932:	2b01      	cmp	r3, #1
 8001934:	d101      	bne.n	800193a <HAL_UART_Transmit+0x40>
 8001936:	2302      	movs	r3, #2
 8001938:	e074      	b.n	8001a24 <HAL_UART_Transmit+0x12a>
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	2201      	movs	r2, #1
 800193e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	2200      	movs	r2, #0
 8001946:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	2221      	movs	r2, #33	; 0x21
 800194c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001950:	f7ff f842 	bl	80009d8 <HAL_GetTick>
 8001954:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	88fa      	ldrh	r2, [r7, #6]
 800195a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	88fa      	ldrh	r2, [r7, #6]
 8001960:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	2200      	movs	r2, #0
 8001966:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800196a:	e042      	b.n	80019f2 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001970:	b29b      	uxth	r3, r3
 8001972:	3b01      	subs	r3, #1
 8001974:	b29a      	uxth	r2, r3
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	689b      	ldr	r3, [r3, #8]
 800197e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001982:	d122      	bne.n	80019ca <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	9300      	str	r3, [sp, #0]
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	2200      	movs	r2, #0
 800198c:	2180      	movs	r1, #128	; 0x80
 800198e:	68f8      	ldr	r0, [r7, #12]
 8001990:	f000 fa10 	bl	8001db4 <UART_WaitOnFlagUntilTimeout>
 8001994:	4603      	mov	r3, r0
 8001996:	2b00      	cmp	r3, #0
 8001998:	d001      	beq.n	800199e <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800199a:	2303      	movs	r3, #3
 800199c:	e042      	b.n	8001a24 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800199e:	68bb      	ldr	r3, [r7, #8]
 80019a0:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	881b      	ldrh	r3, [r3, #0]
 80019a6:	461a      	mov	r2, r3
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80019b0:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	691b      	ldr	r3, [r3, #16]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d103      	bne.n	80019c2 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80019ba:	68bb      	ldr	r3, [r7, #8]
 80019bc:	3302      	adds	r3, #2
 80019be:	60bb      	str	r3, [r7, #8]
 80019c0:	e017      	b.n	80019f2 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80019c2:	68bb      	ldr	r3, [r7, #8]
 80019c4:	3301      	adds	r3, #1
 80019c6:	60bb      	str	r3, [r7, #8]
 80019c8:	e013      	b.n	80019f2 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	9300      	str	r3, [sp, #0]
 80019ce:	697b      	ldr	r3, [r7, #20]
 80019d0:	2200      	movs	r2, #0
 80019d2:	2180      	movs	r1, #128	; 0x80
 80019d4:	68f8      	ldr	r0, [r7, #12]
 80019d6:	f000 f9ed 	bl	8001db4 <UART_WaitOnFlagUntilTimeout>
 80019da:	4603      	mov	r3, r0
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d001      	beq.n	80019e4 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80019e0:	2303      	movs	r3, #3
 80019e2:	e01f      	b.n	8001a24 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80019e4:	68bb      	ldr	r3, [r7, #8]
 80019e6:	1c5a      	adds	r2, r3, #1
 80019e8:	60ba      	str	r2, [r7, #8]
 80019ea:	781a      	ldrb	r2, [r3, #0]
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80019f6:	b29b      	uxth	r3, r3
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d1b7      	bne.n	800196c <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	9300      	str	r3, [sp, #0]
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	2200      	movs	r2, #0
 8001a04:	2140      	movs	r1, #64	; 0x40
 8001a06:	68f8      	ldr	r0, [r7, #12]
 8001a08:	f000 f9d4 	bl	8001db4 <UART_WaitOnFlagUntilTimeout>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d001      	beq.n	8001a16 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8001a12:	2303      	movs	r3, #3
 8001a14:	e006      	b.n	8001a24 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	2220      	movs	r2, #32
 8001a1a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	e000      	b.n	8001a24 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8001a22:	2302      	movs	r3, #2
  }
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	3718      	adds	r7, #24
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}

08001a2c <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b088      	sub	sp, #32
 8001a30:	af02      	add	r7, sp, #8
 8001a32:	60f8      	str	r0, [r7, #12]
 8001a34:	60b9      	str	r1, [r7, #8]
 8001a36:	603b      	str	r3, [r7, #0]
 8001a38:	4613      	mov	r3, r2
 8001a3a:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001a46:	b2db      	uxtb	r3, r3
 8001a48:	2b20      	cmp	r3, #32
 8001a4a:	f040 8090 	bne.w	8001b6e <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 8001a4e:	68bb      	ldr	r3, [r7, #8]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d002      	beq.n	8001a5a <HAL_UART_Receive+0x2e>
 8001a54:	88fb      	ldrh	r3, [r7, #6]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d101      	bne.n	8001a5e <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e088      	b.n	8001b70 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001a64:	2b01      	cmp	r3, #1
 8001a66:	d101      	bne.n	8001a6c <HAL_UART_Receive+0x40>
 8001a68:	2302      	movs	r3, #2
 8001a6a:	e081      	b.n	8001b70 <HAL_UART_Receive+0x144>
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	2201      	movs	r2, #1
 8001a70:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	2200      	movs	r2, #0
 8001a78:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	2222      	movs	r2, #34	; 0x22
 8001a7e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001a82:	f7fe ffa9 	bl	80009d8 <HAL_GetTick>
 8001a86:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	88fa      	ldrh	r2, [r7, #6]
 8001a8c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	88fa      	ldrh	r2, [r7, #6]
 8001a92:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	2200      	movs	r2, #0
 8001a98:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8001a9c:	e05c      	b.n	8001b58 <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001aa2:	b29b      	uxth	r3, r3
 8001aa4:	3b01      	subs	r3, #1
 8001aa6:	b29a      	uxth	r2, r3
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	689b      	ldr	r3, [r3, #8]
 8001ab0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ab4:	d12b      	bne.n	8001b0e <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	9300      	str	r3, [sp, #0]
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	2200      	movs	r2, #0
 8001abe:	2120      	movs	r1, #32
 8001ac0:	68f8      	ldr	r0, [r7, #12]
 8001ac2:	f000 f977 	bl	8001db4 <UART_WaitOnFlagUntilTimeout>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d001      	beq.n	8001ad0 <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 8001acc:	2303      	movs	r3, #3
 8001ace:	e04f      	b.n	8001b70 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 8001ad0:	68bb      	ldr	r3, [r7, #8]
 8001ad2:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	691b      	ldr	r3, [r3, #16]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d10c      	bne.n	8001af6 <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	b29b      	uxth	r3, r3
 8001ae4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ae8:	b29a      	uxth	r2, r3
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 8001aee:	68bb      	ldr	r3, [r7, #8]
 8001af0:	3302      	adds	r3, #2
 8001af2:	60bb      	str	r3, [r7, #8]
 8001af4:	e030      	b.n	8001b58 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	b29b      	uxth	r3, r3
 8001afe:	b2db      	uxtb	r3, r3
 8001b00:	b29a      	uxth	r2, r3
 8001b02:	693b      	ldr	r3, [r7, #16]
 8001b04:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 8001b06:	68bb      	ldr	r3, [r7, #8]
 8001b08:	3301      	adds	r3, #1
 8001b0a:	60bb      	str	r3, [r7, #8]
 8001b0c:	e024      	b.n	8001b58 <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	9300      	str	r3, [sp, #0]
 8001b12:	697b      	ldr	r3, [r7, #20]
 8001b14:	2200      	movs	r2, #0
 8001b16:	2120      	movs	r1, #32
 8001b18:	68f8      	ldr	r0, [r7, #12]
 8001b1a:	f000 f94b 	bl	8001db4 <UART_WaitOnFlagUntilTimeout>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d001      	beq.n	8001b28 <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 8001b24:	2303      	movs	r3, #3
 8001b26:	e023      	b.n	8001b70 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	691b      	ldr	r3, [r3, #16]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d108      	bne.n	8001b42 <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	6859      	ldr	r1, [r3, #4]
 8001b36:	68bb      	ldr	r3, [r7, #8]
 8001b38:	1c5a      	adds	r2, r3, #1
 8001b3a:	60ba      	str	r2, [r7, #8]
 8001b3c:	b2ca      	uxtb	r2, r1
 8001b3e:	701a      	strb	r2, [r3, #0]
 8001b40:	e00a      	b.n	8001b58 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	b2da      	uxtb	r2, r3
 8001b4a:	68bb      	ldr	r3, [r7, #8]
 8001b4c:	1c59      	adds	r1, r3, #1
 8001b4e:	60b9      	str	r1, [r7, #8]
 8001b50:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001b54:	b2d2      	uxtb	r2, r2
 8001b56:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001b5c:	b29b      	uxth	r3, r3
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d19d      	bne.n	8001a9e <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	2220      	movs	r2, #32
 8001b66:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	e000      	b.n	8001b70 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 8001b6e:	2302      	movs	r3, #2
  }
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	3718      	adds	r7, #24
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}

08001b78 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b088      	sub	sp, #32
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	68db      	ldr	r3, [r3, #12]
 8001b8e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	695b      	ldr	r3, [r3, #20]
 8001b96:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001ba0:	69fb      	ldr	r3, [r7, #28]
 8001ba2:	f003 030f 	and.w	r3, r3, #15
 8001ba6:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8001ba8:	693b      	ldr	r3, [r7, #16]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d10d      	bne.n	8001bca <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001bae:	69fb      	ldr	r3, [r7, #28]
 8001bb0:	f003 0320 	and.w	r3, r3, #32
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d008      	beq.n	8001bca <HAL_UART_IRQHandler+0x52>
 8001bb8:	69bb      	ldr	r3, [r7, #24]
 8001bba:	f003 0320 	and.w	r3, r3, #32
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d003      	beq.n	8001bca <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8001bc2:	6878      	ldr	r0, [r7, #4]
 8001bc4:	f000 f9e0 	bl	8001f88 <UART_Receive_IT>
      return;
 8001bc8:	e0d0      	b.n	8001d6c <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001bca:	693b      	ldr	r3, [r7, #16]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	f000 80b0 	beq.w	8001d32 <HAL_UART_IRQHandler+0x1ba>
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	f003 0301 	and.w	r3, r3, #1
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d105      	bne.n	8001be8 <HAL_UART_IRQHandler+0x70>
 8001bdc:	69bb      	ldr	r3, [r7, #24]
 8001bde:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	f000 80a5 	beq.w	8001d32 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001be8:	69fb      	ldr	r3, [r7, #28]
 8001bea:	f003 0301 	and.w	r3, r3, #1
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d00a      	beq.n	8001c08 <HAL_UART_IRQHandler+0x90>
 8001bf2:	69bb      	ldr	r3, [r7, #24]
 8001bf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d005      	beq.n	8001c08 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c00:	f043 0201 	orr.w	r2, r3, #1
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001c08:	69fb      	ldr	r3, [r7, #28]
 8001c0a:	f003 0304 	and.w	r3, r3, #4
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d00a      	beq.n	8001c28 <HAL_UART_IRQHandler+0xb0>
 8001c12:	697b      	ldr	r3, [r7, #20]
 8001c14:	f003 0301 	and.w	r3, r3, #1
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d005      	beq.n	8001c28 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c20:	f043 0202 	orr.w	r2, r3, #2
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001c28:	69fb      	ldr	r3, [r7, #28]
 8001c2a:	f003 0302 	and.w	r3, r3, #2
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d00a      	beq.n	8001c48 <HAL_UART_IRQHandler+0xd0>
 8001c32:	697b      	ldr	r3, [r7, #20]
 8001c34:	f003 0301 	and.w	r3, r3, #1
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d005      	beq.n	8001c48 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c40:	f043 0204 	orr.w	r2, r3, #4
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8001c48:	69fb      	ldr	r3, [r7, #28]
 8001c4a:	f003 0308 	and.w	r3, r3, #8
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d00f      	beq.n	8001c72 <HAL_UART_IRQHandler+0xfa>
 8001c52:	69bb      	ldr	r3, [r7, #24]
 8001c54:	f003 0320 	and.w	r3, r3, #32
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d104      	bne.n	8001c66 <HAL_UART_IRQHandler+0xee>
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	f003 0301 	and.w	r3, r3, #1
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d005      	beq.n	8001c72 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c6a:	f043 0208 	orr.w	r2, r3, #8
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d077      	beq.n	8001d6a <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001c7a:	69fb      	ldr	r3, [r7, #28]
 8001c7c:	f003 0320 	and.w	r3, r3, #32
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d007      	beq.n	8001c94 <HAL_UART_IRQHandler+0x11c>
 8001c84:	69bb      	ldr	r3, [r7, #24]
 8001c86:	f003 0320 	and.w	r3, r3, #32
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d002      	beq.n	8001c94 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8001c8e:	6878      	ldr	r0, [r7, #4]
 8001c90:	f000 f97a 	bl	8001f88 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	695b      	ldr	r3, [r3, #20]
 8001c9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c9e:	2b40      	cmp	r3, #64	; 0x40
 8001ca0:	bf0c      	ite	eq
 8001ca2:	2301      	moveq	r3, #1
 8001ca4:	2300      	movne	r3, #0
 8001ca6:	b2db      	uxtb	r3, r3
 8001ca8:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cae:	f003 0308 	and.w	r3, r3, #8
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d102      	bne.n	8001cbc <HAL_UART_IRQHandler+0x144>
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d031      	beq.n	8001d20 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001cbc:	6878      	ldr	r0, [r7, #4]
 8001cbe:	f000 f8c3 	bl	8001e48 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	695b      	ldr	r3, [r3, #20]
 8001cc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ccc:	2b40      	cmp	r3, #64	; 0x40
 8001cce:	d123      	bne.n	8001d18 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	695a      	ldr	r2, [r3, #20]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001cde:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d013      	beq.n	8001d10 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cec:	4a21      	ldr	r2, [pc, #132]	; (8001d74 <HAL_UART_IRQHandler+0x1fc>)
 8001cee:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f7fe ff8c 	bl	8000c12 <HAL_DMA_Abort_IT>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d016      	beq.n	8001d2e <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d06:	687a      	ldr	r2, [r7, #4]
 8001d08:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001d0a:	4610      	mov	r0, r2
 8001d0c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001d0e:	e00e      	b.n	8001d2e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001d10:	6878      	ldr	r0, [r7, #4]
 8001d12:	f000 f845 	bl	8001da0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001d16:	e00a      	b.n	8001d2e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001d18:	6878      	ldr	r0, [r7, #4]
 8001d1a:	f000 f841 	bl	8001da0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001d1e:	e006      	b.n	8001d2e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001d20:	6878      	ldr	r0, [r7, #4]
 8001d22:	f000 f83d 	bl	8001da0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2200      	movs	r2, #0
 8001d2a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8001d2c:	e01d      	b.n	8001d6a <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001d2e:	bf00      	nop
    return;
 8001d30:	e01b      	b.n	8001d6a <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001d32:	69fb      	ldr	r3, [r7, #28]
 8001d34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d008      	beq.n	8001d4e <HAL_UART_IRQHandler+0x1d6>
 8001d3c:	69bb      	ldr	r3, [r7, #24]
 8001d3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d003      	beq.n	8001d4e <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8001d46:	6878      	ldr	r0, [r7, #4]
 8001d48:	f000 f8b0 	bl	8001eac <UART_Transmit_IT>
    return;
 8001d4c:	e00e      	b.n	8001d6c <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001d4e:	69fb      	ldr	r3, [r7, #28]
 8001d50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d009      	beq.n	8001d6c <HAL_UART_IRQHandler+0x1f4>
 8001d58:	69bb      	ldr	r3, [r7, #24]
 8001d5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d004      	beq.n	8001d6c <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 8001d62:	6878      	ldr	r0, [r7, #4]
 8001d64:	f000 f8f8 	bl	8001f58 <UART_EndTransmit_IT>
    return;
 8001d68:	e000      	b.n	8001d6c <HAL_UART_IRQHandler+0x1f4>
    return;
 8001d6a:	bf00      	nop
  }
}
 8001d6c:	3720      	adds	r7, #32
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	08001e85 	.word	0x08001e85

08001d78 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b083      	sub	sp, #12
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8001d80:	bf00      	nop
 8001d82:	370c      	adds	r7, #12
 8001d84:	46bd      	mov	sp, r7
 8001d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8a:	4770      	bx	lr

08001d8c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b083      	sub	sp, #12
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8001d94:	bf00      	nop
 8001d96:	370c      	adds	r7, #12
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9e:	4770      	bx	lr

08001da0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b083      	sub	sp, #12
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8001da8:	bf00      	nop
 8001daa:	370c      	adds	r7, #12
 8001dac:	46bd      	mov	sp, r7
 8001dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db2:	4770      	bx	lr

08001db4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b084      	sub	sp, #16
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	60f8      	str	r0, [r7, #12]
 8001dbc:	60b9      	str	r1, [r7, #8]
 8001dbe:	603b      	str	r3, [r7, #0]
 8001dc0:	4613      	mov	r3, r2
 8001dc2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001dc4:	e02c      	b.n	8001e20 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001dc6:	69bb      	ldr	r3, [r7, #24]
 8001dc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dcc:	d028      	beq.n	8001e20 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001dce:	69bb      	ldr	r3, [r7, #24]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d007      	beq.n	8001de4 <UART_WaitOnFlagUntilTimeout+0x30>
 8001dd4:	f7fe fe00 	bl	80009d8 <HAL_GetTick>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	1ad3      	subs	r3, r2, r3
 8001dde:	69ba      	ldr	r2, [r7, #24]
 8001de0:	429a      	cmp	r2, r3
 8001de2:	d21d      	bcs.n	8001e20 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	68da      	ldr	r2, [r3, #12]
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001df2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	695a      	ldr	r2, [r3, #20]
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f022 0201 	bic.w	r2, r2, #1
 8001e02:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	2220      	movs	r2, #32
 8001e08:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	2220      	movs	r2, #32
 8001e10:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	2200      	movs	r2, #0
 8001e18:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8001e1c:	2303      	movs	r3, #3
 8001e1e:	e00f      	b.n	8001e40 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	681a      	ldr	r2, [r3, #0]
 8001e26:	68bb      	ldr	r3, [r7, #8]
 8001e28:	4013      	ands	r3, r2
 8001e2a:	68ba      	ldr	r2, [r7, #8]
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	bf0c      	ite	eq
 8001e30:	2301      	moveq	r3, #1
 8001e32:	2300      	movne	r3, #0
 8001e34:	b2db      	uxtb	r3, r3
 8001e36:	461a      	mov	r2, r3
 8001e38:	79fb      	ldrb	r3, [r7, #7]
 8001e3a:	429a      	cmp	r2, r3
 8001e3c:	d0c3      	beq.n	8001dc6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001e3e:	2300      	movs	r3, #0
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	3710      	adds	r7, #16
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}

08001e48 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b083      	sub	sp, #12
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	68da      	ldr	r2, [r3, #12]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001e5e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	695a      	ldr	r2, [r3, #20]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f022 0201 	bic.w	r2, r2, #1
 8001e6e:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2220      	movs	r2, #32
 8001e74:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8001e78:	bf00      	nop
 8001e7a:	370c      	adds	r7, #12
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e82:	4770      	bx	lr

08001e84 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b084      	sub	sp, #16
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e90:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	2200      	movs	r2, #0
 8001e96:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8001e9e:	68f8      	ldr	r0, [r7, #12]
 8001ea0:	f7ff ff7e 	bl	8001da0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8001ea4:	bf00      	nop
 8001ea6:	3710      	adds	r7, #16
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}

08001eac <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b085      	sub	sp, #20
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001eba:	b2db      	uxtb	r3, r3
 8001ebc:	2b21      	cmp	r3, #33	; 0x21
 8001ebe:	d144      	bne.n	8001f4a <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	689b      	ldr	r3, [r3, #8]
 8001ec4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ec8:	d11a      	bne.n	8001f00 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6a1b      	ldr	r3, [r3, #32]
 8001ece:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	881b      	ldrh	r3, [r3, #0]
 8001ed4:	461a      	mov	r2, r3
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001ede:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	691b      	ldr	r3, [r3, #16]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d105      	bne.n	8001ef4 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6a1b      	ldr	r3, [r3, #32]
 8001eec:	1c9a      	adds	r2, r3, #2
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	621a      	str	r2, [r3, #32]
 8001ef2:	e00e      	b.n	8001f12 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6a1b      	ldr	r3, [r3, #32]
 8001ef8:	1c5a      	adds	r2, r3, #1
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	621a      	str	r2, [r3, #32]
 8001efe:	e008      	b.n	8001f12 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6a1b      	ldr	r3, [r3, #32]
 8001f04:	1c59      	adds	r1, r3, #1
 8001f06:	687a      	ldr	r2, [r7, #4]
 8001f08:	6211      	str	r1, [r2, #32]
 8001f0a:	781a      	ldrb	r2, [r3, #0]
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001f16:	b29b      	uxth	r3, r3
 8001f18:	3b01      	subs	r3, #1
 8001f1a:	b29b      	uxth	r3, r3
 8001f1c:	687a      	ldr	r2, [r7, #4]
 8001f1e:	4619      	mov	r1, r3
 8001f20:	84d1      	strh	r1, [r2, #38]	; 0x26
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d10f      	bne.n	8001f46 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	68da      	ldr	r2, [r3, #12]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f34:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	68da      	ldr	r2, [r3, #12]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001f44:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8001f46:	2300      	movs	r3, #0
 8001f48:	e000      	b.n	8001f4c <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8001f4a:	2302      	movs	r3, #2
  }
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	3714      	adds	r7, #20
 8001f50:	46bd      	mov	sp, r7
 8001f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f56:	4770      	bx	lr

08001f58 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b082      	sub	sp, #8
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	68da      	ldr	r2, [r3, #12]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001f6e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2220      	movs	r2, #32
 8001f74:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8001f78:	6878      	ldr	r0, [r7, #4]
 8001f7a:	f7ff fefd 	bl	8001d78 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8001f7e:	2300      	movs	r3, #0
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	3708      	adds	r7, #8
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}

08001f88 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b084      	sub	sp, #16
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001f96:	b2db      	uxtb	r3, r3
 8001f98:	2b22      	cmp	r3, #34	; 0x22
 8001f9a:	d171      	bne.n	8002080 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	689b      	ldr	r3, [r3, #8]
 8001fa0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001fa4:	d123      	bne.n	8001fee <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001faa:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	691b      	ldr	r3, [r3, #16]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d10e      	bne.n	8001fd2 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	b29b      	uxth	r3, r3
 8001fbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001fc0:	b29a      	uxth	r2, r3
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fca:	1c9a      	adds	r2, r3, #2
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	629a      	str	r2, [r3, #40]	; 0x28
 8001fd0:	e029      	b.n	8002026 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	b29b      	uxth	r3, r3
 8001fda:	b2db      	uxtb	r3, r3
 8001fdc:	b29a      	uxth	r2, r3
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fe6:	1c5a      	adds	r2, r3, #1
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	629a      	str	r2, [r3, #40]	; 0x28
 8001fec:	e01b      	b.n	8002026 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	691b      	ldr	r3, [r3, #16]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d10a      	bne.n	800200c <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	6858      	ldr	r0, [r3, #4]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002000:	1c59      	adds	r1, r3, #1
 8002002:	687a      	ldr	r2, [r7, #4]
 8002004:	6291      	str	r1, [r2, #40]	; 0x28
 8002006:	b2c2      	uxtb	r2, r0
 8002008:	701a      	strb	r2, [r3, #0]
 800200a:	e00c      	b.n	8002026 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	b2da      	uxtb	r2, r3
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002018:	1c58      	adds	r0, r3, #1
 800201a:	6879      	ldr	r1, [r7, #4]
 800201c:	6288      	str	r0, [r1, #40]	; 0x28
 800201e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002022:	b2d2      	uxtb	r2, r2
 8002024:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800202a:	b29b      	uxth	r3, r3
 800202c:	3b01      	subs	r3, #1
 800202e:	b29b      	uxth	r3, r3
 8002030:	687a      	ldr	r2, [r7, #4]
 8002032:	4619      	mov	r1, r3
 8002034:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002036:	2b00      	cmp	r3, #0
 8002038:	d120      	bne.n	800207c <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	68da      	ldr	r2, [r3, #12]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f022 0220 	bic.w	r2, r2, #32
 8002048:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	68da      	ldr	r2, [r3, #12]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002058:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	695a      	ldr	r2, [r3, #20]
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f022 0201 	bic.w	r2, r2, #1
 8002068:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2220      	movs	r2, #32
 800206e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8002072:	6878      	ldr	r0, [r7, #4]
 8002074:	f7ff fe8a 	bl	8001d8c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8002078:	2300      	movs	r3, #0
 800207a:	e002      	b.n	8002082 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800207c:	2300      	movs	r3, #0
 800207e:	e000      	b.n	8002082 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8002080:	2302      	movs	r3, #2
  }
}
 8002082:	4618      	mov	r0, r3
 8002084:	3710      	adds	r7, #16
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
	...

0800208c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800208c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002090:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8002094:	af00      	add	r7, sp, #0
 8002096:	f8c7 01fc 	str.w	r0, [r7, #508]	; 0x1fc
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800209a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	691b      	ldr	r3, [r3, #16]
 80020a2:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80020a6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80020aa:	68d9      	ldr	r1, [r3, #12]
 80020ac:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80020b0:	681a      	ldr	r2, [r3, #0]
 80020b2:	ea40 0301 	orr.w	r3, r0, r1
 80020b6:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80020b8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80020bc:	689a      	ldr	r2, [r3, #8]
 80020be:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80020c2:	691b      	ldr	r3, [r3, #16]
 80020c4:	431a      	orrs	r2, r3
 80020c6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80020ca:	695b      	ldr	r3, [r3, #20]
 80020cc:	431a      	orrs	r2, r3
 80020ce:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80020d2:	69db      	ldr	r3, [r3, #28]
 80020d4:	4313      	orrs	r3, r2
 80020d6:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
  MODIFY_REG(huart->Instance->CR1,
 80020da:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	68db      	ldr	r3, [r3, #12]
 80020e2:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80020e6:	f021 010c 	bic.w	r1, r1, #12
 80020ea:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80020ee:	681a      	ldr	r2, [r3, #0]
 80020f0:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 80020f4:	430b      	orrs	r3, r1
 80020f6:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80020f8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	695b      	ldr	r3, [r3, #20]
 8002100:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002104:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002108:	6999      	ldr	r1, [r3, #24]
 800210a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800210e:	681a      	ldr	r2, [r3, #0]
 8002110:	ea40 0301 	orr.w	r3, r0, r1
 8002114:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002116:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800211a:	69db      	ldr	r3, [r3, #28]
 800211c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002120:	f040 824a 	bne.w	80025b8 <UART_SetConfig+0x52c>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002124:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002128:	681a      	ldr	r2, [r3, #0]
 800212a:	4b96      	ldr	r3, [pc, #600]	; (8002384 <UART_SetConfig+0x2f8>)
 800212c:	429a      	cmp	r2, r3
 800212e:	d006      	beq.n	800213e <UART_SetConfig+0xb2>
 8002130:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002134:	681a      	ldr	r2, [r3, #0]
 8002136:	4b94      	ldr	r3, [pc, #592]	; (8002388 <UART_SetConfig+0x2fc>)
 8002138:	429a      	cmp	r2, r3
 800213a:	f040 8129 	bne.w	8002390 <UART_SetConfig+0x304>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800213e:	f7ff fb7b 	bl	8001838 <HAL_RCC_GetPCLK2Freq>
 8002142:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002146:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800214a:	2200      	movs	r2, #0
 800214c:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 8002150:	f8c7 21f4 	str.w	r2, [r7, #500]	; 0x1f4
 8002154:	e9d7 457c 	ldrd	r4, r5, [r7, #496]	; 0x1f0
 8002158:	4622      	mov	r2, r4
 800215a:	462b      	mov	r3, r5
 800215c:	1891      	adds	r1, r2, r2
 800215e:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8002162:	415b      	adcs	r3, r3
 8002164:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8002168:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 800216c:	4621      	mov	r1, r4
 800216e:	1851      	adds	r1, r2, r1
 8002170:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 8002174:	4629      	mov	r1, r5
 8002176:	414b      	adcs	r3, r1
 8002178:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800217c:	f04f 0200 	mov.w	r2, #0
 8002180:	f04f 0300 	mov.w	r3, #0
 8002184:	e9d7 8932 	ldrd	r8, r9, [r7, #200]	; 0xc8
 8002188:	4649      	mov	r1, r9
 800218a:	00cb      	lsls	r3, r1, #3
 800218c:	4641      	mov	r1, r8
 800218e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002192:	4641      	mov	r1, r8
 8002194:	00ca      	lsls	r2, r1, #3
 8002196:	4610      	mov	r0, r2
 8002198:	4619      	mov	r1, r3
 800219a:	4603      	mov	r3, r0
 800219c:	4622      	mov	r2, r4
 800219e:	189b      	adds	r3, r3, r2
 80021a0:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 80021a4:	462b      	mov	r3, r5
 80021a6:	460a      	mov	r2, r1
 80021a8:	eb42 0303 	adc.w	r3, r2, r3
 80021ac:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 80021b0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	2200      	movs	r2, #0
 80021b8:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80021bc:	f8c7 21e4 	str.w	r2, [r7, #484]	; 0x1e4
 80021c0:	e9d7 1278 	ldrd	r1, r2, [r7, #480]	; 0x1e0
 80021c4:	460b      	mov	r3, r1
 80021c6:	18db      	adds	r3, r3, r3
 80021c8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80021cc:	4613      	mov	r3, r2
 80021ce:	eb42 0303 	adc.w	r3, r2, r3
 80021d2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80021d6:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 80021da:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	; 0x1e8
 80021de:	f7fd fff3 	bl	80001c8 <__aeabi_uldivmod>
 80021e2:	4602      	mov	r2, r0
 80021e4:	460b      	mov	r3, r1
 80021e6:	4b69      	ldr	r3, [pc, #420]	; (800238c <UART_SetConfig+0x300>)
 80021e8:	fba3 2302 	umull	r2, r3, r3, r2
 80021ec:	095b      	lsrs	r3, r3, #5
 80021ee:	011c      	lsls	r4, r3, #4
 80021f0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80021f4:	2200      	movs	r2, #0
 80021f6:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
 80021fa:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 80021fe:	e9d7 8976 	ldrd	r8, r9, [r7, #472]	; 0x1d8
 8002202:	4642      	mov	r2, r8
 8002204:	464b      	mov	r3, r9
 8002206:	1891      	adds	r1, r2, r2
 8002208:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 800220c:	415b      	adcs	r3, r3
 800220e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8002212:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8002216:	4641      	mov	r1, r8
 8002218:	1851      	adds	r1, r2, r1
 800221a:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 800221e:	4649      	mov	r1, r9
 8002220:	414b      	adcs	r3, r1
 8002222:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002226:	f04f 0200 	mov.w	r2, #0
 800222a:	f04f 0300 	mov.w	r3, #0
 800222e:	e9d7 ab2c 	ldrd	sl, fp, [r7, #176]	; 0xb0
 8002232:	4659      	mov	r1, fp
 8002234:	00cb      	lsls	r3, r1, #3
 8002236:	4651      	mov	r1, sl
 8002238:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800223c:	4651      	mov	r1, sl
 800223e:	00ca      	lsls	r2, r1, #3
 8002240:	4610      	mov	r0, r2
 8002242:	4619      	mov	r1, r3
 8002244:	4603      	mov	r3, r0
 8002246:	4642      	mov	r2, r8
 8002248:	189b      	adds	r3, r3, r2
 800224a:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 800224e:	464b      	mov	r3, r9
 8002250:	460a      	mov	r2, r1
 8002252:	eb42 0303 	adc.w	r3, r2, r3
 8002256:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 800225a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	2200      	movs	r2, #0
 8002262:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8002266:	f8c7 21cc 	str.w	r2, [r7, #460]	; 0x1cc
 800226a:	e9d7 1272 	ldrd	r1, r2, [r7, #456]	; 0x1c8
 800226e:	460b      	mov	r3, r1
 8002270:	18db      	adds	r3, r3, r3
 8002272:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002276:	4613      	mov	r3, r2
 8002278:	eb42 0303 	adc.w	r3, r2, r3
 800227c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002280:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8002284:	e9d7 0174 	ldrd	r0, r1, [r7, #464]	; 0x1d0
 8002288:	f7fd ff9e 	bl	80001c8 <__aeabi_uldivmod>
 800228c:	4602      	mov	r2, r0
 800228e:	460b      	mov	r3, r1
 8002290:	4611      	mov	r1, r2
 8002292:	4b3e      	ldr	r3, [pc, #248]	; (800238c <UART_SetConfig+0x300>)
 8002294:	fba3 2301 	umull	r2, r3, r3, r1
 8002298:	095b      	lsrs	r3, r3, #5
 800229a:	2264      	movs	r2, #100	; 0x64
 800229c:	fb02 f303 	mul.w	r3, r2, r3
 80022a0:	1acb      	subs	r3, r1, r3
 80022a2:	00db      	lsls	r3, r3, #3
 80022a4:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80022a8:	4b38      	ldr	r3, [pc, #224]	; (800238c <UART_SetConfig+0x300>)
 80022aa:	fba3 2302 	umull	r2, r3, r3, r2
 80022ae:	095b      	lsrs	r3, r3, #5
 80022b0:	005b      	lsls	r3, r3, #1
 80022b2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80022b6:	441c      	add	r4, r3
 80022b8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80022bc:	2200      	movs	r2, #0
 80022be:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80022c2:	f8c7 21c4 	str.w	r2, [r7, #452]	; 0x1c4
 80022c6:	e9d7 8970 	ldrd	r8, r9, [r7, #448]	; 0x1c0
 80022ca:	4642      	mov	r2, r8
 80022cc:	464b      	mov	r3, r9
 80022ce:	1891      	adds	r1, r2, r2
 80022d0:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 80022d4:	415b      	adcs	r3, r3
 80022d6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80022da:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 80022de:	4641      	mov	r1, r8
 80022e0:	1851      	adds	r1, r2, r1
 80022e2:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 80022e6:	4649      	mov	r1, r9
 80022e8:	414b      	adcs	r3, r1
 80022ea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80022ee:	f04f 0200 	mov.w	r2, #0
 80022f2:	f04f 0300 	mov.w	r3, #0
 80022f6:	e9d7 ab26 	ldrd	sl, fp, [r7, #152]	; 0x98
 80022fa:	4659      	mov	r1, fp
 80022fc:	00cb      	lsls	r3, r1, #3
 80022fe:	4651      	mov	r1, sl
 8002300:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002304:	4651      	mov	r1, sl
 8002306:	00ca      	lsls	r2, r1, #3
 8002308:	4610      	mov	r0, r2
 800230a:	4619      	mov	r1, r3
 800230c:	4603      	mov	r3, r0
 800230e:	4642      	mov	r2, r8
 8002310:	189b      	adds	r3, r3, r2
 8002312:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 8002316:	464b      	mov	r3, r9
 8002318:	460a      	mov	r2, r1
 800231a:	eb42 0303 	adc.w	r3, r2, r3
 800231e:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002322:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	2200      	movs	r2, #0
 800232a:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
 800232e:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
 8002332:	e9d7 126c 	ldrd	r1, r2, [r7, #432]	; 0x1b0
 8002336:	460b      	mov	r3, r1
 8002338:	18db      	adds	r3, r3, r3
 800233a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800233e:	4613      	mov	r3, r2
 8002340:	eb42 0303 	adc.w	r3, r2, r3
 8002344:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002348:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 800234c:	e9d7 016e 	ldrd	r0, r1, [r7, #440]	; 0x1b8
 8002350:	f7fd ff3a 	bl	80001c8 <__aeabi_uldivmod>
 8002354:	4602      	mov	r2, r0
 8002356:	460b      	mov	r3, r1
 8002358:	4b0c      	ldr	r3, [pc, #48]	; (800238c <UART_SetConfig+0x300>)
 800235a:	fba3 1302 	umull	r1, r3, r3, r2
 800235e:	095b      	lsrs	r3, r3, #5
 8002360:	2164      	movs	r1, #100	; 0x64
 8002362:	fb01 f303 	mul.w	r3, r1, r3
 8002366:	1ad3      	subs	r3, r2, r3
 8002368:	00db      	lsls	r3, r3, #3
 800236a:	3332      	adds	r3, #50	; 0x32
 800236c:	4a07      	ldr	r2, [pc, #28]	; (800238c <UART_SetConfig+0x300>)
 800236e:	fba2 2303 	umull	r2, r3, r2, r3
 8002372:	095b      	lsrs	r3, r3, #5
 8002374:	f003 0207 	and.w	r2, r3, #7
 8002378:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4422      	add	r2, r4
 8002380:	609a      	str	r2, [r3, #8]
 8002382:	e349      	b.n	8002a18 <UART_SetConfig+0x98c>
 8002384:	40011000 	.word	0x40011000
 8002388:	40011400 	.word	0x40011400
 800238c:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002390:	f7ff fa3e 	bl	8001810 <HAL_RCC_GetPCLK1Freq>
 8002394:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002398:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800239c:	2200      	movs	r2, #0
 800239e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 80023a2:	f8c7 21ac 	str.w	r2, [r7, #428]	; 0x1ac
 80023a6:	e9d7 456a 	ldrd	r4, r5, [r7, #424]	; 0x1a8
 80023aa:	4622      	mov	r2, r4
 80023ac:	462b      	mov	r3, r5
 80023ae:	1891      	adds	r1, r2, r2
 80023b0:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 80023b4:	415b      	adcs	r3, r3
 80023b6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80023ba:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80023be:	4621      	mov	r1, r4
 80023c0:	eb12 0a01 	adds.w	sl, r2, r1
 80023c4:	4629      	mov	r1, r5
 80023c6:	eb43 0b01 	adc.w	fp, r3, r1
 80023ca:	f04f 0200 	mov.w	r2, #0
 80023ce:	f04f 0300 	mov.w	r3, #0
 80023d2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80023d6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80023da:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80023de:	4692      	mov	sl, r2
 80023e0:	469b      	mov	fp, r3
 80023e2:	4623      	mov	r3, r4
 80023e4:	eb1a 0303 	adds.w	r3, sl, r3
 80023e8:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80023ec:	462b      	mov	r3, r5
 80023ee:	eb4b 0303 	adc.w	r3, fp, r3
 80023f2:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80023f6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	2200      	movs	r2, #0
 80023fe:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
 8002402:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8002406:	e9d7 1266 	ldrd	r1, r2, [r7, #408]	; 0x198
 800240a:	460b      	mov	r3, r1
 800240c:	18db      	adds	r3, r3, r3
 800240e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002412:	4613      	mov	r3, r2
 8002414:	eb42 0303 	adc.w	r3, r2, r3
 8002418:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800241c:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8002420:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	; 0x1a0
 8002424:	f7fd fed0 	bl	80001c8 <__aeabi_uldivmod>
 8002428:	4602      	mov	r2, r0
 800242a:	460b      	mov	r3, r1
 800242c:	4b61      	ldr	r3, [pc, #388]	; (80025b4 <UART_SetConfig+0x528>)
 800242e:	fba3 2302 	umull	r2, r3, r3, r2
 8002432:	095b      	lsrs	r3, r3, #5
 8002434:	011c      	lsls	r4, r3, #4
 8002436:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800243a:	2200      	movs	r2, #0
 800243c:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 8002440:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
 8002444:	e9d7 8964 	ldrd	r8, r9, [r7, #400]	; 0x190
 8002448:	4642      	mov	r2, r8
 800244a:	464b      	mov	r3, r9
 800244c:	1891      	adds	r1, r2, r2
 800244e:	67b9      	str	r1, [r7, #120]	; 0x78
 8002450:	415b      	adcs	r3, r3
 8002452:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002454:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8002458:	4641      	mov	r1, r8
 800245a:	1851      	adds	r1, r2, r1
 800245c:	6739      	str	r1, [r7, #112]	; 0x70
 800245e:	4649      	mov	r1, r9
 8002460:	414b      	adcs	r3, r1
 8002462:	677b      	str	r3, [r7, #116]	; 0x74
 8002464:	f04f 0200 	mov.w	r2, #0
 8002468:	f04f 0300 	mov.w	r3, #0
 800246c:	e9d7 ab1c 	ldrd	sl, fp, [r7, #112]	; 0x70
 8002470:	4659      	mov	r1, fp
 8002472:	00cb      	lsls	r3, r1, #3
 8002474:	4651      	mov	r1, sl
 8002476:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800247a:	4651      	mov	r1, sl
 800247c:	00ca      	lsls	r2, r1, #3
 800247e:	4610      	mov	r0, r2
 8002480:	4619      	mov	r1, r3
 8002482:	4603      	mov	r3, r0
 8002484:	4642      	mov	r2, r8
 8002486:	189b      	adds	r3, r3, r2
 8002488:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 800248c:	464b      	mov	r3, r9
 800248e:	460a      	mov	r2, r1
 8002490:	eb42 0303 	adc.w	r3, r2, r3
 8002494:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 8002498:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	2200      	movs	r2, #0
 80024a0:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80024a4:	f8c7 2184 	str.w	r2, [r7, #388]	; 0x184
 80024a8:	e9d7 1260 	ldrd	r1, r2, [r7, #384]	; 0x180
 80024ac:	460b      	mov	r3, r1
 80024ae:	18db      	adds	r3, r3, r3
 80024b0:	66bb      	str	r3, [r7, #104]	; 0x68
 80024b2:	4613      	mov	r3, r2
 80024b4:	eb42 0303 	adc.w	r3, r2, r3
 80024b8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80024ba:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80024be:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 80024c2:	f7fd fe81 	bl	80001c8 <__aeabi_uldivmod>
 80024c6:	4602      	mov	r2, r0
 80024c8:	460b      	mov	r3, r1
 80024ca:	4611      	mov	r1, r2
 80024cc:	4b39      	ldr	r3, [pc, #228]	; (80025b4 <UART_SetConfig+0x528>)
 80024ce:	fba3 2301 	umull	r2, r3, r3, r1
 80024d2:	095b      	lsrs	r3, r3, #5
 80024d4:	2264      	movs	r2, #100	; 0x64
 80024d6:	fb02 f303 	mul.w	r3, r2, r3
 80024da:	1acb      	subs	r3, r1, r3
 80024dc:	00db      	lsls	r3, r3, #3
 80024de:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80024e2:	4b34      	ldr	r3, [pc, #208]	; (80025b4 <UART_SetConfig+0x528>)
 80024e4:	fba3 2302 	umull	r2, r3, r3, r2
 80024e8:	095b      	lsrs	r3, r3, #5
 80024ea:	005b      	lsls	r3, r3, #1
 80024ec:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80024f0:	441c      	add	r4, r3
 80024f2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80024f6:	2200      	movs	r2, #0
 80024f8:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 80024fc:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8002500:	e9d7 895e 	ldrd	r8, r9, [r7, #376]	; 0x178
 8002504:	4642      	mov	r2, r8
 8002506:	464b      	mov	r3, r9
 8002508:	1891      	adds	r1, r2, r2
 800250a:	6639      	str	r1, [r7, #96]	; 0x60
 800250c:	415b      	adcs	r3, r3
 800250e:	667b      	str	r3, [r7, #100]	; 0x64
 8002510:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8002514:	4641      	mov	r1, r8
 8002516:	1851      	adds	r1, r2, r1
 8002518:	65b9      	str	r1, [r7, #88]	; 0x58
 800251a:	4649      	mov	r1, r9
 800251c:	414b      	adcs	r3, r1
 800251e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002520:	f04f 0200 	mov.w	r2, #0
 8002524:	f04f 0300 	mov.w	r3, #0
 8002528:	e9d7 ab16 	ldrd	sl, fp, [r7, #88]	; 0x58
 800252c:	4659      	mov	r1, fp
 800252e:	00cb      	lsls	r3, r1, #3
 8002530:	4651      	mov	r1, sl
 8002532:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002536:	4651      	mov	r1, sl
 8002538:	00ca      	lsls	r2, r1, #3
 800253a:	4610      	mov	r0, r2
 800253c:	4619      	mov	r1, r3
 800253e:	4603      	mov	r3, r0
 8002540:	4642      	mov	r2, r8
 8002542:	189b      	adds	r3, r3, r2
 8002544:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 8002548:	464b      	mov	r3, r9
 800254a:	460a      	mov	r2, r1
 800254c:	eb42 0303 	adc.w	r3, r2, r3
 8002550:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8002554:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	2200      	movs	r2, #0
 800255c:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 8002560:	f8c7 216c 	str.w	r2, [r7, #364]	; 0x16c
 8002564:	e9d7 125a 	ldrd	r1, r2, [r7, #360]	; 0x168
 8002568:	460b      	mov	r3, r1
 800256a:	18db      	adds	r3, r3, r3
 800256c:	653b      	str	r3, [r7, #80]	; 0x50
 800256e:	4613      	mov	r3, r2
 8002570:	eb42 0303 	adc.w	r3, r2, r3
 8002574:	657b      	str	r3, [r7, #84]	; 0x54
 8002576:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800257a:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 800257e:	f7fd fe23 	bl	80001c8 <__aeabi_uldivmod>
 8002582:	4602      	mov	r2, r0
 8002584:	460b      	mov	r3, r1
 8002586:	4b0b      	ldr	r3, [pc, #44]	; (80025b4 <UART_SetConfig+0x528>)
 8002588:	fba3 1302 	umull	r1, r3, r3, r2
 800258c:	095b      	lsrs	r3, r3, #5
 800258e:	2164      	movs	r1, #100	; 0x64
 8002590:	fb01 f303 	mul.w	r3, r1, r3
 8002594:	1ad3      	subs	r3, r2, r3
 8002596:	00db      	lsls	r3, r3, #3
 8002598:	3332      	adds	r3, #50	; 0x32
 800259a:	4a06      	ldr	r2, [pc, #24]	; (80025b4 <UART_SetConfig+0x528>)
 800259c:	fba2 2303 	umull	r2, r3, r2, r3
 80025a0:	095b      	lsrs	r3, r3, #5
 80025a2:	f003 0207 	and.w	r2, r3, #7
 80025a6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4422      	add	r2, r4
 80025ae:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80025b0:	e232      	b.n	8002a18 <UART_SetConfig+0x98c>
 80025b2:	bf00      	nop
 80025b4:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80025b8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80025bc:	681a      	ldr	r2, [r3, #0]
 80025be:	4b8d      	ldr	r3, [pc, #564]	; (80027f4 <UART_SetConfig+0x768>)
 80025c0:	429a      	cmp	r2, r3
 80025c2:	d006      	beq.n	80025d2 <UART_SetConfig+0x546>
 80025c4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80025c8:	681a      	ldr	r2, [r3, #0]
 80025ca:	4b8b      	ldr	r3, [pc, #556]	; (80027f8 <UART_SetConfig+0x76c>)
 80025cc:	429a      	cmp	r2, r3
 80025ce:	f040 8117 	bne.w	8002800 <UART_SetConfig+0x774>
      pclk = HAL_RCC_GetPCLK2Freq();
 80025d2:	f7ff f931 	bl	8001838 <HAL_RCC_GetPCLK2Freq>
 80025d6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80025da:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80025de:	2200      	movs	r2, #0
 80025e0:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 80025e4:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 80025e8:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 80025ec:	4622      	mov	r2, r4
 80025ee:	462b      	mov	r3, r5
 80025f0:	1891      	adds	r1, r2, r2
 80025f2:	64b9      	str	r1, [r7, #72]	; 0x48
 80025f4:	415b      	adcs	r3, r3
 80025f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80025f8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80025fc:	4621      	mov	r1, r4
 80025fe:	eb12 0801 	adds.w	r8, r2, r1
 8002602:	4629      	mov	r1, r5
 8002604:	eb43 0901 	adc.w	r9, r3, r1
 8002608:	f04f 0200 	mov.w	r2, #0
 800260c:	f04f 0300 	mov.w	r3, #0
 8002610:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002614:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002618:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800261c:	4690      	mov	r8, r2
 800261e:	4699      	mov	r9, r3
 8002620:	4623      	mov	r3, r4
 8002622:	eb18 0303 	adds.w	r3, r8, r3
 8002626:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 800262a:	462b      	mov	r3, r5
 800262c:	eb49 0303 	adc.w	r3, r9, r3
 8002630:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8002634:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	2200      	movs	r2, #0
 800263c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002640:	f8c7 2154 	str.w	r2, [r7, #340]	; 0x154
 8002644:	f04f 0200 	mov.w	r2, #0
 8002648:	f04f 0300 	mov.w	r3, #0
 800264c:	e9d7 4554 	ldrd	r4, r5, [r7, #336]	; 0x150
 8002650:	4629      	mov	r1, r5
 8002652:	008b      	lsls	r3, r1, #2
 8002654:	4621      	mov	r1, r4
 8002656:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800265a:	4621      	mov	r1, r4
 800265c:	008a      	lsls	r2, r1, #2
 800265e:	e9d7 0156 	ldrd	r0, r1, [r7, #344]	; 0x158
 8002662:	f7fd fdb1 	bl	80001c8 <__aeabi_uldivmod>
 8002666:	4602      	mov	r2, r0
 8002668:	460b      	mov	r3, r1
 800266a:	4b64      	ldr	r3, [pc, #400]	; (80027fc <UART_SetConfig+0x770>)
 800266c:	fba3 2302 	umull	r2, r3, r3, r2
 8002670:	095b      	lsrs	r3, r3, #5
 8002672:	011c      	lsls	r4, r3, #4
 8002674:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002678:	2200      	movs	r2, #0
 800267a:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 800267e:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8002682:	e9d7 8952 	ldrd	r8, r9, [r7, #328]	; 0x148
 8002686:	4642      	mov	r2, r8
 8002688:	464b      	mov	r3, r9
 800268a:	1891      	adds	r1, r2, r2
 800268c:	6439      	str	r1, [r7, #64]	; 0x40
 800268e:	415b      	adcs	r3, r3
 8002690:	647b      	str	r3, [r7, #68]	; 0x44
 8002692:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002696:	4641      	mov	r1, r8
 8002698:	1851      	adds	r1, r2, r1
 800269a:	63b9      	str	r1, [r7, #56]	; 0x38
 800269c:	4649      	mov	r1, r9
 800269e:	414b      	adcs	r3, r1
 80026a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80026a2:	f04f 0200 	mov.w	r2, #0
 80026a6:	f04f 0300 	mov.w	r3, #0
 80026aa:	e9d7 ab0e 	ldrd	sl, fp, [r7, #56]	; 0x38
 80026ae:	4659      	mov	r1, fp
 80026b0:	00cb      	lsls	r3, r1, #3
 80026b2:	4651      	mov	r1, sl
 80026b4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80026b8:	4651      	mov	r1, sl
 80026ba:	00ca      	lsls	r2, r1, #3
 80026bc:	4610      	mov	r0, r2
 80026be:	4619      	mov	r1, r3
 80026c0:	4603      	mov	r3, r0
 80026c2:	4642      	mov	r2, r8
 80026c4:	189b      	adds	r3, r3, r2
 80026c6:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 80026ca:	464b      	mov	r3, r9
 80026cc:	460a      	mov	r2, r1
 80026ce:	eb42 0303 	adc.w	r3, r2, r3
 80026d2:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 80026d6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	2200      	movs	r2, #0
 80026de:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 80026e2:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 80026e6:	f04f 0200 	mov.w	r2, #0
 80026ea:	f04f 0300 	mov.w	r3, #0
 80026ee:	e9d7 894e 	ldrd	r8, r9, [r7, #312]	; 0x138
 80026f2:	4649      	mov	r1, r9
 80026f4:	008b      	lsls	r3, r1, #2
 80026f6:	4641      	mov	r1, r8
 80026f8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80026fc:	4641      	mov	r1, r8
 80026fe:	008a      	lsls	r2, r1, #2
 8002700:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 8002704:	f7fd fd60 	bl	80001c8 <__aeabi_uldivmod>
 8002708:	4602      	mov	r2, r0
 800270a:	460b      	mov	r3, r1
 800270c:	4b3b      	ldr	r3, [pc, #236]	; (80027fc <UART_SetConfig+0x770>)
 800270e:	fba3 1302 	umull	r1, r3, r3, r2
 8002712:	095b      	lsrs	r3, r3, #5
 8002714:	2164      	movs	r1, #100	; 0x64
 8002716:	fb01 f303 	mul.w	r3, r1, r3
 800271a:	1ad3      	subs	r3, r2, r3
 800271c:	011b      	lsls	r3, r3, #4
 800271e:	3332      	adds	r3, #50	; 0x32
 8002720:	4a36      	ldr	r2, [pc, #216]	; (80027fc <UART_SetConfig+0x770>)
 8002722:	fba2 2303 	umull	r2, r3, r2, r3
 8002726:	095b      	lsrs	r3, r3, #5
 8002728:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800272c:	441c      	add	r4, r3
 800272e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002732:	2200      	movs	r2, #0
 8002734:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8002738:	f8c7 2134 	str.w	r2, [r7, #308]	; 0x134
 800273c:	e9d7 894c 	ldrd	r8, r9, [r7, #304]	; 0x130
 8002740:	4642      	mov	r2, r8
 8002742:	464b      	mov	r3, r9
 8002744:	1891      	adds	r1, r2, r2
 8002746:	6339      	str	r1, [r7, #48]	; 0x30
 8002748:	415b      	adcs	r3, r3
 800274a:	637b      	str	r3, [r7, #52]	; 0x34
 800274c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002750:	4641      	mov	r1, r8
 8002752:	1851      	adds	r1, r2, r1
 8002754:	62b9      	str	r1, [r7, #40]	; 0x28
 8002756:	4649      	mov	r1, r9
 8002758:	414b      	adcs	r3, r1
 800275a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800275c:	f04f 0200 	mov.w	r2, #0
 8002760:	f04f 0300 	mov.w	r3, #0
 8002764:	e9d7 ab0a 	ldrd	sl, fp, [r7, #40]	; 0x28
 8002768:	4659      	mov	r1, fp
 800276a:	00cb      	lsls	r3, r1, #3
 800276c:	4651      	mov	r1, sl
 800276e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002772:	4651      	mov	r1, sl
 8002774:	00ca      	lsls	r2, r1, #3
 8002776:	4610      	mov	r0, r2
 8002778:	4619      	mov	r1, r3
 800277a:	4603      	mov	r3, r0
 800277c:	4642      	mov	r2, r8
 800277e:	189b      	adds	r3, r3, r2
 8002780:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8002784:	464b      	mov	r3, r9
 8002786:	460a      	mov	r2, r1
 8002788:	eb42 0303 	adc.w	r3, r2, r3
 800278c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8002790:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	2200      	movs	r2, #0
 8002798:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800279c:	f8c7 2124 	str.w	r2, [r7, #292]	; 0x124
 80027a0:	f04f 0200 	mov.w	r2, #0
 80027a4:	f04f 0300 	mov.w	r3, #0
 80027a8:	e9d7 8948 	ldrd	r8, r9, [r7, #288]	; 0x120
 80027ac:	4649      	mov	r1, r9
 80027ae:	008b      	lsls	r3, r1, #2
 80027b0:	4641      	mov	r1, r8
 80027b2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80027b6:	4641      	mov	r1, r8
 80027b8:	008a      	lsls	r2, r1, #2
 80027ba:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 80027be:	f7fd fd03 	bl	80001c8 <__aeabi_uldivmod>
 80027c2:	4602      	mov	r2, r0
 80027c4:	460b      	mov	r3, r1
 80027c6:	4b0d      	ldr	r3, [pc, #52]	; (80027fc <UART_SetConfig+0x770>)
 80027c8:	fba3 1302 	umull	r1, r3, r3, r2
 80027cc:	095b      	lsrs	r3, r3, #5
 80027ce:	2164      	movs	r1, #100	; 0x64
 80027d0:	fb01 f303 	mul.w	r3, r1, r3
 80027d4:	1ad3      	subs	r3, r2, r3
 80027d6:	011b      	lsls	r3, r3, #4
 80027d8:	3332      	adds	r3, #50	; 0x32
 80027da:	4a08      	ldr	r2, [pc, #32]	; (80027fc <UART_SetConfig+0x770>)
 80027dc:	fba2 2303 	umull	r2, r3, r2, r3
 80027e0:	095b      	lsrs	r3, r3, #5
 80027e2:	f003 020f 	and.w	r2, r3, #15
 80027e6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4422      	add	r2, r4
 80027ee:	609a      	str	r2, [r3, #8]
 80027f0:	e112      	b.n	8002a18 <UART_SetConfig+0x98c>
 80027f2:	bf00      	nop
 80027f4:	40011000 	.word	0x40011000
 80027f8:	40011400 	.word	0x40011400
 80027fc:	51eb851f 	.word	0x51eb851f
      pclk = HAL_RCC_GetPCLK1Freq();
 8002800:	f7ff f806 	bl	8001810 <HAL_RCC_GetPCLK1Freq>
 8002804:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002808:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800280c:	2200      	movs	r2, #0
 800280e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8002812:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8002816:	e9d7 8946 	ldrd	r8, r9, [r7, #280]	; 0x118
 800281a:	4642      	mov	r2, r8
 800281c:	464b      	mov	r3, r9
 800281e:	1891      	adds	r1, r2, r2
 8002820:	6239      	str	r1, [r7, #32]
 8002822:	415b      	adcs	r3, r3
 8002824:	627b      	str	r3, [r7, #36]	; 0x24
 8002826:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800282a:	4641      	mov	r1, r8
 800282c:	1854      	adds	r4, r2, r1
 800282e:	4649      	mov	r1, r9
 8002830:	eb43 0501 	adc.w	r5, r3, r1
 8002834:	f04f 0200 	mov.w	r2, #0
 8002838:	f04f 0300 	mov.w	r3, #0
 800283c:	00eb      	lsls	r3, r5, #3
 800283e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002842:	00e2      	lsls	r2, r4, #3
 8002844:	4614      	mov	r4, r2
 8002846:	461d      	mov	r5, r3
 8002848:	4643      	mov	r3, r8
 800284a:	18e3      	adds	r3, r4, r3
 800284c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8002850:	464b      	mov	r3, r9
 8002852:	eb45 0303 	adc.w	r3, r5, r3
 8002856:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800285a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	2200      	movs	r2, #0
 8002862:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8002866:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 800286a:	f04f 0200 	mov.w	r2, #0
 800286e:	f04f 0300 	mov.w	r3, #0
 8002872:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 8002876:	4629      	mov	r1, r5
 8002878:	008b      	lsls	r3, r1, #2
 800287a:	4621      	mov	r1, r4
 800287c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002880:	4621      	mov	r1, r4
 8002882:	008a      	lsls	r2, r1, #2
 8002884:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8002888:	f7fd fc9e 	bl	80001c8 <__aeabi_uldivmod>
 800288c:	4602      	mov	r2, r0
 800288e:	460b      	mov	r3, r1
 8002890:	4b64      	ldr	r3, [pc, #400]	; (8002a24 <UART_SetConfig+0x998>)
 8002892:	fba3 2302 	umull	r2, r3, r3, r2
 8002896:	095b      	lsrs	r3, r3, #5
 8002898:	011c      	lsls	r4, r3, #4
 800289a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800289e:	2200      	movs	r2, #0
 80028a0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80028a4:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 80028a8:	e9d7 8940 	ldrd	r8, r9, [r7, #256]	; 0x100
 80028ac:	4642      	mov	r2, r8
 80028ae:	464b      	mov	r3, r9
 80028b0:	1891      	adds	r1, r2, r2
 80028b2:	61b9      	str	r1, [r7, #24]
 80028b4:	415b      	adcs	r3, r3
 80028b6:	61fb      	str	r3, [r7, #28]
 80028b8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80028bc:	4641      	mov	r1, r8
 80028be:	1851      	adds	r1, r2, r1
 80028c0:	6139      	str	r1, [r7, #16]
 80028c2:	4649      	mov	r1, r9
 80028c4:	414b      	adcs	r3, r1
 80028c6:	617b      	str	r3, [r7, #20]
 80028c8:	f04f 0200 	mov.w	r2, #0
 80028cc:	f04f 0300 	mov.w	r3, #0
 80028d0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80028d4:	4659      	mov	r1, fp
 80028d6:	00cb      	lsls	r3, r1, #3
 80028d8:	4651      	mov	r1, sl
 80028da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80028de:	4651      	mov	r1, sl
 80028e0:	00ca      	lsls	r2, r1, #3
 80028e2:	4610      	mov	r0, r2
 80028e4:	4619      	mov	r1, r3
 80028e6:	4603      	mov	r3, r0
 80028e8:	4642      	mov	r2, r8
 80028ea:	189b      	adds	r3, r3, r2
 80028ec:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80028f0:	464b      	mov	r3, r9
 80028f2:	460a      	mov	r2, r1
 80028f4:	eb42 0303 	adc.w	r3, r2, r3
 80028f8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80028fc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	2200      	movs	r2, #0
 8002904:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8002908:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 800290c:	f04f 0200 	mov.w	r2, #0
 8002910:	f04f 0300 	mov.w	r3, #0
 8002914:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	; 0xf0
 8002918:	4649      	mov	r1, r9
 800291a:	008b      	lsls	r3, r1, #2
 800291c:	4641      	mov	r1, r8
 800291e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002922:	4641      	mov	r1, r8
 8002924:	008a      	lsls	r2, r1, #2
 8002926:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 800292a:	f7fd fc4d 	bl	80001c8 <__aeabi_uldivmod>
 800292e:	4602      	mov	r2, r0
 8002930:	460b      	mov	r3, r1
 8002932:	4b3c      	ldr	r3, [pc, #240]	; (8002a24 <UART_SetConfig+0x998>)
 8002934:	fba3 1302 	umull	r1, r3, r3, r2
 8002938:	095b      	lsrs	r3, r3, #5
 800293a:	2164      	movs	r1, #100	; 0x64
 800293c:	fb01 f303 	mul.w	r3, r1, r3
 8002940:	1ad3      	subs	r3, r2, r3
 8002942:	011b      	lsls	r3, r3, #4
 8002944:	3332      	adds	r3, #50	; 0x32
 8002946:	4a37      	ldr	r2, [pc, #220]	; (8002a24 <UART_SetConfig+0x998>)
 8002948:	fba2 2303 	umull	r2, r3, r2, r3
 800294c:	095b      	lsrs	r3, r3, #5
 800294e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002952:	441c      	add	r4, r3
 8002954:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002958:	2200      	movs	r2, #0
 800295a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800295e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002962:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 8002966:	4642      	mov	r2, r8
 8002968:	464b      	mov	r3, r9
 800296a:	1891      	adds	r1, r2, r2
 800296c:	60b9      	str	r1, [r7, #8]
 800296e:	415b      	adcs	r3, r3
 8002970:	60fb      	str	r3, [r7, #12]
 8002972:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002976:	4641      	mov	r1, r8
 8002978:	1851      	adds	r1, r2, r1
 800297a:	6039      	str	r1, [r7, #0]
 800297c:	4649      	mov	r1, r9
 800297e:	414b      	adcs	r3, r1
 8002980:	607b      	str	r3, [r7, #4]
 8002982:	f04f 0200 	mov.w	r2, #0
 8002986:	f04f 0300 	mov.w	r3, #0
 800298a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800298e:	4659      	mov	r1, fp
 8002990:	00cb      	lsls	r3, r1, #3
 8002992:	4651      	mov	r1, sl
 8002994:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002998:	4651      	mov	r1, sl
 800299a:	00ca      	lsls	r2, r1, #3
 800299c:	4610      	mov	r0, r2
 800299e:	4619      	mov	r1, r3
 80029a0:	4603      	mov	r3, r0
 80029a2:	4642      	mov	r2, r8
 80029a4:	189b      	adds	r3, r3, r2
 80029a6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80029aa:	464b      	mov	r3, r9
 80029ac:	460a      	mov	r2, r1
 80029ae:	eb42 0303 	adc.w	r3, r2, r3
 80029b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80029b6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	2200      	movs	r2, #0
 80029be:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80029c2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80029c6:	f04f 0200 	mov.w	r2, #0
 80029ca:	f04f 0300 	mov.w	r3, #0
 80029ce:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	; 0xd8
 80029d2:	4649      	mov	r1, r9
 80029d4:	008b      	lsls	r3, r1, #2
 80029d6:	4641      	mov	r1, r8
 80029d8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80029dc:	4641      	mov	r1, r8
 80029de:	008a      	lsls	r2, r1, #2
 80029e0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80029e4:	f7fd fbf0 	bl	80001c8 <__aeabi_uldivmod>
 80029e8:	4602      	mov	r2, r0
 80029ea:	460b      	mov	r3, r1
 80029ec:	4b0d      	ldr	r3, [pc, #52]	; (8002a24 <UART_SetConfig+0x998>)
 80029ee:	fba3 1302 	umull	r1, r3, r3, r2
 80029f2:	095b      	lsrs	r3, r3, #5
 80029f4:	2164      	movs	r1, #100	; 0x64
 80029f6:	fb01 f303 	mul.w	r3, r1, r3
 80029fa:	1ad3      	subs	r3, r2, r3
 80029fc:	011b      	lsls	r3, r3, #4
 80029fe:	3332      	adds	r3, #50	; 0x32
 8002a00:	4a08      	ldr	r2, [pc, #32]	; (8002a24 <UART_SetConfig+0x998>)
 8002a02:	fba2 2303 	umull	r2, r3, r2, r3
 8002a06:	095b      	lsrs	r3, r3, #5
 8002a08:	f003 020f 	and.w	r2, r3, #15
 8002a0c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4422      	add	r2, r4
 8002a14:	609a      	str	r2, [r3, #8]
}
 8002a16:	e7ff      	b.n	8002a18 <UART_SetConfig+0x98c>
 8002a18:	bf00      	nop
 8002a1a:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a24:	51eb851f 	.word	0x51eb851f

08002a28 <__libc_init_array>:
 8002a28:	b570      	push	{r4, r5, r6, lr}
 8002a2a:	4d0d      	ldr	r5, [pc, #52]	; (8002a60 <__libc_init_array+0x38>)
 8002a2c:	4c0d      	ldr	r4, [pc, #52]	; (8002a64 <__libc_init_array+0x3c>)
 8002a2e:	1b64      	subs	r4, r4, r5
 8002a30:	10a4      	asrs	r4, r4, #2
 8002a32:	2600      	movs	r6, #0
 8002a34:	42a6      	cmp	r6, r4
 8002a36:	d109      	bne.n	8002a4c <__libc_init_array+0x24>
 8002a38:	4d0b      	ldr	r5, [pc, #44]	; (8002a68 <__libc_init_array+0x40>)
 8002a3a:	4c0c      	ldr	r4, [pc, #48]	; (8002a6c <__libc_init_array+0x44>)
 8002a3c:	f000 f820 	bl	8002a80 <_init>
 8002a40:	1b64      	subs	r4, r4, r5
 8002a42:	10a4      	asrs	r4, r4, #2
 8002a44:	2600      	movs	r6, #0
 8002a46:	42a6      	cmp	r6, r4
 8002a48:	d105      	bne.n	8002a56 <__libc_init_array+0x2e>
 8002a4a:	bd70      	pop	{r4, r5, r6, pc}
 8002a4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a50:	4798      	blx	r3
 8002a52:	3601      	adds	r6, #1
 8002a54:	e7ee      	b.n	8002a34 <__libc_init_array+0xc>
 8002a56:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a5a:	4798      	blx	r3
 8002a5c:	3601      	adds	r6, #1
 8002a5e:	e7f2      	b.n	8002a46 <__libc_init_array+0x1e>
 8002a60:	08002ac0 	.word	0x08002ac0
 8002a64:	08002ac0 	.word	0x08002ac0
 8002a68:	08002ac0 	.word	0x08002ac0
 8002a6c:	08002ac4 	.word	0x08002ac4

08002a70 <memset>:
 8002a70:	4402      	add	r2, r0
 8002a72:	4603      	mov	r3, r0
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d100      	bne.n	8002a7a <memset+0xa>
 8002a78:	4770      	bx	lr
 8002a7a:	f803 1b01 	strb.w	r1, [r3], #1
 8002a7e:	e7f9      	b.n	8002a74 <memset+0x4>

08002a80 <_init>:
 8002a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a82:	bf00      	nop
 8002a84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a86:	bc08      	pop	{r3}
 8002a88:	469e      	mov	lr, r3
 8002a8a:	4770      	bx	lr

08002a8c <_fini>:
 8002a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a8e:	bf00      	nop
 8002a90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a92:	bc08      	pop	{r3}
 8002a94:	469e      	mov	lr, r3
 8002a96:	4770      	bx	lr
