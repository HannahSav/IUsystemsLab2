
SDK_UART_l2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000048dc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000016b8  08004a6c  08004a6c  00014a6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006124  08006124  000200e0  2**0
                  CONTENTS
  4 .ARM          00000008  08006124  08006124  00016124  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800612c  0800612c  000200e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800612c  0800612c  0001612c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006130  08006130  00016130  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000e0  20000000  08006134  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200e0  2**0
                  CONTENTS
 10 .bss          00000518  200000e0  200000e0  000200e0  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200005f8  200005f8  000200e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200e0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000afd9  00000000  00000000  00020110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002006  00000000  00000000  0002b0e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a30  00000000  00000000  0002d0f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002049a  00000000  00000000  0002db20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d6e5  00000000  00000000  0004dfba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c2098  00000000  00000000  0005b69f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011d737  2**0
                  CONTENTS, READONLY
 20 .debug_ranges 00000930  00000000  00000000  0011d788  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00002cbc  00000000  00000000  0011e0b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000e0 	.word	0x200000e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004a54 	.word	0x08004a54

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000e4 	.word	0x200000e4
 80001cc:	08004a54 	.word	0x08004a54

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b08a      	sub	sp, #40	; 0x28
 8000578:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800057a:	f107 0314 	add.w	r3, r7, #20
 800057e:	2200      	movs	r2, #0
 8000580:	601a      	str	r2, [r3, #0]
 8000582:	605a      	str	r2, [r3, #4]
 8000584:	609a      	str	r2, [r3, #8]
 8000586:	60da      	str	r2, [r3, #12]
 8000588:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800058a:	2300      	movs	r3, #0
 800058c:	613b      	str	r3, [r7, #16]
 800058e:	4b27      	ldr	r3, [pc, #156]	; (800062c <MX_GPIO_Init+0xb8>)
 8000590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000592:	4a26      	ldr	r2, [pc, #152]	; (800062c <MX_GPIO_Init+0xb8>)
 8000594:	f043 0308 	orr.w	r3, r3, #8
 8000598:	6313      	str	r3, [r2, #48]	; 0x30
 800059a:	4b24      	ldr	r3, [pc, #144]	; (800062c <MX_GPIO_Init+0xb8>)
 800059c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800059e:	f003 0308 	and.w	r3, r3, #8
 80005a2:	613b      	str	r3, [r7, #16]
 80005a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005a6:	2300      	movs	r3, #0
 80005a8:	60fb      	str	r3, [r7, #12]
 80005aa:	4b20      	ldr	r3, [pc, #128]	; (800062c <MX_GPIO_Init+0xb8>)
 80005ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ae:	4a1f      	ldr	r2, [pc, #124]	; (800062c <MX_GPIO_Init+0xb8>)
 80005b0:	f043 0304 	orr.w	r3, r3, #4
 80005b4:	6313      	str	r3, [r2, #48]	; 0x30
 80005b6:	4b1d      	ldr	r3, [pc, #116]	; (800062c <MX_GPIO_Init+0xb8>)
 80005b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ba:	f003 0304 	and.w	r3, r3, #4
 80005be:	60fb      	str	r3, [r7, #12]
 80005c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005c2:	2300      	movs	r3, #0
 80005c4:	60bb      	str	r3, [r7, #8]
 80005c6:	4b19      	ldr	r3, [pc, #100]	; (800062c <MX_GPIO_Init+0xb8>)
 80005c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ca:	4a18      	ldr	r2, [pc, #96]	; (800062c <MX_GPIO_Init+0xb8>)
 80005cc:	f043 0301 	orr.w	r3, r3, #1
 80005d0:	6313      	str	r3, [r2, #48]	; 0x30
 80005d2:	4b16      	ldr	r3, [pc, #88]	; (800062c <MX_GPIO_Init+0xb8>)
 80005d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d6:	f003 0301 	and.w	r3, r3, #1
 80005da:	60bb      	str	r3, [r7, #8]
 80005dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005de:	2300      	movs	r3, #0
 80005e0:	607b      	str	r3, [r7, #4]
 80005e2:	4b12      	ldr	r3, [pc, #72]	; (800062c <MX_GPIO_Init+0xb8>)
 80005e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e6:	4a11      	ldr	r2, [pc, #68]	; (800062c <MX_GPIO_Init+0xb8>)
 80005e8:	f043 0302 	orr.w	r3, r3, #2
 80005ec:	6313      	str	r3, [r2, #48]	; 0x30
 80005ee:	4b0f      	ldr	r3, [pc, #60]	; (800062c <MX_GPIO_Init+0xb8>)
 80005f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f2:	f003 0302 	and.w	r3, r3, #2
 80005f6:	607b      	str	r3, [r7, #4]
 80005f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80005fa:	2200      	movs	r2, #0
 80005fc:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8000600:	480b      	ldr	r0, [pc, #44]	; (8000630 <MX_GPIO_Init+0xbc>)
 8000602:	f001 fbbf 	bl	8001d84 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000606:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800060a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800060c:	2301      	movs	r3, #1
 800060e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000610:	2300      	movs	r3, #0
 8000612:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000614:	2300      	movs	r3, #0
 8000616:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000618:	f107 0314 	add.w	r3, r7, #20
 800061c:	4619      	mov	r1, r3
 800061e:	4804      	ldr	r0, [pc, #16]	; (8000630 <MX_GPIO_Init+0xbc>)
 8000620:	f001 f9fc 	bl	8001a1c <HAL_GPIO_Init>

}
 8000624:	bf00      	nop
 8000626:	3728      	adds	r7, #40	; 0x28
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}
 800062c:	40023800 	.word	0x40023800
 8000630:	40020c00 	.word	0x40020c00

08000634 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000638:	4b12      	ldr	r3, [pc, #72]	; (8000684 <MX_I2C1_Init+0x50>)
 800063a:	4a13      	ldr	r2, [pc, #76]	; (8000688 <MX_I2C1_Init+0x54>)
 800063c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800063e:	4b11      	ldr	r3, [pc, #68]	; (8000684 <MX_I2C1_Init+0x50>)
 8000640:	4a12      	ldr	r2, [pc, #72]	; (800068c <MX_I2C1_Init+0x58>)
 8000642:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000644:	4b0f      	ldr	r3, [pc, #60]	; (8000684 <MX_I2C1_Init+0x50>)
 8000646:	2200      	movs	r2, #0
 8000648:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800064a:	4b0e      	ldr	r3, [pc, #56]	; (8000684 <MX_I2C1_Init+0x50>)
 800064c:	2200      	movs	r2, #0
 800064e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000650:	4b0c      	ldr	r3, [pc, #48]	; (8000684 <MX_I2C1_Init+0x50>)
 8000652:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000656:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000658:	4b0a      	ldr	r3, [pc, #40]	; (8000684 <MX_I2C1_Init+0x50>)
 800065a:	2200      	movs	r2, #0
 800065c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800065e:	4b09      	ldr	r3, [pc, #36]	; (8000684 <MX_I2C1_Init+0x50>)
 8000660:	2200      	movs	r2, #0
 8000662:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000664:	4b07      	ldr	r3, [pc, #28]	; (8000684 <MX_I2C1_Init+0x50>)
 8000666:	2200      	movs	r2, #0
 8000668:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800066a:	4b06      	ldr	r3, [pc, #24]	; (8000684 <MX_I2C1_Init+0x50>)
 800066c:	2200      	movs	r2, #0
 800066e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000670:	4804      	ldr	r0, [pc, #16]	; (8000684 <MX_I2C1_Init+0x50>)
 8000672:	f001 fbbb 	bl	8001dec <HAL_I2C_Init>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800067c:	f000 fcb6 	bl	8000fec <Error_Handler>
  }

}
 8000680:	bf00      	nop
 8000682:	bd80      	pop	{r7, pc}
 8000684:	200000fc 	.word	0x200000fc
 8000688:	40005400 	.word	0x40005400
 800068c:	000186a0 	.word	0x000186a0

08000690 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b08a      	sub	sp, #40	; 0x28
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000698:	f107 0314 	add.w	r3, r7, #20
 800069c:	2200      	movs	r2, #0
 800069e:	601a      	str	r2, [r3, #0]
 80006a0:	605a      	str	r2, [r3, #4]
 80006a2:	609a      	str	r2, [r3, #8]
 80006a4:	60da      	str	r2, [r3, #12]
 80006a6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	4a19      	ldr	r2, [pc, #100]	; (8000714 <HAL_I2C_MspInit+0x84>)
 80006ae:	4293      	cmp	r3, r2
 80006b0:	d12c      	bne.n	800070c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006b2:	2300      	movs	r3, #0
 80006b4:	613b      	str	r3, [r7, #16]
 80006b6:	4b18      	ldr	r3, [pc, #96]	; (8000718 <HAL_I2C_MspInit+0x88>)
 80006b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ba:	4a17      	ldr	r2, [pc, #92]	; (8000718 <HAL_I2C_MspInit+0x88>)
 80006bc:	f043 0302 	orr.w	r3, r3, #2
 80006c0:	6313      	str	r3, [r2, #48]	; 0x30
 80006c2:	4b15      	ldr	r3, [pc, #84]	; (8000718 <HAL_I2C_MspInit+0x88>)
 80006c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c6:	f003 0302 	and.w	r3, r3, #2
 80006ca:	613b      	str	r3, [r7, #16]
 80006cc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80006ce:	f44f 7340 	mov.w	r3, #768	; 0x300
 80006d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80006d4:	2312      	movs	r3, #18
 80006d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006d8:	2301      	movs	r3, #1
 80006da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006dc:	2303      	movs	r3, #3
 80006de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80006e0:	2304      	movs	r3, #4
 80006e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006e4:	f107 0314 	add.w	r3, r7, #20
 80006e8:	4619      	mov	r1, r3
 80006ea:	480c      	ldr	r0, [pc, #48]	; (800071c <HAL_I2C_MspInit+0x8c>)
 80006ec:	f001 f996 	bl	8001a1c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80006f0:	2300      	movs	r3, #0
 80006f2:	60fb      	str	r3, [r7, #12]
 80006f4:	4b08      	ldr	r3, [pc, #32]	; (8000718 <HAL_I2C_MspInit+0x88>)
 80006f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f8:	4a07      	ldr	r2, [pc, #28]	; (8000718 <HAL_I2C_MspInit+0x88>)
 80006fa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80006fe:	6413      	str	r3, [r2, #64]	; 0x40
 8000700:	4b05      	ldr	r3, [pc, #20]	; (8000718 <HAL_I2C_MspInit+0x88>)
 8000702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000704:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000708:	60fb      	str	r3, [r7, #12]
 800070a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800070c:	bf00      	nop
 800070e:	3728      	adds	r7, #40	; 0x28
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}
 8000714:	40005400 	.word	0x40005400
 8000718:	40023800 	.word	0x40023800
 800071c:	40020400 	.word	0x40020400

08000720 <Compare>:
size_t i = 0;
char num_char[12];
size_t num_len = 4;


bool Compare(char a[], char b[], int i){
 8000720:	b480      	push	{r7}
 8000722:	b087      	sub	sp, #28
 8000724:	af00      	add	r7, sp, #0
 8000726:	60f8      	str	r0, [r7, #12]
 8000728:	60b9      	str	r1, [r7, #8]
 800072a:	607a      	str	r2, [r7, #4]
	for(int j = 0;  j < i; j++){
 800072c:	2300      	movs	r3, #0
 800072e:	617b      	str	r3, [r7, #20]
 8000730:	e00e      	b.n	8000750 <Compare+0x30>
		if(a[j] != b[j])
 8000732:	697b      	ldr	r3, [r7, #20]
 8000734:	68fa      	ldr	r2, [r7, #12]
 8000736:	4413      	add	r3, r2
 8000738:	781a      	ldrb	r2, [r3, #0]
 800073a:	697b      	ldr	r3, [r7, #20]
 800073c:	68b9      	ldr	r1, [r7, #8]
 800073e:	440b      	add	r3, r1
 8000740:	781b      	ldrb	r3, [r3, #0]
 8000742:	429a      	cmp	r2, r3
 8000744:	d001      	beq.n	800074a <Compare+0x2a>
			return false;
 8000746:	2300      	movs	r3, #0
 8000748:	e007      	b.n	800075a <Compare+0x3a>
	for(int j = 0;  j < i; j++){
 800074a:	697b      	ldr	r3, [r7, #20]
 800074c:	3301      	adds	r3, #1
 800074e:	617b      	str	r3, [r7, #20]
 8000750:	697a      	ldr	r2, [r7, #20]
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	429a      	cmp	r2, r3
 8000756:	dbec      	blt.n	8000732 <Compare+0x12>
	}
	return true;
 8000758:	2301      	movs	r3, #1
}
 800075a:	4618      	mov	r0, r3
 800075c:	371c      	adds	r7, #28
 800075e:	46bd      	mov	sp, r7
 8000760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000764:	4770      	bx	lr
	...

08000768 <ReadCommand>:

void ReadCommand(char consist[], int len){
 8000768:	b580      	push	{r7, lr}
 800076a:	b086      	sub	sp, #24
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
 8000770:	6039      	str	r1, [r7, #0]

		if(iter == 11){
 8000772:	4ba0      	ldr	r3, [pc, #640]	; (80009f4 <ReadCommand+0x28c>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	2b0b      	cmp	r3, #11
 8000778:	d142      	bne.n	8000800 <ReadCommand+0x98>
			if(Compare(str_buff, "set mode 1.", 11)){
 800077a:	220b      	movs	r2, #11
 800077c:	499e      	ldr	r1, [pc, #632]	; (80009f8 <ReadCommand+0x290>)
 800077e:	489f      	ldr	r0, [pc, #636]	; (80009fc <ReadCommand+0x294>)
 8000780:	f7ff ffce 	bl	8000720 <Compare>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d015      	beq.n	80007b6 <ReadCommand+0x4e>
				HAL_UART_Transmit(&huart6, (uint8_t*)"\n\rmode with stops\n\r>>", 21, 5);
 800078a:	2305      	movs	r3, #5
 800078c:	2215      	movs	r2, #21
 800078e:	499c      	ldr	r1, [pc, #624]	; (8000a00 <ReadCommand+0x298>)
 8000790:	489c      	ldr	r0, [pc, #624]	; (8000a04 <ReadCommand+0x29c>)
 8000792:	f002 fc20 	bl	8002fd6 <HAL_UART_Transmit>

				oled_SetCursor(0, 28);
 8000796:	211c      	movs	r1, #28
 8000798:	2000      	movs	r0, #0
 800079a:	f000 fe0d 	bl	80013b8 <oled_SetCursor>
				oled_WriteString("with stops   ", Font_7x10, Black);
 800079e:	4a9a      	ldr	r2, [pc, #616]	; (8000a08 <ReadCommand+0x2a0>)
 80007a0:	2300      	movs	r3, #0
 80007a2:	ca06      	ldmia	r2, {r1, r2}
 80007a4:	4899      	ldr	r0, [pc, #612]	; (8000a0c <ReadCommand+0x2a4>)
 80007a6:	f000 fde1 	bl	800136c <oled_WriteString>
				oled_UpdateScreen();
 80007aa:	f000 fccf 	bl	800114c <oled_UpdateScreen>

				now_mode = 1;
 80007ae:	4b98      	ldr	r3, [pc, #608]	; (8000a10 <ReadCommand+0x2a8>)
 80007b0:	2201      	movs	r2, #1
 80007b2:	701a      	strb	r2, [r3, #0]


	}
	/*TODO:
	 */
}
 80007b4:	e119      	b.n	80009ea <ReadCommand+0x282>
			}else if(Compare(str_buff, "set mode 2.", 11)){
 80007b6:	220b      	movs	r2, #11
 80007b8:	4996      	ldr	r1, [pc, #600]	; (8000a14 <ReadCommand+0x2ac>)
 80007ba:	4890      	ldr	r0, [pc, #576]	; (80009fc <ReadCommand+0x294>)
 80007bc:	f7ff ffb0 	bl	8000720 <Compare>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d015      	beq.n	80007f2 <ReadCommand+0x8a>
				HAL_UART_Transmit(&huart6, (uint8_t*)"\n\rmode without stops\n\r>>", 25, 5);
 80007c6:	2305      	movs	r3, #5
 80007c8:	2219      	movs	r2, #25
 80007ca:	4993      	ldr	r1, [pc, #588]	; (8000a18 <ReadCommand+0x2b0>)
 80007cc:	488d      	ldr	r0, [pc, #564]	; (8000a04 <ReadCommand+0x29c>)
 80007ce:	f002 fc02 	bl	8002fd6 <HAL_UART_Transmit>
				oled_SetCursor(0, 28);
 80007d2:	211c      	movs	r1, #28
 80007d4:	2000      	movs	r0, #0
 80007d6:	f000 fdef 	bl	80013b8 <oled_SetCursor>
				oled_WriteString("without stops", Font_7x10, Black);
 80007da:	4a8b      	ldr	r2, [pc, #556]	; (8000a08 <ReadCommand+0x2a0>)
 80007dc:	2300      	movs	r3, #0
 80007de:	ca06      	ldmia	r2, {r1, r2}
 80007e0:	488e      	ldr	r0, [pc, #568]	; (8000a1c <ReadCommand+0x2b4>)
 80007e2:	f000 fdc3 	bl	800136c <oled_WriteString>
				oled_UpdateScreen();
 80007e6:	f000 fcb1 	bl	800114c <oled_UpdateScreen>
				now_mode = 0;
 80007ea:	4b89      	ldr	r3, [pc, #548]	; (8000a10 <ReadCommand+0x2a8>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	701a      	strb	r2, [r3, #0]
}
 80007f0:	e0fb      	b.n	80009ea <ReadCommand+0x282>
				HAL_UART_Transmit(&huart6, (uint8_t*)error, 40, 5);
 80007f2:	2305      	movs	r3, #5
 80007f4:	2228      	movs	r2, #40	; 0x28
 80007f6:	498a      	ldr	r1, [pc, #552]	; (8000a20 <ReadCommand+0x2b8>)
 80007f8:	4882      	ldr	r0, [pc, #520]	; (8000a04 <ReadCommand+0x29c>)
 80007fa:	f002 fbec 	bl	8002fd6 <HAL_UART_Transmit>
}
 80007fe:	e0f4      	b.n	80009ea <ReadCommand+0x282>
		}else if(iter >= 14 && iter < 25){
 8000800:	4b7c      	ldr	r3, [pc, #496]	; (80009f4 <ReadCommand+0x28c>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	2b0d      	cmp	r3, #13
 8000806:	f240 80a3 	bls.w	8000950 <ReadCommand+0x1e8>
 800080a:	4b7a      	ldr	r3, [pc, #488]	; (80009f4 <ReadCommand+0x28c>)
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	2b18      	cmp	r3, #24
 8000810:	f200 809e 	bhi.w	8000950 <ReadCommand+0x1e8>
			if(Compare(str_buff, "set timeout", 11)){
 8000814:	220b      	movs	r2, #11
 8000816:	4983      	ldr	r1, [pc, #524]	; (8000a24 <ReadCommand+0x2bc>)
 8000818:	4878      	ldr	r0, [pc, #480]	; (80009fc <ReadCommand+0x294>)
 800081a:	f7ff ff81 	bl	8000720 <Compare>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	f000 808e 	beq.w	8000942 <ReadCommand+0x1da>
				int number = 0;
 8000826:	2300      	movs	r3, #0
 8000828:	613b      	str	r3, [r7, #16]
				for(j = 12; j < iter - 1; j++){
 800082a:	230c      	movs	r3, #12
 800082c:	617b      	str	r3, [r7, #20]
 800082e:	e027      	b.n	8000880 <ReadCommand+0x118>
					number = number * 10;
 8000830:	693a      	ldr	r2, [r7, #16]
 8000832:	4613      	mov	r3, r2
 8000834:	009b      	lsls	r3, r3, #2
 8000836:	4413      	add	r3, r2
 8000838:	005b      	lsls	r3, r3, #1
 800083a:	613b      	str	r3, [r7, #16]
					if((str_buff[j] - '0') > 9){
 800083c:	4a6f      	ldr	r2, [pc, #444]	; (80009fc <ReadCommand+0x294>)
 800083e:	697b      	ldr	r3, [r7, #20]
 8000840:	4413      	add	r3, r2
 8000842:	781b      	ldrb	r3, [r3, #0]
 8000844:	2b39      	cmp	r3, #57	; 0x39
 8000846:	d906      	bls.n	8000856 <ReadCommand+0xee>
						HAL_UART_Transmit(&huart6, (uint8_t*)"\n\rneed a number in the end. try again\n\r>>", 41, 5);
 8000848:	2305      	movs	r3, #5
 800084a:	2229      	movs	r2, #41	; 0x29
 800084c:	4976      	ldr	r1, [pc, #472]	; (8000a28 <ReadCommand+0x2c0>)
 800084e:	486d      	ldr	r0, [pc, #436]	; (8000a04 <ReadCommand+0x29c>)
 8000850:	f002 fbc1 	bl	8002fd6 <HAL_UART_Transmit>
						break;
 8000854:	e01a      	b.n	800088c <ReadCommand+0x124>
					number = number + (str_buff[j] - '0');
 8000856:	4a69      	ldr	r2, [pc, #420]	; (80009fc <ReadCommand+0x294>)
 8000858:	697b      	ldr	r3, [r7, #20]
 800085a:	4413      	add	r3, r2
 800085c:	781b      	ldrb	r3, [r3, #0]
 800085e:	3b30      	subs	r3, #48	; 0x30
 8000860:	693a      	ldr	r2, [r7, #16]
 8000862:	4413      	add	r3, r2
 8000864:	613b      	str	r3, [r7, #16]
					now_time_out = number;
 8000866:	4a71      	ldr	r2, [pc, #452]	; (8000a2c <ReadCommand+0x2c4>)
 8000868:	693b      	ldr	r3, [r7, #16]
 800086a:	6013      	str	r3, [r2, #0]
					sprintf(num_char, "%d", now_time_out);
 800086c:	4b6f      	ldr	r3, [pc, #444]	; (8000a2c <ReadCommand+0x2c4>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	461a      	mov	r2, r3
 8000872:	496f      	ldr	r1, [pc, #444]	; (8000a30 <ReadCommand+0x2c8>)
 8000874:	486f      	ldr	r0, [pc, #444]	; (8000a34 <ReadCommand+0x2cc>)
 8000876:	f003 fc77 	bl	8004168 <siprintf>
				for(j = 12; j < iter - 1; j++){
 800087a:	697b      	ldr	r3, [r7, #20]
 800087c:	3301      	adds	r3, #1
 800087e:	617b      	str	r3, [r7, #20]
 8000880:	4b5c      	ldr	r3, [pc, #368]	; (80009f4 <ReadCommand+0x28c>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	1e5a      	subs	r2, r3, #1
 8000886:	697b      	ldr	r3, [r7, #20]
 8000888:	429a      	cmp	r2, r3
 800088a:	d8d1      	bhi.n	8000830 <ReadCommand+0xc8>
				if(j >= iter - 1){
 800088c:	4b59      	ldr	r3, [pc, #356]	; (80009f4 <ReadCommand+0x28c>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	1e5a      	subs	r2, r3, #1
 8000892:	697b      	ldr	r3, [r7, #20]
 8000894:	429a      	cmp	r2, r3
 8000896:	f200 80a7 	bhi.w	80009e8 <ReadCommand+0x280>
					num_len = iter - 13;
 800089a:	4b56      	ldr	r3, [pc, #344]	; (80009f4 <ReadCommand+0x28c>)
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	3b0d      	subs	r3, #13
 80008a0:	4a65      	ldr	r2, [pc, #404]	; (8000a38 <ReadCommand+0x2d0>)
 80008a2:	6013      	str	r3, [r2, #0]
					now_time_out = number;
 80008a4:	4a61      	ldr	r2, [pc, #388]	; (8000a2c <ReadCommand+0x2c4>)
 80008a6:	693b      	ldr	r3, [r7, #16]
 80008a8:	6013      	str	r3, [r2, #0]
					sprintf(num_char, "%d", now_time_out);
 80008aa:	4b60      	ldr	r3, [pc, #384]	; (8000a2c <ReadCommand+0x2c4>)
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	461a      	mov	r2, r3
 80008b0:	495f      	ldr	r1, [pc, #380]	; (8000a30 <ReadCommand+0x2c8>)
 80008b2:	4860      	ldr	r0, [pc, #384]	; (8000a34 <ReadCommand+0x2cc>)
 80008b4:	f003 fc58 	bl	8004168 <siprintf>
					HAL_UART_Transmit(&huart6, (uint8_t*)"\n\rTimeout ", 10, 25);
 80008b8:	2319      	movs	r3, #25
 80008ba:	220a      	movs	r2, #10
 80008bc:	495f      	ldr	r1, [pc, #380]	; (8000a3c <ReadCommand+0x2d4>)
 80008be:	4851      	ldr	r0, [pc, #324]	; (8000a04 <ReadCommand+0x29c>)
 80008c0:	f002 fb89 	bl	8002fd6 <HAL_UART_Transmit>
					HAL_UART_Transmit(&huart6, (uint8_t*)num_char, num_len, 25);
 80008c4:	4b5c      	ldr	r3, [pc, #368]	; (8000a38 <ReadCommand+0x2d0>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	b29a      	uxth	r2, r3
 80008ca:	2319      	movs	r3, #25
 80008cc:	4959      	ldr	r1, [pc, #356]	; (8000a34 <ReadCommand+0x2cc>)
 80008ce:	484d      	ldr	r0, [pc, #308]	; (8000a04 <ReadCommand+0x29c>)
 80008d0:	f002 fb81 	bl	8002fd6 <HAL_UART_Transmit>
					HAL_UART_Transmit(&huart6, (uint8_t*)"\n\r>>", 4, 25);
 80008d4:	2319      	movs	r3, #25
 80008d6:	2204      	movs	r2, #4
 80008d8:	4959      	ldr	r1, [pc, #356]	; (8000a40 <ReadCommand+0x2d8>)
 80008da:	484a      	ldr	r0, [pc, #296]	; (8000a04 <ReadCommand+0x29c>)
 80008dc:	f002 fb7b 	bl	8002fd6 <HAL_UART_Transmit>
					oled_SetCursor(56, 38);
 80008e0:	2126      	movs	r1, #38	; 0x26
 80008e2:	2038      	movs	r0, #56	; 0x38
 80008e4:	f000 fd68 	bl	80013b8 <oled_SetCursor>
					oled_WriteString(num_char, Font_7x10, Black);
 80008e8:	4a47      	ldr	r2, [pc, #284]	; (8000a08 <ReadCommand+0x2a0>)
 80008ea:	2300      	movs	r3, #0
 80008ec:	ca06      	ldmia	r2, {r1, r2}
 80008ee:	4851      	ldr	r0, [pc, #324]	; (8000a34 <ReadCommand+0x2cc>)
 80008f0:	f000 fd3c 	bl	800136c <oled_WriteString>
					oled_SetCursor(56 + j - 12, 38);
 80008f4:	697b      	ldr	r3, [r7, #20]
 80008f6:	b2db      	uxtb	r3, r3
 80008f8:	332c      	adds	r3, #44	; 0x2c
 80008fa:	b2db      	uxtb	r3, r3
 80008fc:	2126      	movs	r1, #38	; 0x26
 80008fe:	4618      	mov	r0, r3
 8000900:	f000 fd5a 	bl	80013b8 <oled_SetCursor>
					for(int str_i = j-12; str_i < 8; str_i++){
 8000904:	697b      	ldr	r3, [r7, #20]
 8000906:	3b0c      	subs	r3, #12
 8000908:	60fb      	str	r3, [r7, #12]
 800090a:	e014      	b.n	8000936 <ReadCommand+0x1ce>
						oled_SetCursor(56 + 7*str_i, 38);
 800090c:	68fb      	ldr	r3, [r7, #12]
 800090e:	b2db      	uxtb	r3, r3
 8000910:	461a      	mov	r2, r3
 8000912:	00d2      	lsls	r2, r2, #3
 8000914:	1ad3      	subs	r3, r2, r3
 8000916:	b2db      	uxtb	r3, r3
 8000918:	3338      	adds	r3, #56	; 0x38
 800091a:	b2db      	uxtb	r3, r3
 800091c:	2126      	movs	r1, #38	; 0x26
 800091e:	4618      	mov	r0, r3
 8000920:	f000 fd4a 	bl	80013b8 <oled_SetCursor>
						oled_WriteString(" ", Font_7x10, Black);
 8000924:	4a38      	ldr	r2, [pc, #224]	; (8000a08 <ReadCommand+0x2a0>)
 8000926:	2300      	movs	r3, #0
 8000928:	ca06      	ldmia	r2, {r1, r2}
 800092a:	4846      	ldr	r0, [pc, #280]	; (8000a44 <ReadCommand+0x2dc>)
 800092c:	f000 fd1e 	bl	800136c <oled_WriteString>
					for(int str_i = j-12; str_i < 8; str_i++){
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	3301      	adds	r3, #1
 8000934:	60fb      	str	r3, [r7, #12]
 8000936:	68fb      	ldr	r3, [r7, #12]
 8000938:	2b07      	cmp	r3, #7
 800093a:	dde7      	ble.n	800090c <ReadCommand+0x1a4>
					oled_UpdateScreen();
 800093c:	f000 fc06 	bl	800114c <oled_UpdateScreen>
			if(Compare(str_buff, "set timeout", 11)){
 8000940:	e052      	b.n	80009e8 <ReadCommand+0x280>
				HAL_UART_Transmit(&huart6, (uint8_t*)error, 40, 5);
 8000942:	2305      	movs	r3, #5
 8000944:	2228      	movs	r2, #40	; 0x28
 8000946:	4936      	ldr	r1, [pc, #216]	; (8000a20 <ReadCommand+0x2b8>)
 8000948:	482e      	ldr	r0, [pc, #184]	; (8000a04 <ReadCommand+0x29c>)
 800094a:	f002 fb44 	bl	8002fd6 <HAL_UART_Transmit>
			if(Compare(str_buff, "set timeout", 11)){
 800094e:	e04b      	b.n	80009e8 <ReadCommand+0x280>
		}else if(iter == 2){
 8000950:	4b28      	ldr	r3, [pc, #160]	; (80009f4 <ReadCommand+0x28c>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	2b02      	cmp	r3, #2
 8000956:	d140      	bne.n	80009da <ReadCommand+0x272>
			if(Compare(str_buff, "?.", 2)){
 8000958:	2202      	movs	r2, #2
 800095a:	493b      	ldr	r1, [pc, #236]	; (8000a48 <ReadCommand+0x2e0>)
 800095c:	4827      	ldr	r0, [pc, #156]	; (80009fc <ReadCommand+0x294>)
 800095e:	f7ff fedf 	bl	8000720 <Compare>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d040      	beq.n	80009ea <ReadCommand+0x282>
				HAL_UART_Transmit(&huart6, (uint8_t*)"\n\rINFO:", 7, 5);
 8000968:	2305      	movs	r3, #5
 800096a:	2207      	movs	r2, #7
 800096c:	4937      	ldr	r1, [pc, #220]	; (8000a4c <ReadCommand+0x2e4>)
 800096e:	4825      	ldr	r0, [pc, #148]	; (8000a04 <ReadCommand+0x29c>)
 8000970:	f002 fb31 	bl	8002fd6 <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart6, (uint8_t*)"\n\r  -", 5, 5);
 8000974:	2305      	movs	r3, #5
 8000976:	2205      	movs	r2, #5
 8000978:	4935      	ldr	r1, [pc, #212]	; (8000a50 <ReadCommand+0x2e8>)
 800097a:	4822      	ldr	r0, [pc, #136]	; (8000a04 <ReadCommand+0x29c>)
 800097c:	f002 fb2b 	bl	8002fd6 <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart6, (uint8_t*)consist, len, 5);
 8000980:	683b      	ldr	r3, [r7, #0]
 8000982:	b29a      	uxth	r2, r3
 8000984:	2305      	movs	r3, #5
 8000986:	6879      	ldr	r1, [r7, #4]
 8000988:	481e      	ldr	r0, [pc, #120]	; (8000a04 <ReadCommand+0x29c>)
 800098a:	f002 fb24 	bl	8002fd6 <HAL_UART_Transmit>
				if(now_mode == 1)
 800098e:	4b20      	ldr	r3, [pc, #128]	; (8000a10 <ReadCommand+0x2a8>)
 8000990:	781b      	ldrb	r3, [r3, #0]
 8000992:	2b00      	cmp	r3, #0
 8000994:	d006      	beq.n	80009a4 <ReadCommand+0x23c>
					HAL_UART_Transmit(&huart6, (uint8_t*)"  -mode 1\n\r", 11, 5);
 8000996:	2305      	movs	r3, #5
 8000998:	220b      	movs	r2, #11
 800099a:	492e      	ldr	r1, [pc, #184]	; (8000a54 <ReadCommand+0x2ec>)
 800099c:	4819      	ldr	r0, [pc, #100]	; (8000a04 <ReadCommand+0x29c>)
 800099e:	f002 fb1a 	bl	8002fd6 <HAL_UART_Transmit>
 80009a2:	e005      	b.n	80009b0 <ReadCommand+0x248>
					HAL_UART_Transmit(&huart6, (uint8_t*)"  -mode 2\n\r", 11, 5);
 80009a4:	2305      	movs	r3, #5
 80009a6:	220b      	movs	r2, #11
 80009a8:	492b      	ldr	r1, [pc, #172]	; (8000a58 <ReadCommand+0x2f0>)
 80009aa:	4816      	ldr	r0, [pc, #88]	; (8000a04 <ReadCommand+0x29c>)
 80009ac:	f002 fb13 	bl	8002fd6 <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart6, (uint8_t*)"  -timeout ", 11, 5);
 80009b0:	2305      	movs	r3, #5
 80009b2:	220b      	movs	r2, #11
 80009b4:	4929      	ldr	r1, [pc, #164]	; (8000a5c <ReadCommand+0x2f4>)
 80009b6:	4813      	ldr	r0, [pc, #76]	; (8000a04 <ReadCommand+0x29c>)
 80009b8:	f002 fb0d 	bl	8002fd6 <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart6, (uint8_t*)num_char, num_len, 5);
 80009bc:	4b1e      	ldr	r3, [pc, #120]	; (8000a38 <ReadCommand+0x2d0>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	b29a      	uxth	r2, r3
 80009c2:	2305      	movs	r3, #5
 80009c4:	491b      	ldr	r1, [pc, #108]	; (8000a34 <ReadCommand+0x2cc>)
 80009c6:	480f      	ldr	r0, [pc, #60]	; (8000a04 <ReadCommand+0x29c>)
 80009c8:	f002 fb05 	bl	8002fd6 <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart6, (uint8_t*)" \n\r>>", 5, 5);
 80009cc:	2305      	movs	r3, #5
 80009ce:	2205      	movs	r2, #5
 80009d0:	4923      	ldr	r1, [pc, #140]	; (8000a60 <ReadCommand+0x2f8>)
 80009d2:	480c      	ldr	r0, [pc, #48]	; (8000a04 <ReadCommand+0x29c>)
 80009d4:	f002 faff 	bl	8002fd6 <HAL_UART_Transmit>
}
 80009d8:	e007      	b.n	80009ea <ReadCommand+0x282>
			HAL_UART_Transmit(&huart6, (uint8_t*)error, 40, 5);
 80009da:	2305      	movs	r3, #5
 80009dc:	2228      	movs	r2, #40	; 0x28
 80009de:	4910      	ldr	r1, [pc, #64]	; (8000a20 <ReadCommand+0x2b8>)
 80009e0:	4808      	ldr	r0, [pc, #32]	; (8000a04 <ReadCommand+0x29c>)
 80009e2:	f002 faf8 	bl	8002fd6 <HAL_UART_Transmit>
}
 80009e6:	e000      	b.n	80009ea <ReadCommand+0x282>
			if(Compare(str_buff, "set timeout", 11)){
 80009e8:	bf00      	nop
}
 80009ea:	bf00      	nop
 80009ec:	3718      	adds	r7, #24
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	20000188 	.word	0x20000188
 80009f8:	08004a6c 	.word	0x08004a6c
 80009fc:	2000016c 	.word	0x2000016c
 8000a00:	08004a78 	.word	0x08004a78
 8000a04:	200005a4 	.word	0x200005a4
 8000a08:	20000000 	.word	0x20000000
 8000a0c:	08004a90 	.word	0x08004a90
 8000a10:	20000068 	.word	0x20000068
 8000a14:	08004aa0 	.word	0x08004aa0
 8000a18:	08004aac 	.word	0x08004aac
 8000a1c:	08004ac8 	.word	0x08004ac8
 8000a20:	20000010 	.word	0x20000010
 8000a24:	08004ad8 	.word	0x08004ad8
 8000a28:	08004ae4 	.word	0x08004ae4
 8000a2c:	20000064 	.word	0x20000064
 8000a30:	08004b10 	.word	0x08004b10
 8000a34:	2000018c 	.word	0x2000018c
 8000a38:	2000006c 	.word	0x2000006c
 8000a3c:	08004b14 	.word	0x08004b14
 8000a40:	08004b20 	.word	0x08004b20
 8000a44:	08004b28 	.word	0x08004b28
 8000a48:	08004b2c 	.word	0x08004b2c
 8000a4c:	08004b30 	.word	0x08004b30
 8000a50:	08004b38 	.word	0x08004b38
 8000a54:	08004b40 	.word	0x08004b40
 8000a58:	08004b4c 	.word	0x08004b4c
 8000a5c:	08004b58 	.word	0x08004b58
 8000a60:	08004b64 	.word	0x08004b64

08000a64 <CheckRead>:

void CheckRead(char consist[], int len, int now_i_light){
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b086      	sub	sp, #24
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	60f8      	str	r0, [r7, #12]
 8000a6c:	60b9      	str	r1, [r7, #8]
 8000a6e:	607a      	str	r2, [r7, #4]
	 char symb = '7';
 8000a70:	2337      	movs	r3, #55	; 0x37
 8000a72:	75fb      	strb	r3, [r7, #23]
	 if(HAL_UART_Receive(&huart6, &symb, 1, 1) == HAL_OK){
 8000a74:	f107 0117 	add.w	r1, r7, #23
 8000a78:	2301      	movs	r3, #1
 8000a7a:	2201      	movs	r2, #1
 8000a7c:	481b      	ldr	r0, [pc, #108]	; (8000aec <CheckRead+0x88>)
 8000a7e:	f002 fb43 	bl	8003108 <HAL_UART_Receive>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d110      	bne.n	8000aaa <CheckRead+0x46>
		 HAL_UART_Transmit(&huart6, &symb, 1, 1);
 8000a88:	f107 0117 	add.w	r1, r7, #23
 8000a8c:	2301      	movs	r3, #1
 8000a8e:	2201      	movs	r2, #1
 8000a90:	4816      	ldr	r0, [pc, #88]	; (8000aec <CheckRead+0x88>)
 8000a92:	f002 faa0 	bl	8002fd6 <HAL_UART_Transmit>
		 buff[iter] = symb;
 8000a96:	4b16      	ldr	r3, [pc, #88]	; (8000af0 <CheckRead+0x8c>)
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	7df9      	ldrb	r1, [r7, #23]
 8000a9c:	4a15      	ldr	r2, [pc, #84]	; (8000af4 <CheckRead+0x90>)
 8000a9e:	54d1      	strb	r1, [r2, r3]
		 iter++;
 8000aa0:	4b13      	ldr	r3, [pc, #76]	; (8000af0 <CheckRead+0x8c>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	3301      	adds	r3, #1
 8000aa6:	4a12      	ldr	r2, [pc, #72]	; (8000af0 <CheckRead+0x8c>)
 8000aa8:	6013      	str	r3, [r2, #0]
	 }
	 if(symb == '.' || iter >= 25){
 8000aaa:	7dfb      	ldrb	r3, [r7, #23]
 8000aac:	2b2e      	cmp	r3, #46	; 0x2e
 8000aae:	d003      	beq.n	8000ab8 <CheckRead+0x54>
 8000ab0:	4b0f      	ldr	r3, [pc, #60]	; (8000af0 <CheckRead+0x8c>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	2b18      	cmp	r3, #24
 8000ab6:	d915      	bls.n	8000ae4 <CheckRead+0x80>
		 if(iter >= 25)
 8000ab8:	4b0d      	ldr	r3, [pc, #52]	; (8000af0 <CheckRead+0x8c>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	2b18      	cmp	r3, #24
 8000abe:	d906      	bls.n	8000ace <CheckRead+0x6a>
			 HAL_UART_Transmit(&huart6, (uint8_t*)error, 40, 5);
 8000ac0:	2305      	movs	r3, #5
 8000ac2:	2228      	movs	r2, #40	; 0x28
 8000ac4:	490c      	ldr	r1, [pc, #48]	; (8000af8 <CheckRead+0x94>)
 8000ac6:	4809      	ldr	r0, [pc, #36]	; (8000aec <CheckRead+0x88>)
 8000ac8:	f002 fa85 	bl	8002fd6 <HAL_UART_Transmit>
 8000acc:	e007      	b.n	8000ade <CheckRead+0x7a>
		 else
		 {
			 strcpy(str_buff,buff);
 8000ace:	4909      	ldr	r1, [pc, #36]	; (8000af4 <CheckRead+0x90>)
 8000ad0:	480a      	ldr	r0, [pc, #40]	; (8000afc <CheckRead+0x98>)
 8000ad2:	f003 fb69 	bl	80041a8 <strcpy>
			 ReadCommand(consist, len);
 8000ad6:	68b9      	ldr	r1, [r7, #8]
 8000ad8:	68f8      	ldr	r0, [r7, #12]
 8000ada:	f7ff fe45 	bl	8000768 <ReadCommand>
		 }
		 iter = 0;
 8000ade:	4b04      	ldr	r3, [pc, #16]	; (8000af0 <CheckRead+0x8c>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	601a      	str	r2, [r3, #0]
	 }
}
 8000ae4:	bf00      	nop
 8000ae6:	3718      	adds	r7, #24
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	200005a4 	.word	0x200005a4
 8000af0:	20000188 	.word	0x20000188
 8000af4:	20000150 	.word	0x20000150
 8000af8:	20000010 	.word	0x20000010
 8000afc:	2000016c 	.word	0x2000016c

08000b00 <Phore>:

void Phore(){
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b086      	sub	sp, #24
 8000b04:	af00      	add	r7, sp, #0
	int i, j;
	  while (1)
	  {
	   /*горит зеленый*/

	      oled_SetCursor(0, 18);
 8000b06:	2112      	movs	r1, #18
 8000b08:	2000      	movs	r0, #0
 8000b0a:	f000 fc55 	bl	80013b8 <oled_SetCursor>
	      oled_WriteString("green    ", Font_7x10, Black);
 8000b0e:	4aaa      	ldr	r2, [pc, #680]	; (8000db8 <Phore+0x2b8>)
 8000b10:	2300      	movs	r3, #0
 8000b12:	ca06      	ldmia	r2, {r1, r2}
 8000b14:	48a9      	ldr	r0, [pc, #676]	; (8000dbc <Phore+0x2bc>)
 8000b16:	f000 fc29 	bl	800136c <oled_WriteString>
	      oled_UpdateScreen();
 8000b1a:	f000 fb17 	bl	800114c <oled_UpdateScreen>

	      HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 8000b1e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b22:	48a7      	ldr	r0, [pc, #668]	; (8000dc0 <Phore+0x2c0>)
 8000b24:	f001 f947 	bl	8001db6 <HAL_GPIO_TogglePin>

	      for(i = 0; i < now_time_out/2; i++){
 8000b28:	2300      	movs	r3, #0
 8000b2a:	617b      	str	r3, [r7, #20]
 8000b2c:	e00a      	b.n	8000b44 <Phore+0x44>
	    	  HAL_Delay(1);
 8000b2e:	2001      	movs	r0, #1
 8000b30:	f000 fe1c 	bl	800176c <HAL_Delay>
	    	  CheckRead("green\n\r", 7, i);
 8000b34:	697a      	ldr	r2, [r7, #20]
 8000b36:	2107      	movs	r1, #7
 8000b38:	48a2      	ldr	r0, [pc, #648]	; (8000dc4 <Phore+0x2c4>)
 8000b3a:	f7ff ff93 	bl	8000a64 <CheckRead>
	      for(i = 0; i < now_time_out/2; i++){
 8000b3e:	697b      	ldr	r3, [r7, #20]
 8000b40:	3301      	adds	r3, #1
 8000b42:	617b      	str	r3, [r7, #20]
 8000b44:	4ba0      	ldr	r3, [pc, #640]	; (8000dc8 <Phore+0x2c8>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	0fda      	lsrs	r2, r3, #31
 8000b4a:	4413      	add	r3, r2
 8000b4c:	105b      	asrs	r3, r3, #1
 8000b4e:	461a      	mov	r2, r3
 8000b50:	697b      	ldr	r3, [r7, #20]
 8000b52:	4293      	cmp	r3, r2
 8000b54:	dbeb      	blt.n	8000b2e <Phore+0x2e>
	      }
	   /*мигает зеленый*/

	      oled_SetCursor(0,18);
 8000b56:	2112      	movs	r1, #18
 8000b58:	2000      	movs	r0, #0
 8000b5a:	f000 fc2d 	bl	80013b8 <oled_SetCursor>
	      oled_WriteString("blinking", Font_7x10, Black);
 8000b5e:	4a96      	ldr	r2, [pc, #600]	; (8000db8 <Phore+0x2b8>)
 8000b60:	2300      	movs	r3, #0
 8000b62:	ca06      	ldmia	r2, {r1, r2}
 8000b64:	4899      	ldr	r0, [pc, #612]	; (8000dcc <Phore+0x2cc>)
 8000b66:	f000 fc01 	bl	800136c <oled_WriteString>
	      oled_UpdateScreen();
 8000b6a:	f000 faef 	bl	800114c <oled_UpdateScreen>

	      for(i = 0; i < 7; ++i)
 8000b6e:	2300      	movs	r3, #0
 8000b70:	617b      	str	r3, [r7, #20]
 8000b72:	e020      	b.n	8000bb6 <Phore+0xb6>
	      {
	    	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 8000b74:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b78:	4891      	ldr	r0, [pc, #580]	; (8000dc0 <Phore+0x2c0>)
 8000b7a:	f001 f91c 	bl	8001db6 <HAL_GPIO_TogglePin>
	    	  for(j = 0; j < now_time_out/10; j++){
 8000b7e:	2300      	movs	r3, #0
 8000b80:	613b      	str	r3, [r7, #16]
 8000b82:	e00a      	b.n	8000b9a <Phore+0x9a>
	    		  HAL_Delay(1);//300
 8000b84:	2001      	movs	r0, #1
 8000b86:	f000 fdf1 	bl	800176c <HAL_Delay>
	    		  CheckRead("blinking green\n\r", 17, i);
 8000b8a:	697a      	ldr	r2, [r7, #20]
 8000b8c:	2111      	movs	r1, #17
 8000b8e:	4890      	ldr	r0, [pc, #576]	; (8000dd0 <Phore+0x2d0>)
 8000b90:	f7ff ff68 	bl	8000a64 <CheckRead>
	    	  for(j = 0; j < now_time_out/10; j++){
 8000b94:	693b      	ldr	r3, [r7, #16]
 8000b96:	3301      	adds	r3, #1
 8000b98:	613b      	str	r3, [r7, #16]
 8000b9a:	4b8b      	ldr	r3, [pc, #556]	; (8000dc8 <Phore+0x2c8>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	4a8d      	ldr	r2, [pc, #564]	; (8000dd4 <Phore+0x2d4>)
 8000ba0:	fb82 1203 	smull	r1, r2, r2, r3
 8000ba4:	1092      	asrs	r2, r2, #2
 8000ba6:	17db      	asrs	r3, r3, #31
 8000ba8:	1ad3      	subs	r3, r2, r3
 8000baa:	693a      	ldr	r2, [r7, #16]
 8000bac:	429a      	cmp	r2, r3
 8000bae:	dbe9      	blt.n	8000b84 <Phore+0x84>
	      for(i = 0; i < 7; ++i)
 8000bb0:	697b      	ldr	r3, [r7, #20]
 8000bb2:	3301      	adds	r3, #1
 8000bb4:	617b      	str	r3, [r7, #20]
 8000bb6:	697b      	ldr	r3, [r7, #20]
 8000bb8:	2b06      	cmp	r3, #6
 8000bba:	dddb      	ble.n	8000b74 <Phore+0x74>
	    	  }
	      }
	    /*горит оранжевый*/

	      oled_SetCursor(0, 18);
 8000bbc:	2112      	movs	r1, #18
 8000bbe:	2000      	movs	r0, #0
 8000bc0:	f000 fbfa 	bl	80013b8 <oled_SetCursor>
	      oled_WriteString("yellow  ", Font_7x10, Black);
 8000bc4:	4a7c      	ldr	r2, [pc, #496]	; (8000db8 <Phore+0x2b8>)
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	ca06      	ldmia	r2, {r1, r2}
 8000bca:	4883      	ldr	r0, [pc, #524]	; (8000dd8 <Phore+0x2d8>)
 8000bcc:	f000 fbce 	bl	800136c <oled_WriteString>
	      oled_UpdateScreen();
 8000bd0:	f000 fabc 	bl	800114c <oled_UpdateScreen>

	      HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 8000bd4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000bd8:	4879      	ldr	r0, [pc, #484]	; (8000dc0 <Phore+0x2c0>)
 8000bda:	f001 f8ec 	bl	8001db6 <HAL_GPIO_TogglePin>
	      for(i = 0; i < now_time_out/5; i++){
 8000bde:	2300      	movs	r3, #0
 8000be0:	617b      	str	r3, [r7, #20]
 8000be2:	e00a      	b.n	8000bfa <Phore+0xfa>
	    	  HAL_Delay(1); //600
 8000be4:	2001      	movs	r0, #1
 8000be6:	f000 fdc1 	bl	800176c <HAL_Delay>
	    	  CheckRead("yellow\n\r", 8, i);
 8000bea:	697a      	ldr	r2, [r7, #20]
 8000bec:	2108      	movs	r1, #8
 8000bee:	487b      	ldr	r0, [pc, #492]	; (8000ddc <Phore+0x2dc>)
 8000bf0:	f7ff ff38 	bl	8000a64 <CheckRead>
	      for(i = 0; i < now_time_out/5; i++){
 8000bf4:	697b      	ldr	r3, [r7, #20]
 8000bf6:	3301      	adds	r3, #1
 8000bf8:	617b      	str	r3, [r7, #20]
 8000bfa:	4b73      	ldr	r3, [pc, #460]	; (8000dc8 <Phore+0x2c8>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	4a75      	ldr	r2, [pc, #468]	; (8000dd4 <Phore+0x2d4>)
 8000c00:	fb82 1203 	smull	r1, r2, r2, r3
 8000c04:	1052      	asrs	r2, r2, #1
 8000c06:	17db      	asrs	r3, r3, #31
 8000c08:	1ad3      	subs	r3, r2, r3
 8000c0a:	697a      	ldr	r2, [r7, #20]
 8000c0c:	429a      	cmp	r2, r3
 8000c0e:	dbe9      	blt.n	8000be4 <Phore+0xe4>
	      }
	      HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 8000c10:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c14:	486a      	ldr	r0, [pc, #424]	; (8000dc0 <Phore+0x2c0>)
 8000c16:	f001 f8ce 	bl	8001db6 <HAL_GPIO_TogglePin>
	    /*горит красный*/

	      oled_SetCursor(0, 18);
 8000c1a:	2112      	movs	r1, #18
 8000c1c:	2000      	movs	r0, #0
 8000c1e:	f000 fbcb 	bl	80013b8 <oled_SetCursor>
	      oled_WriteString("red     ", Font_7x10, Black);
 8000c22:	4a65      	ldr	r2, [pc, #404]	; (8000db8 <Phore+0x2b8>)
 8000c24:	2300      	movs	r3, #0
 8000c26:	ca06      	ldmia	r2, {r1, r2}
 8000c28:	486d      	ldr	r0, [pc, #436]	; (8000de0 <Phore+0x2e0>)
 8000c2a:	f000 fb9f 	bl	800136c <oled_WriteString>
	      oled_UpdateScreen();
 8000c2e:	f000 fa8d 	bl	800114c <oled_UpdateScreen>

	      HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 8000c32:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c36:	4862      	ldr	r0, [pc, #392]	; (8000dc0 <Phore+0x2c0>)
 8000c38:	f001 f8bd 	bl	8001db6 <HAL_GPIO_TogglePin>
	      i = now_time_out*2;
 8000c3c:	4b62      	ldr	r3, [pc, #392]	; (8000dc8 <Phore+0x2c8>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	005b      	lsls	r3, r3, #1
 8000c42:	617b      	str	r3, [r7, #20]
	    /*ждем до нажатия кнопки или до окончания времени красного*/


	      while(i > 0 && (now_mode == 0 || HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_15) != GPIO_PIN_RESET)){
 8000c44:	e00a      	b.n	8000c5c <Phore+0x15c>
	       HAL_Delay(1);
 8000c46:	2001      	movs	r0, #1
 8000c48:	f000 fd90 	bl	800176c <HAL_Delay>
	       CheckRead("red\n\r", 5, i);
 8000c4c:	697a      	ldr	r2, [r7, #20]
 8000c4e:	2105      	movs	r1, #5
 8000c50:	4864      	ldr	r0, [pc, #400]	; (8000de4 <Phore+0x2e4>)
 8000c52:	f7ff ff07 	bl	8000a64 <CheckRead>
	       i--;
 8000c56:	697b      	ldr	r3, [r7, #20]
 8000c58:	3b01      	subs	r3, #1
 8000c5a:	617b      	str	r3, [r7, #20]
	      while(i > 0 && (now_mode == 0 || HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_15) != GPIO_PIN_RESET)){
 8000c5c:	697b      	ldr	r3, [r7, #20]
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	dd0e      	ble.n	8000c80 <Phore+0x180>
 8000c62:	4b61      	ldr	r3, [pc, #388]	; (8000de8 <Phore+0x2e8>)
 8000c64:	781b      	ldrb	r3, [r3, #0]
 8000c66:	f083 0301 	eor.w	r3, r3, #1
 8000c6a:	b2db      	uxtb	r3, r3
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d1ea      	bne.n	8000c46 <Phore+0x146>
 8000c70:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c74:	485d      	ldr	r0, [pc, #372]	; (8000dec <Phore+0x2ec>)
 8000c76:	f001 f86d 	bl	8001d54 <HAL_GPIO_ReadPin>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d1e2      	bne.n	8000c46 <Phore+0x146>
	      }

	    /*если красный горел недостаточно долго, то пусть еще погорит*/
	      char char_j[8];
	      int part_j;
	      if(now_mode == 1 && i > now_time_out){
 8000c80:	4b59      	ldr	r3, [pc, #356]	; (8000de8 <Phore+0x2e8>)
 8000c82:	781b      	ldrb	r3, [r3, #0]
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d073      	beq.n	8000d70 <Phore+0x270>
 8000c88:	4b4f      	ldr	r3, [pc, #316]	; (8000dc8 <Phore+0x2c8>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	697a      	ldr	r2, [r7, #20]
 8000c8e:	429a      	cmp	r2, r3
 8000c90:	dd6e      	ble.n	8000d70 <Phore+0x270>
		      oled_SetCursor(0, 48);
 8000c92:	2130      	movs	r1, #48	; 0x30
 8000c94:	2000      	movs	r0, #0
 8000c96:	f000 fb8f 	bl	80013b8 <oled_SetCursor>
		      oled_WriteString("Wait ", Font_7x10, Black);
 8000c9a:	4a47      	ldr	r2, [pc, #284]	; (8000db8 <Phore+0x2b8>)
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	ca06      	ldmia	r2, {r1, r2}
 8000ca0:	4853      	ldr	r0, [pc, #332]	; (8000df0 <Phore+0x2f0>)
 8000ca2:	f000 fb63 	bl	800136c <oled_WriteString>
		      oled_UpdateScreen();
 8000ca6:	f000 fa51 	bl	800114c <oled_UpdateScreen>
	    	  for(j = i - now_time_out; j > 0 ; j--){
 8000caa:	4b47      	ldr	r3, [pc, #284]	; (8000dc8 <Phore+0x2c8>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	697a      	ldr	r2, [r7, #20]
 8000cb0:	1ad3      	subs	r3, r2, r3
 8000cb2:	613b      	str	r3, [r7, #16]
 8000cb4:	e059      	b.n	8000d6a <Phore+0x26a>
	    		  if(j%100 == 0){
 8000cb6:	693a      	ldr	r2, [r7, #16]
 8000cb8:	4b4e      	ldr	r3, [pc, #312]	; (8000df4 <Phore+0x2f4>)
 8000cba:	fb83 1302 	smull	r1, r3, r3, r2
 8000cbe:	1159      	asrs	r1, r3, #5
 8000cc0:	17d3      	asrs	r3, r2, #31
 8000cc2:	1acb      	subs	r3, r1, r3
 8000cc4:	2164      	movs	r1, #100	; 0x64
 8000cc6:	fb01 f303 	mul.w	r3, r1, r3
 8000cca:	1ad3      	subs	r3, r2, r3
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d141      	bne.n	8000d54 <Phore+0x254>
	    		  part_j = j/100;
 8000cd0:	693b      	ldr	r3, [r7, #16]
 8000cd2:	4a48      	ldr	r2, [pc, #288]	; (8000df4 <Phore+0x2f4>)
 8000cd4:	fb82 1203 	smull	r1, r2, r2, r3
 8000cd8:	1152      	asrs	r2, r2, #5
 8000cda:	17db      	asrs	r3, r3, #31
 8000cdc:	1ad3      	subs	r3, r2, r3
 8000cde:	60fb      	str	r3, [r7, #12]
	    		  oled_SetCursor(35, 48);
 8000ce0:	2130      	movs	r1, #48	; 0x30
 8000ce2:	2023      	movs	r0, #35	; 0x23
 8000ce4:	f000 fb68 	bl	80013b8 <oled_SetCursor>
	    		  sprintf(char_j, "%d", part_j);
 8000ce8:	1d3b      	adds	r3, r7, #4
 8000cea:	68fa      	ldr	r2, [r7, #12]
 8000cec:	4942      	ldr	r1, [pc, #264]	; (8000df8 <Phore+0x2f8>)
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f003 fa3a 	bl	8004168 <siprintf>
			      oled_WriteString(char_j, Font_7x10, Black);
 8000cf4:	4a30      	ldr	r2, [pc, #192]	; (8000db8 <Phore+0x2b8>)
 8000cf6:	1d38      	adds	r0, r7, #4
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	ca06      	ldmia	r2, {r1, r2}
 8000cfc:	f000 fb36 	bl	800136c <oled_WriteString>
			      if(part_j < 1000){
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000d06:	da09      	bge.n	8000d1c <Phore+0x21c>
			    	  oled_SetCursor(35 + 21, 48);
 8000d08:	2130      	movs	r1, #48	; 0x30
 8000d0a:	2038      	movs	r0, #56	; 0x38
 8000d0c:	f000 fb54 	bl	80013b8 <oled_SetCursor>
			    	  oled_WriteString(" ", Font_7x10, Black);
 8000d10:	4a29      	ldr	r2, [pc, #164]	; (8000db8 <Phore+0x2b8>)
 8000d12:	2300      	movs	r3, #0
 8000d14:	ca06      	ldmia	r2, {r1, r2}
 8000d16:	4839      	ldr	r0, [pc, #228]	; (8000dfc <Phore+0x2fc>)
 8000d18:	f000 fb28 	bl	800136c <oled_WriteString>
			      }
			      if(part_j < 100){
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	2b63      	cmp	r3, #99	; 0x63
 8000d20:	dc09      	bgt.n	8000d36 <Phore+0x236>
			      	  oled_SetCursor(35 + 14, 48);
 8000d22:	2130      	movs	r1, #48	; 0x30
 8000d24:	2031      	movs	r0, #49	; 0x31
 8000d26:	f000 fb47 	bl	80013b8 <oled_SetCursor>
			      	  oled_WriteString(" ", Font_7x10, Black);
 8000d2a:	4a23      	ldr	r2, [pc, #140]	; (8000db8 <Phore+0x2b8>)
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	ca06      	ldmia	r2, {r1, r2}
 8000d30:	4832      	ldr	r0, [pc, #200]	; (8000dfc <Phore+0x2fc>)
 8000d32:	f000 fb1b 	bl	800136c <oled_WriteString>
			      }
			      if(part_j < 10){
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	2b09      	cmp	r3, #9
 8000d3a:	dc09      	bgt.n	8000d50 <Phore+0x250>
			          oled_SetCursor(35 + 7, 48);
 8000d3c:	2130      	movs	r1, #48	; 0x30
 8000d3e:	202a      	movs	r0, #42	; 0x2a
 8000d40:	f000 fb3a 	bl	80013b8 <oled_SetCursor>
			      	  oled_WriteString(" ", Font_7x10, Black);
 8000d44:	4a1c      	ldr	r2, [pc, #112]	; (8000db8 <Phore+0x2b8>)
 8000d46:	2300      	movs	r3, #0
 8000d48:	ca06      	ldmia	r2, {r1, r2}
 8000d4a:	482c      	ldr	r0, [pc, #176]	; (8000dfc <Phore+0x2fc>)
 8000d4c:	f000 fb0e 	bl	800136c <oled_WriteString>
			      }
			      oled_UpdateScreen();
 8000d50:	f000 f9fc 	bl	800114c <oled_UpdateScreen>
	    		  }
	    		  HAL_Delay(1);
 8000d54:	2001      	movs	r0, #1
 8000d56:	f000 fd09 	bl	800176c <HAL_Delay>
	    		  CheckRead("red\n\r", 5, i);
 8000d5a:	697a      	ldr	r2, [r7, #20]
 8000d5c:	2105      	movs	r1, #5
 8000d5e:	4821      	ldr	r0, [pc, #132]	; (8000de4 <Phore+0x2e4>)
 8000d60:	f7ff fe80 	bl	8000a64 <CheckRead>
	    	  for(j = i - now_time_out; j > 0 ; j--){
 8000d64:	693b      	ldr	r3, [r7, #16]
 8000d66:	3b01      	subs	r3, #1
 8000d68:	613b      	str	r3, [r7, #16]
 8000d6a:	693b      	ldr	r3, [r7, #16]
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	dca2      	bgt.n	8000cb6 <Phore+0x1b6>
	    	  }
	      }
	      HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 8000d70:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d74:	4812      	ldr	r0, [pc, #72]	; (8000dc0 <Phore+0x2c0>)
 8000d76:	f001 f81e 	bl	8001db6 <HAL_GPIO_TogglePin>
	    /*горит оранжевый*/

	      oled_SetCursor(0, 48);
 8000d7a:	2130      	movs	r1, #48	; 0x30
 8000d7c:	2000      	movs	r0, #0
 8000d7e:	f000 fb1b 	bl	80013b8 <oled_SetCursor>
	      oled_WriteString("           ", Font_7x10, Black);
 8000d82:	4a0d      	ldr	r2, [pc, #52]	; (8000db8 <Phore+0x2b8>)
 8000d84:	2300      	movs	r3, #0
 8000d86:	ca06      	ldmia	r2, {r1, r2}
 8000d88:	481d      	ldr	r0, [pc, #116]	; (8000e00 <Phore+0x300>)
 8000d8a:	f000 faef 	bl	800136c <oled_WriteString>

	      oled_SetCursor(0, 18);
 8000d8e:	2112      	movs	r1, #18
 8000d90:	2000      	movs	r0, #0
 8000d92:	f000 fb11 	bl	80013b8 <oled_SetCursor>
	      oled_WriteString("yellow  ", Font_7x10, Black);
 8000d96:	4a08      	ldr	r2, [pc, #32]	; (8000db8 <Phore+0x2b8>)
 8000d98:	2300      	movs	r3, #0
 8000d9a:	ca06      	ldmia	r2, {r1, r2}
 8000d9c:	480e      	ldr	r0, [pc, #56]	; (8000dd8 <Phore+0x2d8>)
 8000d9e:	f000 fae5 	bl	800136c <oled_WriteString>
	      oled_UpdateScreen();
 8000da2:	f000 f9d3 	bl	800114c <oled_UpdateScreen>

	      HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 8000da6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000daa:	4805      	ldr	r0, [pc, #20]	; (8000dc0 <Phore+0x2c0>)
 8000dac:	f001 f803 	bl	8001db6 <HAL_GPIO_TogglePin>
	      for(i = 0; i < now_time_out/5; i++){
 8000db0:	2300      	movs	r3, #0
 8000db2:	617b      	str	r3, [r7, #20]
 8000db4:	e031      	b.n	8000e1a <Phore+0x31a>
 8000db6:	bf00      	nop
 8000db8:	20000000 	.word	0x20000000
 8000dbc:	08004b6c 	.word	0x08004b6c
 8000dc0:	40020c00 	.word	0x40020c00
 8000dc4:	08004b78 	.word	0x08004b78
 8000dc8:	20000064 	.word	0x20000064
 8000dcc:	08004b80 	.word	0x08004b80
 8000dd0:	08004b8c 	.word	0x08004b8c
 8000dd4:	66666667 	.word	0x66666667
 8000dd8:	08004ba0 	.word	0x08004ba0
 8000ddc:	08004bac 	.word	0x08004bac
 8000de0:	08004bb8 	.word	0x08004bb8
 8000de4:	08004bc4 	.word	0x08004bc4
 8000de8:	20000068 	.word	0x20000068
 8000dec:	40020800 	.word	0x40020800
 8000df0:	08004bcc 	.word	0x08004bcc
 8000df4:	51eb851f 	.word	0x51eb851f
 8000df8:	08004b10 	.word	0x08004b10
 8000dfc:	08004b28 	.word	0x08004b28
 8000e00:	08004bd4 	.word	0x08004bd4
	    	  HAL_Delay(1);
 8000e04:	2001      	movs	r0, #1
 8000e06:	f000 fcb1 	bl	800176c <HAL_Delay>
	    	  CheckRead("yellow\n\r", 8, i);
 8000e0a:	697a      	ldr	r2, [r7, #20]
 8000e0c:	2108      	movs	r1, #8
 8000e0e:	480b      	ldr	r0, [pc, #44]	; (8000e3c <Phore+0x33c>)
 8000e10:	f7ff fe28 	bl	8000a64 <CheckRead>
	      for(i = 0; i < now_time_out/5; i++){
 8000e14:	697b      	ldr	r3, [r7, #20]
 8000e16:	3301      	adds	r3, #1
 8000e18:	617b      	str	r3, [r7, #20]
 8000e1a:	4b09      	ldr	r3, [pc, #36]	; (8000e40 <Phore+0x340>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	4a09      	ldr	r2, [pc, #36]	; (8000e44 <Phore+0x344>)
 8000e20:	fb82 1203 	smull	r1, r2, r2, r3
 8000e24:	1052      	asrs	r2, r2, #1
 8000e26:	17db      	asrs	r3, r3, #31
 8000e28:	1ad3      	subs	r3, r2, r3
 8000e2a:	697a      	ldr	r2, [r7, #20]
 8000e2c:	429a      	cmp	r2, r3
 8000e2e:	dbe9      	blt.n	8000e04 <Phore+0x304>
	      }
	      HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 8000e30:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e34:	4804      	ldr	r0, [pc, #16]	; (8000e48 <Phore+0x348>)
 8000e36:	f000 ffbe 	bl	8001db6 <HAL_GPIO_TogglePin>
	  {
 8000e3a:	e664      	b.n	8000b06 <Phore+0x6>
 8000e3c:	08004bac 	.word	0x08004bac
 8000e40:	20000064 	.word	0x20000064
 8000e44:	66666667 	.word	0x66666667
 8000e48:	40020c00 	.word	0x40020c00

08000e4c <main>:
	  }

}

int main(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b09a      	sub	sp, #104	; 0x68
 8000e50:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e52:	f000 fc19 	bl	8001688 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e56:	f000 f86b 	bl	8000f30 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e5a:	f7ff fb8b 	bl	8000574 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000e5e:	f7ff fbe9 	bl	8000634 <MX_I2C1_Init>
  MX_USART6_UART_Init();
 8000e62:	f000 fb6d 	bl	8001540 <MX_USART6_UART_Init>

  oled_Init();
 8000e66:	f000 f8e1 	bl	800102c <oled_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  oled_Fill(White);
 8000e6a:	2001      	movs	r0, #1
 8000e6c:	f000 f94a 	bl	8001104 <oled_Fill>
  oled_SetCursor(0,0);
 8000e70:	2100      	movs	r1, #0
 8000e72:	2000      	movs	r0, #0
 8000e74:	f000 faa0 	bl	80013b8 <oled_SetCursor>
  oled_WriteString("INFO", Font_11x18, Black);
 8000e78:	4a21      	ldr	r2, [pc, #132]	; (8000f00 <main+0xb4>)
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	ca06      	ldmia	r2, {r1, r2}
 8000e7e:	4821      	ldr	r0, [pc, #132]	; (8000f04 <main+0xb8>)
 8000e80:	f000 fa74 	bl	800136c <oled_WriteString>
  oled_SetCursor(0,18);
 8000e84:	2112      	movs	r1, #18
 8000e86:	2000      	movs	r0, #0
 8000e88:	f000 fa96 	bl	80013b8 <oled_SetCursor>
  oled_WriteString("green", Font_7x10, Black);
 8000e8c:	4a1e      	ldr	r2, [pc, #120]	; (8000f08 <main+0xbc>)
 8000e8e:	2300      	movs	r3, #0
 8000e90:	ca06      	ldmia	r2, {r1, r2}
 8000e92:	481e      	ldr	r0, [pc, #120]	; (8000f0c <main+0xc0>)
 8000e94:	f000 fa6a 	bl	800136c <oled_WriteString>
  oled_SetCursor(0,28);
 8000e98:	211c      	movs	r1, #28
 8000e9a:	2000      	movs	r0, #0
 8000e9c:	f000 fa8c 	bl	80013b8 <oled_SetCursor>
  oled_WriteString("with stops", Font_7x10, Black);
 8000ea0:	4a19      	ldr	r2, [pc, #100]	; (8000f08 <main+0xbc>)
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	ca06      	ldmia	r2, {r1, r2}
 8000ea6:	481a      	ldr	r0, [pc, #104]	; (8000f10 <main+0xc4>)
 8000ea8:	f000 fa60 	bl	800136c <oled_WriteString>
  oled_SetCursor(0,38);
 8000eac:	2126      	movs	r1, #38	; 0x26
 8000eae:	2000      	movs	r0, #0
 8000eb0:	f000 fa82 	bl	80013b8 <oled_SetCursor>
  oled_WriteString("timeout:", Font_7x10, Black);
 8000eb4:	4a14      	ldr	r2, [pc, #80]	; (8000f08 <main+0xbc>)
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	ca06      	ldmia	r2, {r1, r2}
 8000eba:	4816      	ldr	r0, [pc, #88]	; (8000f14 <main+0xc8>)
 8000ebc:	f000 fa56 	bl	800136c <oled_WriteString>
  oled_SetCursor(56,38);
 8000ec0:	2126      	movs	r1, #38	; 0x26
 8000ec2:	2038      	movs	r0, #56	; 0x38
 8000ec4:	f000 fa78 	bl	80013b8 <oled_SetCursor>
  oled_WriteString("1500", Font_7x10, Black);
 8000ec8:	4a0f      	ldr	r2, [pc, #60]	; (8000f08 <main+0xbc>)
 8000eca:	2300      	movs	r3, #0
 8000ecc:	ca06      	ldmia	r2, {r1, r2}
 8000ece:	4812      	ldr	r0, [pc, #72]	; (8000f18 <main+0xcc>)
 8000ed0:	f000 fa4c 	bl	800136c <oled_WriteString>
  oled_UpdateScreen();
 8000ed4:	f000 f93a 	bl	800114c <oled_UpdateScreen>

  /* USER CODE BEGIN WHILE */
  sprintf(num_char, "%d", now_time_out);
 8000ed8:	4b10      	ldr	r3, [pc, #64]	; (8000f1c <main+0xd0>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	461a      	mov	r2, r3
 8000ede:	4910      	ldr	r1, [pc, #64]	; (8000f20 <main+0xd4>)
 8000ee0:	4810      	ldr	r0, [pc, #64]	; (8000f24 <main+0xd8>)
 8000ee2:	f003 f941 	bl	8004168 <siprintf>
  HAL_UART_Transmit(&huart6, (uint8_t*)ask, 42, 25);
 8000ee6:	2319      	movs	r3, #25
 8000ee8:	222a      	movs	r2, #42	; 0x2a
 8000eea:	490f      	ldr	r1, [pc, #60]	; (8000f28 <main+0xdc>)
 8000eec:	480f      	ldr	r0, [pc, #60]	; (8000f2c <main+0xe0>)
 8000eee:	f002 f872 	bl	8002fd6 <HAL_UART_Transmit>
  Phore();
 8000ef2:	f7ff fe05 	bl	8000b00 <Phore>
 8000ef6:	2300      	movs	r3, #0

  uint8_t str[100];

}
 8000ef8:	4618      	mov	r0, r3
 8000efa:	3768      	adds	r7, #104	; 0x68
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	20000008 	.word	0x20000008
 8000f04:	08004be0 	.word	0x08004be0
 8000f08:	20000000 	.word	0x20000000
 8000f0c:	08004be8 	.word	0x08004be8
 8000f10:	08004bf0 	.word	0x08004bf0
 8000f14:	08004bfc 	.word	0x08004bfc
 8000f18:	08004c08 	.word	0x08004c08
 8000f1c:	20000064 	.word	0x20000064
 8000f20:	08004b10 	.word	0x08004b10
 8000f24:	2000018c 	.word	0x2000018c
 8000f28:	20000038 	.word	0x20000038
 8000f2c:	200005a4 	.word	0x200005a4

08000f30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b094      	sub	sp, #80	; 0x50
 8000f34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f36:	f107 0320 	add.w	r3, r7, #32
 8000f3a:	2230      	movs	r2, #48	; 0x30
 8000f3c:	2100      	movs	r1, #0
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f003 f90a 	bl	8004158 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f44:	f107 030c 	add.w	r3, r7, #12
 8000f48:	2200      	movs	r2, #0
 8000f4a:	601a      	str	r2, [r3, #0]
 8000f4c:	605a      	str	r2, [r3, #4]
 8000f4e:	609a      	str	r2, [r3, #8]
 8000f50:	60da      	str	r2, [r3, #12]
 8000f52:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f54:	2300      	movs	r3, #0
 8000f56:	60bb      	str	r3, [r7, #8]
 8000f58:	4b22      	ldr	r3, [pc, #136]	; (8000fe4 <SystemClock_Config+0xb4>)
 8000f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f5c:	4a21      	ldr	r2, [pc, #132]	; (8000fe4 <SystemClock_Config+0xb4>)
 8000f5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f62:	6413      	str	r3, [r2, #64]	; 0x40
 8000f64:	4b1f      	ldr	r3, [pc, #124]	; (8000fe4 <SystemClock_Config+0xb4>)
 8000f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f6c:	60bb      	str	r3, [r7, #8]
 8000f6e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f70:	2300      	movs	r3, #0
 8000f72:	607b      	str	r3, [r7, #4]
 8000f74:	4b1c      	ldr	r3, [pc, #112]	; (8000fe8 <SystemClock_Config+0xb8>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	4a1b      	ldr	r2, [pc, #108]	; (8000fe8 <SystemClock_Config+0xb8>)
 8000f7a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f7e:	6013      	str	r3, [r2, #0]
 8000f80:	4b19      	ldr	r3, [pc, #100]	; (8000fe8 <SystemClock_Config+0xb8>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f88:	607b      	str	r3, [r7, #4]
 8000f8a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f8c:	2302      	movs	r3, #2
 8000f8e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f90:	2301      	movs	r3, #1
 8000f92:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f94:	2310      	movs	r3, #16
 8000f96:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f9c:	f107 0320 	add.w	r3, r7, #32
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f001 fb7d 	bl	80026a0 <HAL_RCC_OscConfig>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d001      	beq.n	8000fb0 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000fac:	f000 f81e 	bl	8000fec <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fb0:	230f      	movs	r3, #15
 8000fb2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000fc4:	f107 030c 	add.w	r3, r7, #12
 8000fc8:	2100      	movs	r1, #0
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f001 fdd6 	bl	8002b7c <HAL_RCC_ClockConfig>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000fd6:	f000 f809 	bl	8000fec <Error_Handler>
  }
}
 8000fda:	bf00      	nop
 8000fdc:	3750      	adds	r7, #80	; 0x50
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	40023800 	.word	0x40023800
 8000fe8:	40007000 	.word	0x40007000

08000fec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000ff0:	bf00      	nop
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr
	...

08000ffc <oled_WriteCommand>:
static uint8_t OLED_Buffer[1024];

static OLED_t OLED;


static void oled_WriteCommand(uint8_t command) {
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b086      	sub	sp, #24
 8001000:	af04      	add	r7, sp, #16
 8001002:	4603      	mov	r3, r0
 8001004:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1,OLED_I2C_ADDR,0x00,1,&command,1,10);
 8001006:	230a      	movs	r3, #10
 8001008:	9302      	str	r3, [sp, #8]
 800100a:	2301      	movs	r3, #1
 800100c:	9301      	str	r3, [sp, #4]
 800100e:	1dfb      	adds	r3, r7, #7
 8001010:	9300      	str	r3, [sp, #0]
 8001012:	2301      	movs	r3, #1
 8001014:	2200      	movs	r2, #0
 8001016:	2178      	movs	r1, #120	; 0x78
 8001018:	4803      	ldr	r0, [pc, #12]	; (8001028 <oled_WriteCommand+0x2c>)
 800101a:	f001 f82b 	bl	8002074 <HAL_I2C_Mem_Write>
}
 800101e:	bf00      	nop
 8001020:	3708      	adds	r7, #8
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	200000fc 	.word	0x200000fc

0800102c <oled_Init>:


uint8_t oled_Init(void) {
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
	HAL_Delay(100);
 8001030:	2064      	movs	r0, #100	; 0x64
 8001032:	f000 fb9b 	bl	800176c <HAL_Delay>

	oled_WriteCommand(0xAE);
 8001036:	20ae      	movs	r0, #174	; 0xae
 8001038:	f7ff ffe0 	bl	8000ffc <oled_WriteCommand>
	oled_WriteCommand(0x20);
 800103c:	2020      	movs	r0, #32
 800103e:	f7ff ffdd 	bl	8000ffc <oled_WriteCommand>
	oled_WriteCommand(0x10);
 8001042:	2010      	movs	r0, #16
 8001044:	f7ff ffda 	bl	8000ffc <oled_WriteCommand>
	oled_WriteCommand(0xB0);
 8001048:	20b0      	movs	r0, #176	; 0xb0
 800104a:	f7ff ffd7 	bl	8000ffc <oled_WriteCommand>
	oled_WriteCommand(0xC8);
 800104e:	20c8      	movs	r0, #200	; 0xc8
 8001050:	f7ff ffd4 	bl	8000ffc <oled_WriteCommand>
	oled_WriteCommand(0x00);
 8001054:	2000      	movs	r0, #0
 8001056:	f7ff ffd1 	bl	8000ffc <oled_WriteCommand>
	oled_WriteCommand(0x10);
 800105a:	2010      	movs	r0, #16
 800105c:	f7ff ffce 	bl	8000ffc <oled_WriteCommand>
	oled_WriteCommand(0x40);
 8001060:	2040      	movs	r0, #64	; 0x40
 8001062:	f7ff ffcb 	bl	8000ffc <oled_WriteCommand>
	oled_WriteCommand(0x81);
 8001066:	2081      	movs	r0, #129	; 0x81
 8001068:	f7ff ffc8 	bl	8000ffc <oled_WriteCommand>
	oled_WriteCommand(0xFF);
 800106c:	20ff      	movs	r0, #255	; 0xff
 800106e:	f7ff ffc5 	bl	8000ffc <oled_WriteCommand>
	oled_WriteCommand(0xA1);
 8001072:	20a1      	movs	r0, #161	; 0xa1
 8001074:	f7ff ffc2 	bl	8000ffc <oled_WriteCommand>
	oled_WriteCommand(0xA6);
 8001078:	20a6      	movs	r0, #166	; 0xa6
 800107a:	f7ff ffbf 	bl	8000ffc <oled_WriteCommand>
	oled_WriteCommand(0xA8);
 800107e:	20a8      	movs	r0, #168	; 0xa8
 8001080:	f7ff ffbc 	bl	8000ffc <oled_WriteCommand>
	oled_WriteCommand(0x3F);
 8001084:	203f      	movs	r0, #63	; 0x3f
 8001086:	f7ff ffb9 	bl	8000ffc <oled_WriteCommand>
	oled_WriteCommand(0xA4);
 800108a:	20a4      	movs	r0, #164	; 0xa4
 800108c:	f7ff ffb6 	bl	8000ffc <oled_WriteCommand>
	oled_WriteCommand(0xD3);
 8001090:	20d3      	movs	r0, #211	; 0xd3
 8001092:	f7ff ffb3 	bl	8000ffc <oled_WriteCommand>
	oled_WriteCommand(0x00);
 8001096:	2000      	movs	r0, #0
 8001098:	f7ff ffb0 	bl	8000ffc <oled_WriteCommand>
	oled_WriteCommand(0xD5);
 800109c:	20d5      	movs	r0, #213	; 0xd5
 800109e:	f7ff ffad 	bl	8000ffc <oled_WriteCommand>
	oled_WriteCommand(0xF0);
 80010a2:	20f0      	movs	r0, #240	; 0xf0
 80010a4:	f7ff ffaa 	bl	8000ffc <oled_WriteCommand>
	oled_WriteCommand(0xD9);
 80010a8:	20d9      	movs	r0, #217	; 0xd9
 80010aa:	f7ff ffa7 	bl	8000ffc <oled_WriteCommand>
	oled_WriteCommand(0x22);
 80010ae:	2022      	movs	r0, #34	; 0x22
 80010b0:	f7ff ffa4 	bl	8000ffc <oled_WriteCommand>
	oled_WriteCommand(0xDA);
 80010b4:	20da      	movs	r0, #218	; 0xda
 80010b6:	f7ff ffa1 	bl	8000ffc <oled_WriteCommand>
	oled_WriteCommand(0x12);
 80010ba:	2012      	movs	r0, #18
 80010bc:	f7ff ff9e 	bl	8000ffc <oled_WriteCommand>
	oled_WriteCommand(0xDB);
 80010c0:	20db      	movs	r0, #219	; 0xdb
 80010c2:	f7ff ff9b 	bl	8000ffc <oled_WriteCommand>
	oled_WriteCommand(0x20);
 80010c6:	2020      	movs	r0, #32
 80010c8:	f7ff ff98 	bl	8000ffc <oled_WriteCommand>
	oled_WriteCommand(0x8D);
 80010cc:	208d      	movs	r0, #141	; 0x8d
 80010ce:	f7ff ff95 	bl	8000ffc <oled_WriteCommand>
	oled_WriteCommand(0x14);
 80010d2:	2014      	movs	r0, #20
 80010d4:	f7ff ff92 	bl	8000ffc <oled_WriteCommand>
	oled_WriteCommand(0xAF);
 80010d8:	20af      	movs	r0, #175	; 0xaf
 80010da:	f7ff ff8f 	bl	8000ffc <oled_WriteCommand>

	oled_Fill(Black);
 80010de:	2000      	movs	r0, #0
 80010e0:	f000 f810 	bl	8001104 <oled_Fill>

	oled_UpdateScreen();
 80010e4:	f000 f832 	bl	800114c <oled_UpdateScreen>

	OLED.CurrentX = 0;
 80010e8:	4b05      	ldr	r3, [pc, #20]	; (8001100 <oled_Init+0xd4>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	801a      	strh	r2, [r3, #0]
	OLED.CurrentY = 0;
 80010ee:	4b04      	ldr	r3, [pc, #16]	; (8001100 <oled_Init+0xd4>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	805a      	strh	r2, [r3, #2]

	OLED.Initialized = 1;
 80010f4:	4b02      	ldr	r3, [pc, #8]	; (8001100 <oled_Init+0xd4>)
 80010f6:	2201      	movs	r2, #1
 80010f8:	715a      	strb	r2, [r3, #5]

	return 1;
 80010fa:	2301      	movs	r3, #1
}
 80010fc:	4618      	mov	r0, r3
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	20000598 	.word	0x20000598

08001104 <oled_Fill>:

void oled_Fill(OLED_COLOR color) {
 8001104:	b480      	push	{r7}
 8001106:	b085      	sub	sp, #20
 8001108:	af00      	add	r7, sp, #0
 800110a:	4603      	mov	r3, r0
 800110c:	71fb      	strb	r3, [r7, #7]
	uint32_t i;

	for(i = 0; i < sizeof(OLED_Buffer); i++) {
 800110e:	2300      	movs	r3, #0
 8001110:	60fb      	str	r3, [r7, #12]
 8001112:	e00d      	b.n	8001130 <oled_Fill+0x2c>
		OLED_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8001114:	79fb      	ldrb	r3, [r7, #7]
 8001116:	2b00      	cmp	r3, #0
 8001118:	d101      	bne.n	800111e <oled_Fill+0x1a>
 800111a:	2100      	movs	r1, #0
 800111c:	e000      	b.n	8001120 <oled_Fill+0x1c>
 800111e:	21ff      	movs	r1, #255	; 0xff
 8001120:	4a09      	ldr	r2, [pc, #36]	; (8001148 <oled_Fill+0x44>)
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	4413      	add	r3, r2
 8001126:	460a      	mov	r2, r1
 8001128:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < sizeof(OLED_Buffer); i++) {
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	3301      	adds	r3, #1
 800112e:	60fb      	str	r3, [r7, #12]
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001136:	d3ed      	bcc.n	8001114 <oled_Fill+0x10>
	}
}
 8001138:	bf00      	nop
 800113a:	bf00      	nop
 800113c:	3714      	adds	r7, #20
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr
 8001146:	bf00      	nop
 8001148:	20000198 	.word	0x20000198

0800114c <oled_UpdateScreen>:


void oled_UpdateScreen(void) {
 800114c:	b580      	push	{r7, lr}
 800114e:	b086      	sub	sp, #24
 8001150:	af04      	add	r7, sp, #16
	uint8_t i;

	for (i = 0; i < 8; i++) {
 8001152:	2300      	movs	r3, #0
 8001154:	71fb      	strb	r3, [r7, #7]
 8001156:	e01d      	b.n	8001194 <oled_UpdateScreen+0x48>
		oled_WriteCommand(0xB0 + i);
 8001158:	79fb      	ldrb	r3, [r7, #7]
 800115a:	3b50      	subs	r3, #80	; 0x50
 800115c:	b2db      	uxtb	r3, r3
 800115e:	4618      	mov	r0, r3
 8001160:	f7ff ff4c 	bl	8000ffc <oled_WriteCommand>
		oled_WriteCommand(0x00);
 8001164:	2000      	movs	r0, #0
 8001166:	f7ff ff49 	bl	8000ffc <oled_WriteCommand>
		oled_WriteCommand(0x10);
 800116a:	2010      	movs	r0, #16
 800116c:	f7ff ff46 	bl	8000ffc <oled_WriteCommand>

		HAL_I2C_Mem_Write(&hi2c1,OLED_I2C_ADDR,0x40,1,&OLED_Buffer[OLED_WIDTH * i],OLED_WIDTH,100);
 8001170:	79fb      	ldrb	r3, [r7, #7]
 8001172:	01db      	lsls	r3, r3, #7
 8001174:	4a0b      	ldr	r2, [pc, #44]	; (80011a4 <oled_UpdateScreen+0x58>)
 8001176:	4413      	add	r3, r2
 8001178:	2264      	movs	r2, #100	; 0x64
 800117a:	9202      	str	r2, [sp, #8]
 800117c:	2280      	movs	r2, #128	; 0x80
 800117e:	9201      	str	r2, [sp, #4]
 8001180:	9300      	str	r3, [sp, #0]
 8001182:	2301      	movs	r3, #1
 8001184:	2240      	movs	r2, #64	; 0x40
 8001186:	2178      	movs	r1, #120	; 0x78
 8001188:	4807      	ldr	r0, [pc, #28]	; (80011a8 <oled_UpdateScreen+0x5c>)
 800118a:	f000 ff73 	bl	8002074 <HAL_I2C_Mem_Write>
	for (i = 0; i < 8; i++) {
 800118e:	79fb      	ldrb	r3, [r7, #7]
 8001190:	3301      	adds	r3, #1
 8001192:	71fb      	strb	r3, [r7, #7]
 8001194:	79fb      	ldrb	r3, [r7, #7]
 8001196:	2b07      	cmp	r3, #7
 8001198:	d9de      	bls.n	8001158 <oled_UpdateScreen+0xc>
	}
}
 800119a:	bf00      	nop
 800119c:	bf00      	nop
 800119e:	3708      	adds	r7, #8
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	20000198 	.word	0x20000198
 80011a8:	200000fc 	.word	0x200000fc

080011ac <oled_DrawPixel>:

void oled_DrawPixel(uint8_t x, uint8_t y, OLED_COLOR color) {
 80011ac:	b480      	push	{r7}
 80011ae:	b083      	sub	sp, #12
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	4603      	mov	r3, r0
 80011b4:	71fb      	strb	r3, [r7, #7]
 80011b6:	460b      	mov	r3, r1
 80011b8:	71bb      	strb	r3, [r7, #6]
 80011ba:	4613      	mov	r3, r2
 80011bc:	717b      	strb	r3, [r7, #5]
	if (x >= OLED_WIDTH || y >= OLED_HEIGHT) {
 80011be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	db48      	blt.n	8001258 <oled_DrawPixel+0xac>
 80011c6:	79bb      	ldrb	r3, [r7, #6]
 80011c8:	2b3f      	cmp	r3, #63	; 0x3f
 80011ca:	d845      	bhi.n	8001258 <oled_DrawPixel+0xac>
		return;
	}

	if (OLED.Inverted) {
 80011cc:	4b25      	ldr	r3, [pc, #148]	; (8001264 <oled_DrawPixel+0xb8>)
 80011ce:	791b      	ldrb	r3, [r3, #4]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d006      	beq.n	80011e2 <oled_DrawPixel+0x36>
		color = (OLED_COLOR)!color;
 80011d4:	797b      	ldrb	r3, [r7, #5]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	bf0c      	ite	eq
 80011da:	2301      	moveq	r3, #1
 80011dc:	2300      	movne	r3, #0
 80011de:	b2db      	uxtb	r3, r3
 80011e0:	717b      	strb	r3, [r7, #5]
	}

	if (color == White) {
 80011e2:	797b      	ldrb	r3, [r7, #5]
 80011e4:	2b01      	cmp	r3, #1
 80011e6:	d11a      	bne.n	800121e <oled_DrawPixel+0x72>
		OLED_Buffer[x + (y / 8) * OLED_WIDTH] |= 1 << (y % 8);
 80011e8:	79fa      	ldrb	r2, [r7, #7]
 80011ea:	79bb      	ldrb	r3, [r7, #6]
 80011ec:	08db      	lsrs	r3, r3, #3
 80011ee:	b2d8      	uxtb	r0, r3
 80011f0:	4603      	mov	r3, r0
 80011f2:	01db      	lsls	r3, r3, #7
 80011f4:	4413      	add	r3, r2
 80011f6:	4a1c      	ldr	r2, [pc, #112]	; (8001268 <oled_DrawPixel+0xbc>)
 80011f8:	5cd3      	ldrb	r3, [r2, r3]
 80011fa:	b25a      	sxtb	r2, r3
 80011fc:	79bb      	ldrb	r3, [r7, #6]
 80011fe:	f003 0307 	and.w	r3, r3, #7
 8001202:	2101      	movs	r1, #1
 8001204:	fa01 f303 	lsl.w	r3, r1, r3
 8001208:	b25b      	sxtb	r3, r3
 800120a:	4313      	orrs	r3, r2
 800120c:	b259      	sxtb	r1, r3
 800120e:	79fa      	ldrb	r2, [r7, #7]
 8001210:	4603      	mov	r3, r0
 8001212:	01db      	lsls	r3, r3, #7
 8001214:	4413      	add	r3, r2
 8001216:	b2c9      	uxtb	r1, r1
 8001218:	4a13      	ldr	r2, [pc, #76]	; (8001268 <oled_DrawPixel+0xbc>)
 800121a:	54d1      	strb	r1, [r2, r3]
 800121c:	e01d      	b.n	800125a <oled_DrawPixel+0xae>
	} else {
		OLED_Buffer[x + (y / 8) * OLED_WIDTH] &= ~(1 << (y % 8));
 800121e:	79fa      	ldrb	r2, [r7, #7]
 8001220:	79bb      	ldrb	r3, [r7, #6]
 8001222:	08db      	lsrs	r3, r3, #3
 8001224:	b2d8      	uxtb	r0, r3
 8001226:	4603      	mov	r3, r0
 8001228:	01db      	lsls	r3, r3, #7
 800122a:	4413      	add	r3, r2
 800122c:	4a0e      	ldr	r2, [pc, #56]	; (8001268 <oled_DrawPixel+0xbc>)
 800122e:	5cd3      	ldrb	r3, [r2, r3]
 8001230:	b25a      	sxtb	r2, r3
 8001232:	79bb      	ldrb	r3, [r7, #6]
 8001234:	f003 0307 	and.w	r3, r3, #7
 8001238:	2101      	movs	r1, #1
 800123a:	fa01 f303 	lsl.w	r3, r1, r3
 800123e:	b25b      	sxtb	r3, r3
 8001240:	43db      	mvns	r3, r3
 8001242:	b25b      	sxtb	r3, r3
 8001244:	4013      	ands	r3, r2
 8001246:	b259      	sxtb	r1, r3
 8001248:	79fa      	ldrb	r2, [r7, #7]
 800124a:	4603      	mov	r3, r0
 800124c:	01db      	lsls	r3, r3, #7
 800124e:	4413      	add	r3, r2
 8001250:	b2c9      	uxtb	r1, r1
 8001252:	4a05      	ldr	r2, [pc, #20]	; (8001268 <oled_DrawPixel+0xbc>)
 8001254:	54d1      	strb	r1, [r2, r3]
 8001256:	e000      	b.n	800125a <oled_DrawPixel+0xae>
		return;
 8001258:	bf00      	nop
	}
}
 800125a:	370c      	adds	r7, #12
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr
 8001264:	20000598 	.word	0x20000598
 8001268:	20000198 	.word	0x20000198

0800126c <oled_WriteChar>:
	oled_DrawHLine(x1, x2, y1, color);
	oled_DrawHLine(x1, x2, y2, color);
	oled_DrawVLine(y1, y2, x1, color);
	oled_DrawVLine(y1, y2, x2, color);
}
char oled_WriteChar(char ch, FontDef Font, OLED_COLOR color) {
 800126c:	b590      	push	{r4, r7, lr}
 800126e:	b089      	sub	sp, #36	; 0x24
 8001270:	af00      	add	r7, sp, #0
 8001272:	4604      	mov	r4, r0
 8001274:	1d38      	adds	r0, r7, #4
 8001276:	e880 0006 	stmia.w	r0, {r1, r2}
 800127a:	461a      	mov	r2, r3
 800127c:	4623      	mov	r3, r4
 800127e:	73fb      	strb	r3, [r7, #15]
 8001280:	4613      	mov	r3, r2
 8001282:	73bb      	strb	r3, [r7, #14]
	uint32_t i, b, j;

	if (OLED_WIDTH <= (OLED.CurrentX + Font.FontWidth) ||
 8001284:	4b38      	ldr	r3, [pc, #224]	; (8001368 <oled_WriteChar+0xfc>)
 8001286:	881b      	ldrh	r3, [r3, #0]
 8001288:	461a      	mov	r2, r3
 800128a:	793b      	ldrb	r3, [r7, #4]
 800128c:	4413      	add	r3, r2
 800128e:	2b7f      	cmp	r3, #127	; 0x7f
 8001290:	dc06      	bgt.n	80012a0 <oled_WriteChar+0x34>
			OLED_HEIGHT <= (OLED.CurrentY + Font.FontHeight)) {
 8001292:	4b35      	ldr	r3, [pc, #212]	; (8001368 <oled_WriteChar+0xfc>)
 8001294:	885b      	ldrh	r3, [r3, #2]
 8001296:	461a      	mov	r2, r3
 8001298:	797b      	ldrb	r3, [r7, #5]
 800129a:	4413      	add	r3, r2
	if (OLED_WIDTH <= (OLED.CurrentX + Font.FontWidth) ||
 800129c:	2b3f      	cmp	r3, #63	; 0x3f
 800129e:	dd01      	ble.n	80012a4 <oled_WriteChar+0x38>
		return 0;
 80012a0:	2300      	movs	r3, #0
 80012a2:	e05d      	b.n	8001360 <oled_WriteChar+0xf4>
	}

	for (i = 0; i < Font.FontHeight; i++) {
 80012a4:	2300      	movs	r3, #0
 80012a6:	61fb      	str	r3, [r7, #28]
 80012a8:	e04c      	b.n	8001344 <oled_WriteChar+0xd8>
		b = Font.data[(ch - 32) * Font.FontHeight + i];
 80012aa:	68ba      	ldr	r2, [r7, #8]
 80012ac:	7bfb      	ldrb	r3, [r7, #15]
 80012ae:	3b20      	subs	r3, #32
 80012b0:	7979      	ldrb	r1, [r7, #5]
 80012b2:	fb01 f303 	mul.w	r3, r1, r3
 80012b6:	4619      	mov	r1, r3
 80012b8:	69fb      	ldr	r3, [r7, #28]
 80012ba:	440b      	add	r3, r1
 80012bc:	005b      	lsls	r3, r3, #1
 80012be:	4413      	add	r3, r2
 80012c0:	881b      	ldrh	r3, [r3, #0]
 80012c2:	617b      	str	r3, [r7, #20]
		for (j = 0; j < Font.FontWidth; j++) {
 80012c4:	2300      	movs	r3, #0
 80012c6:	61bb      	str	r3, [r7, #24]
 80012c8:	e034      	b.n	8001334 <oled_WriteChar+0xc8>
			if ((b << j) & 0x8000) {
 80012ca:	697a      	ldr	r2, [r7, #20]
 80012cc:	69bb      	ldr	r3, [r7, #24]
 80012ce:	fa02 f303 	lsl.w	r3, r2, r3
 80012d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d012      	beq.n	8001300 <oled_WriteChar+0x94>
				oled_DrawPixel(OLED.CurrentX + j, (OLED.CurrentY + i), (OLED_COLOR) color);
 80012da:	4b23      	ldr	r3, [pc, #140]	; (8001368 <oled_WriteChar+0xfc>)
 80012dc:	881b      	ldrh	r3, [r3, #0]
 80012de:	b2da      	uxtb	r2, r3
 80012e0:	69bb      	ldr	r3, [r7, #24]
 80012e2:	b2db      	uxtb	r3, r3
 80012e4:	4413      	add	r3, r2
 80012e6:	b2d8      	uxtb	r0, r3
 80012e8:	4b1f      	ldr	r3, [pc, #124]	; (8001368 <oled_WriteChar+0xfc>)
 80012ea:	885b      	ldrh	r3, [r3, #2]
 80012ec:	b2da      	uxtb	r2, r3
 80012ee:	69fb      	ldr	r3, [r7, #28]
 80012f0:	b2db      	uxtb	r3, r3
 80012f2:	4413      	add	r3, r2
 80012f4:	b2db      	uxtb	r3, r3
 80012f6:	7bba      	ldrb	r2, [r7, #14]
 80012f8:	4619      	mov	r1, r3
 80012fa:	f7ff ff57 	bl	80011ac <oled_DrawPixel>
 80012fe:	e016      	b.n	800132e <oled_WriteChar+0xc2>
			} else {
				oled_DrawPixel(OLED.CurrentX + j, (OLED.CurrentY + i), (OLED_COLOR)!color);
 8001300:	4b19      	ldr	r3, [pc, #100]	; (8001368 <oled_WriteChar+0xfc>)
 8001302:	881b      	ldrh	r3, [r3, #0]
 8001304:	b2da      	uxtb	r2, r3
 8001306:	69bb      	ldr	r3, [r7, #24]
 8001308:	b2db      	uxtb	r3, r3
 800130a:	4413      	add	r3, r2
 800130c:	b2d8      	uxtb	r0, r3
 800130e:	4b16      	ldr	r3, [pc, #88]	; (8001368 <oled_WriteChar+0xfc>)
 8001310:	885b      	ldrh	r3, [r3, #2]
 8001312:	b2da      	uxtb	r2, r3
 8001314:	69fb      	ldr	r3, [r7, #28]
 8001316:	b2db      	uxtb	r3, r3
 8001318:	4413      	add	r3, r2
 800131a:	b2d9      	uxtb	r1, r3
 800131c:	7bbb      	ldrb	r3, [r7, #14]
 800131e:	2b00      	cmp	r3, #0
 8001320:	bf0c      	ite	eq
 8001322:	2301      	moveq	r3, #1
 8001324:	2300      	movne	r3, #0
 8001326:	b2db      	uxtb	r3, r3
 8001328:	461a      	mov	r2, r3
 800132a:	f7ff ff3f 	bl	80011ac <oled_DrawPixel>
		for (j = 0; j < Font.FontWidth; j++) {
 800132e:	69bb      	ldr	r3, [r7, #24]
 8001330:	3301      	adds	r3, #1
 8001332:	61bb      	str	r3, [r7, #24]
 8001334:	793b      	ldrb	r3, [r7, #4]
 8001336:	461a      	mov	r2, r3
 8001338:	69bb      	ldr	r3, [r7, #24]
 800133a:	4293      	cmp	r3, r2
 800133c:	d3c5      	bcc.n	80012ca <oled_WriteChar+0x5e>
	for (i = 0; i < Font.FontHeight; i++) {
 800133e:	69fb      	ldr	r3, [r7, #28]
 8001340:	3301      	adds	r3, #1
 8001342:	61fb      	str	r3, [r7, #28]
 8001344:	797b      	ldrb	r3, [r7, #5]
 8001346:	461a      	mov	r2, r3
 8001348:	69fb      	ldr	r3, [r7, #28]
 800134a:	4293      	cmp	r3, r2
 800134c:	d3ad      	bcc.n	80012aa <oled_WriteChar+0x3e>
			}
		}
	}

	OLED.CurrentX += Font.FontWidth;
 800134e:	4b06      	ldr	r3, [pc, #24]	; (8001368 <oled_WriteChar+0xfc>)
 8001350:	881a      	ldrh	r2, [r3, #0]
 8001352:	793b      	ldrb	r3, [r7, #4]
 8001354:	b29b      	uxth	r3, r3
 8001356:	4413      	add	r3, r2
 8001358:	b29a      	uxth	r2, r3
 800135a:	4b03      	ldr	r3, [pc, #12]	; (8001368 <oled_WriteChar+0xfc>)
 800135c:	801a      	strh	r2, [r3, #0]

	return ch;
 800135e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001360:	4618      	mov	r0, r3
 8001362:	3724      	adds	r7, #36	; 0x24
 8001364:	46bd      	mov	sp, r7
 8001366:	bd90      	pop	{r4, r7, pc}
 8001368:	20000598 	.word	0x20000598

0800136c <oled_WriteString>:


char oled_WriteString(char* str, FontDef Font, OLED_COLOR color) {
 800136c:	b580      	push	{r7, lr}
 800136e:	b084      	sub	sp, #16
 8001370:	af00      	add	r7, sp, #0
 8001372:	60f8      	str	r0, [r7, #12]
 8001374:	1d38      	adds	r0, r7, #4
 8001376:	e880 0006 	stmia.w	r0, {r1, r2}
 800137a:	70fb      	strb	r3, [r7, #3]
	while (*str) {
 800137c:	e012      	b.n	80013a4 <oled_WriteString+0x38>
		if (oled_WriteChar(*str, Font, color) != *str) {
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	7818      	ldrb	r0, [r3, #0]
 8001382:	78fb      	ldrb	r3, [r7, #3]
 8001384:	1d3a      	adds	r2, r7, #4
 8001386:	ca06      	ldmia	r2, {r1, r2}
 8001388:	f7ff ff70 	bl	800126c <oled_WriteChar>
 800138c:	4603      	mov	r3, r0
 800138e:	461a      	mov	r2, r3
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	429a      	cmp	r2, r3
 8001396:	d002      	beq.n	800139e <oled_WriteString+0x32>
			return *str;
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	e008      	b.n	80013b0 <oled_WriteString+0x44>
		}
		str++;
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	3301      	adds	r3, #1
 80013a2:	60fb      	str	r3, [r7, #12]
	while (*str) {
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d1e8      	bne.n	800137e <oled_WriteString+0x12>
	}
	return *str;
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	781b      	ldrb	r3, [r3, #0]
}
 80013b0:	4618      	mov	r0, r3
 80013b2:	3710      	adds	r7, #16
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}

080013b8 <oled_SetCursor>:

void oled_SetCursor(uint8_t x, uint8_t y) {
 80013b8:	b480      	push	{r7}
 80013ba:	b083      	sub	sp, #12
 80013bc:	af00      	add	r7, sp, #0
 80013be:	4603      	mov	r3, r0
 80013c0:	460a      	mov	r2, r1
 80013c2:	71fb      	strb	r3, [r7, #7]
 80013c4:	4613      	mov	r3, r2
 80013c6:	71bb      	strb	r3, [r7, #6]
	OLED.CurrentX = x;
 80013c8:	79fb      	ldrb	r3, [r7, #7]
 80013ca:	b29a      	uxth	r2, r3
 80013cc:	4b05      	ldr	r3, [pc, #20]	; (80013e4 <oled_SetCursor+0x2c>)
 80013ce:	801a      	strh	r2, [r3, #0]
	OLED.CurrentY = y;
 80013d0:	79bb      	ldrb	r3, [r7, #6]
 80013d2:	b29a      	uxth	r2, r3
 80013d4:	4b03      	ldr	r3, [pc, #12]	; (80013e4 <oled_SetCursor+0x2c>)
 80013d6:	805a      	strh	r2, [r3, #2]
}
 80013d8:	bf00      	nop
 80013da:	370c      	adds	r7, #12
 80013dc:	46bd      	mov	sp, r7
 80013de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e2:	4770      	bx	lr
 80013e4:	20000598 	.word	0x20000598

080013e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b083      	sub	sp, #12
 80013ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013ee:	2300      	movs	r3, #0
 80013f0:	607b      	str	r3, [r7, #4]
 80013f2:	4b10      	ldr	r3, [pc, #64]	; (8001434 <HAL_MspInit+0x4c>)
 80013f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013f6:	4a0f      	ldr	r2, [pc, #60]	; (8001434 <HAL_MspInit+0x4c>)
 80013f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013fc:	6453      	str	r3, [r2, #68]	; 0x44
 80013fe:	4b0d      	ldr	r3, [pc, #52]	; (8001434 <HAL_MspInit+0x4c>)
 8001400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001402:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001406:	607b      	str	r3, [r7, #4]
 8001408:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800140a:	2300      	movs	r3, #0
 800140c:	603b      	str	r3, [r7, #0]
 800140e:	4b09      	ldr	r3, [pc, #36]	; (8001434 <HAL_MspInit+0x4c>)
 8001410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001412:	4a08      	ldr	r2, [pc, #32]	; (8001434 <HAL_MspInit+0x4c>)
 8001414:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001418:	6413      	str	r3, [r2, #64]	; 0x40
 800141a:	4b06      	ldr	r3, [pc, #24]	; (8001434 <HAL_MspInit+0x4c>)
 800141c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800141e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001422:	603b      	str	r3, [r7, #0]
 8001424:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001426:	bf00      	nop
 8001428:	370c      	adds	r7, #12
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr
 8001432:	bf00      	nop
 8001434:	40023800 	.word	0x40023800

08001438 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800143c:	bf00      	nop
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr

08001446 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001446:	b480      	push	{r7}
 8001448:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800144a:	e7fe      	b.n	800144a <HardFault_Handler+0x4>

0800144c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001450:	e7fe      	b.n	8001450 <MemManage_Handler+0x4>

08001452 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001452:	b480      	push	{r7}
 8001454:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001456:	e7fe      	b.n	8001456 <BusFault_Handler+0x4>

08001458 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800145c:	e7fe      	b.n	800145c <UsageFault_Handler+0x4>

0800145e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800145e:	b480      	push	{r7}
 8001460:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001462:	bf00      	nop
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr

0800146c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001470:	bf00      	nop
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr

0800147a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800147a:	b480      	push	{r7}
 800147c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800147e:	bf00      	nop
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr

08001488 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800148c:	f000 f94e 	bl	800172c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001490:	bf00      	nop
 8001492:	bd80      	pop	{r7, pc}

08001494 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001498:	4802      	ldr	r0, [pc, #8]	; (80014a4 <USART6_IRQHandler+0x10>)
 800149a:	f001 fedb 	bl	8003254 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800149e:	bf00      	nop
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	200005a4 	.word	0x200005a4

080014a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b086      	sub	sp, #24
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014b0:	4a14      	ldr	r2, [pc, #80]	; (8001504 <_sbrk+0x5c>)
 80014b2:	4b15      	ldr	r3, [pc, #84]	; (8001508 <_sbrk+0x60>)
 80014b4:	1ad3      	subs	r3, r2, r3
 80014b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014bc:	4b13      	ldr	r3, [pc, #76]	; (800150c <_sbrk+0x64>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d102      	bne.n	80014ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014c4:	4b11      	ldr	r3, [pc, #68]	; (800150c <_sbrk+0x64>)
 80014c6:	4a12      	ldr	r2, [pc, #72]	; (8001510 <_sbrk+0x68>)
 80014c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014ca:	4b10      	ldr	r3, [pc, #64]	; (800150c <_sbrk+0x64>)
 80014cc:	681a      	ldr	r2, [r3, #0]
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	4413      	add	r3, r2
 80014d2:	693a      	ldr	r2, [r7, #16]
 80014d4:	429a      	cmp	r2, r3
 80014d6:	d207      	bcs.n	80014e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014d8:	f002 fe14 	bl	8004104 <__errno>
 80014dc:	4603      	mov	r3, r0
 80014de:	220c      	movs	r2, #12
 80014e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014e2:	f04f 33ff 	mov.w	r3, #4294967295
 80014e6:	e009      	b.n	80014fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014e8:	4b08      	ldr	r3, [pc, #32]	; (800150c <_sbrk+0x64>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014ee:	4b07      	ldr	r3, [pc, #28]	; (800150c <_sbrk+0x64>)
 80014f0:	681a      	ldr	r2, [r3, #0]
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	4413      	add	r3, r2
 80014f6:	4a05      	ldr	r2, [pc, #20]	; (800150c <_sbrk+0x64>)
 80014f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014fa:	68fb      	ldr	r3, [r7, #12]
}
 80014fc:	4618      	mov	r0, r3
 80014fe:	3718      	adds	r7, #24
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}
 8001504:	20020000 	.word	0x20020000
 8001508:	00000400 	.word	0x00000400
 800150c:	200005a0 	.word	0x200005a0
 8001510:	200005f8 	.word	0x200005f8

08001514 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001514:	b480      	push	{r7}
 8001516:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001518:	4b08      	ldr	r3, [pc, #32]	; (800153c <SystemInit+0x28>)
 800151a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800151e:	4a07      	ldr	r2, [pc, #28]	; (800153c <SystemInit+0x28>)
 8001520:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001524:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001528:	4b04      	ldr	r3, [pc, #16]	; (800153c <SystemInit+0x28>)
 800152a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800152e:	609a      	str	r2, [r3, #8]
#endif
}
 8001530:	bf00      	nop
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr
 800153a:	bf00      	nop
 800153c:	e000ed00 	.word	0xe000ed00

08001540 <MX_USART6_UART_Init>:
UART_HandleTypeDef huart6;

/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	af00      	add	r7, sp, #0

  huart6.Instance = USART6;
 8001544:	4b11      	ldr	r3, [pc, #68]	; (800158c <MX_USART6_UART_Init+0x4c>)
 8001546:	4a12      	ldr	r2, [pc, #72]	; (8001590 <MX_USART6_UART_Init+0x50>)
 8001548:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800154a:	4b10      	ldr	r3, [pc, #64]	; (800158c <MX_USART6_UART_Init+0x4c>)
 800154c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001550:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001552:	4b0e      	ldr	r3, [pc, #56]	; (800158c <MX_USART6_UART_Init+0x4c>)
 8001554:	2200      	movs	r2, #0
 8001556:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001558:	4b0c      	ldr	r3, [pc, #48]	; (800158c <MX_USART6_UART_Init+0x4c>)
 800155a:	2200      	movs	r2, #0
 800155c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800155e:	4b0b      	ldr	r3, [pc, #44]	; (800158c <MX_USART6_UART_Init+0x4c>)
 8001560:	2200      	movs	r2, #0
 8001562:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001564:	4b09      	ldr	r3, [pc, #36]	; (800158c <MX_USART6_UART_Init+0x4c>)
 8001566:	220c      	movs	r2, #12
 8001568:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800156a:	4b08      	ldr	r3, [pc, #32]	; (800158c <MX_USART6_UART_Init+0x4c>)
 800156c:	2200      	movs	r2, #0
 800156e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001570:	4b06      	ldr	r3, [pc, #24]	; (800158c <MX_USART6_UART_Init+0x4c>)
 8001572:	2200      	movs	r2, #0
 8001574:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001576:	4805      	ldr	r0, [pc, #20]	; (800158c <MX_USART6_UART_Init+0x4c>)
 8001578:	f001 fce0 	bl	8002f3c <HAL_UART_Init>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001582:	f7ff fd33 	bl	8000fec <Error_Handler>
  }

}
 8001586:	bf00      	nop
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	200005a4 	.word	0x200005a4
 8001590:	40011400 	.word	0x40011400

08001594 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b08a      	sub	sp, #40	; 0x28
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800159c:	f107 0314 	add.w	r3, r7, #20
 80015a0:	2200      	movs	r2, #0
 80015a2:	601a      	str	r2, [r3, #0]
 80015a4:	605a      	str	r2, [r3, #4]
 80015a6:	609a      	str	r2, [r3, #8]
 80015a8:	60da      	str	r2, [r3, #12]
 80015aa:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART6)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a1d      	ldr	r2, [pc, #116]	; (8001628 <HAL_UART_MspInit+0x94>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d133      	bne.n	800161e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* USART6 clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 80015b6:	2300      	movs	r3, #0
 80015b8:	613b      	str	r3, [r7, #16]
 80015ba:	4b1c      	ldr	r3, [pc, #112]	; (800162c <HAL_UART_MspInit+0x98>)
 80015bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015be:	4a1b      	ldr	r2, [pc, #108]	; (800162c <HAL_UART_MspInit+0x98>)
 80015c0:	f043 0320 	orr.w	r3, r3, #32
 80015c4:	6453      	str	r3, [r2, #68]	; 0x44
 80015c6:	4b19      	ldr	r3, [pc, #100]	; (800162c <HAL_UART_MspInit+0x98>)
 80015c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ca:	f003 0320 	and.w	r3, r3, #32
 80015ce:	613b      	str	r3, [r7, #16]
 80015d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015d2:	2300      	movs	r3, #0
 80015d4:	60fb      	str	r3, [r7, #12]
 80015d6:	4b15      	ldr	r3, [pc, #84]	; (800162c <HAL_UART_MspInit+0x98>)
 80015d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015da:	4a14      	ldr	r2, [pc, #80]	; (800162c <HAL_UART_MspInit+0x98>)
 80015dc:	f043 0304 	orr.w	r3, r3, #4
 80015e0:	6313      	str	r3, [r2, #48]	; 0x30
 80015e2:	4b12      	ldr	r3, [pc, #72]	; (800162c <HAL_UART_MspInit+0x98>)
 80015e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e6:	f003 0304 	and.w	r3, r3, #4
 80015ea:	60fb      	str	r3, [r7, #12]
 80015ec:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80015ee:	23c0      	movs	r3, #192	; 0xc0
 80015f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f2:	2302      	movs	r3, #2
 80015f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f6:	2300      	movs	r3, #0
 80015f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015fa:	2303      	movs	r3, #3
 80015fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80015fe:	2308      	movs	r3, #8
 8001600:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001602:	f107 0314 	add.w	r3, r7, #20
 8001606:	4619      	mov	r1, r3
 8001608:	4809      	ldr	r0, [pc, #36]	; (8001630 <HAL_UART_MspInit+0x9c>)
 800160a:	f000 fa07 	bl	8001a1c <HAL_GPIO_Init>

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 800160e:	2200      	movs	r2, #0
 8001610:	2100      	movs	r1, #0
 8001612:	2047      	movs	r0, #71	; 0x47
 8001614:	f000 f9a9 	bl	800196a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001618:	2047      	movs	r0, #71	; 0x47
 800161a:	f000 f9c2 	bl	80019a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 800161e:	bf00      	nop
 8001620:	3728      	adds	r7, #40	; 0x28
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	40011400 	.word	0x40011400
 800162c:	40023800 	.word	0x40023800
 8001630:	40020800 	.word	0x40020800

08001634 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001634:	f8df d034 	ldr.w	sp, [pc, #52]	; 800166c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001638:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800163a:	e003      	b.n	8001644 <LoopCopyDataInit>

0800163c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800163c:	4b0c      	ldr	r3, [pc, #48]	; (8001670 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800163e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001640:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001642:	3104      	adds	r1, #4

08001644 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001644:	480b      	ldr	r0, [pc, #44]	; (8001674 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001646:	4b0c      	ldr	r3, [pc, #48]	; (8001678 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001648:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800164a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800164c:	d3f6      	bcc.n	800163c <CopyDataInit>
  ldr  r2, =_sbss
 800164e:	4a0b      	ldr	r2, [pc, #44]	; (800167c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001650:	e002      	b.n	8001658 <LoopFillZerobss>

08001652 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001652:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001654:	f842 3b04 	str.w	r3, [r2], #4

08001658 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001658:	4b09      	ldr	r3, [pc, #36]	; (8001680 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800165a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800165c:	d3f9      	bcc.n	8001652 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800165e:	f7ff ff59 	bl	8001514 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001662:	f002 fd55 	bl	8004110 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001666:	f7ff fbf1 	bl	8000e4c <main>
  bx  lr    
 800166a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800166c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001670:	08006134 	.word	0x08006134
  ldr  r0, =_sdata
 8001674:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001678:	200000e0 	.word	0x200000e0
  ldr  r2, =_sbss
 800167c:	200000e0 	.word	0x200000e0
  ldr  r3, = _ebss
 8001680:	200005f8 	.word	0x200005f8

08001684 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001684:	e7fe      	b.n	8001684 <ADC_IRQHandler>
	...

08001688 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800168c:	4b0e      	ldr	r3, [pc, #56]	; (80016c8 <HAL_Init+0x40>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4a0d      	ldr	r2, [pc, #52]	; (80016c8 <HAL_Init+0x40>)
 8001692:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001696:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001698:	4b0b      	ldr	r3, [pc, #44]	; (80016c8 <HAL_Init+0x40>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a0a      	ldr	r2, [pc, #40]	; (80016c8 <HAL_Init+0x40>)
 800169e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016a2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016a4:	4b08      	ldr	r3, [pc, #32]	; (80016c8 <HAL_Init+0x40>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a07      	ldr	r2, [pc, #28]	; (80016c8 <HAL_Init+0x40>)
 80016aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016ae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016b0:	2003      	movs	r0, #3
 80016b2:	f000 f94f 	bl	8001954 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016b6:	2000      	movs	r0, #0
 80016b8:	f000 f808 	bl	80016cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016bc:	f7ff fe94 	bl	80013e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016c0:	2300      	movs	r3, #0
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	40023c00 	.word	0x40023c00

080016cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b082      	sub	sp, #8
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016d4:	4b12      	ldr	r3, [pc, #72]	; (8001720 <HAL_InitTick+0x54>)
 80016d6:	681a      	ldr	r2, [r3, #0]
 80016d8:	4b12      	ldr	r3, [pc, #72]	; (8001724 <HAL_InitTick+0x58>)
 80016da:	781b      	ldrb	r3, [r3, #0]
 80016dc:	4619      	mov	r1, r3
 80016de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80016e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80016ea:	4618      	mov	r0, r3
 80016ec:	f000 f967 	bl	80019be <HAL_SYSTICK_Config>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d001      	beq.n	80016fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016f6:	2301      	movs	r3, #1
 80016f8:	e00e      	b.n	8001718 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	2b0f      	cmp	r3, #15
 80016fe:	d80a      	bhi.n	8001716 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001700:	2200      	movs	r2, #0
 8001702:	6879      	ldr	r1, [r7, #4]
 8001704:	f04f 30ff 	mov.w	r0, #4294967295
 8001708:	f000 f92f 	bl	800196a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800170c:	4a06      	ldr	r2, [pc, #24]	; (8001728 <HAL_InitTick+0x5c>)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001712:	2300      	movs	r3, #0
 8001714:	e000      	b.n	8001718 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001716:	2301      	movs	r3, #1
}
 8001718:	4618      	mov	r0, r3
 800171a:	3708      	adds	r7, #8
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}
 8001720:	20000070 	.word	0x20000070
 8001724:	20000078 	.word	0x20000078
 8001728:	20000074 	.word	0x20000074

0800172c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001730:	4b06      	ldr	r3, [pc, #24]	; (800174c <HAL_IncTick+0x20>)
 8001732:	781b      	ldrb	r3, [r3, #0]
 8001734:	461a      	mov	r2, r3
 8001736:	4b06      	ldr	r3, [pc, #24]	; (8001750 <HAL_IncTick+0x24>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4413      	add	r3, r2
 800173c:	4a04      	ldr	r2, [pc, #16]	; (8001750 <HAL_IncTick+0x24>)
 800173e:	6013      	str	r3, [r2, #0]
}
 8001740:	bf00      	nop
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr
 800174a:	bf00      	nop
 800174c:	20000078 	.word	0x20000078
 8001750:	200005e4 	.word	0x200005e4

08001754 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
  return uwTick;
 8001758:	4b03      	ldr	r3, [pc, #12]	; (8001768 <HAL_GetTick+0x14>)
 800175a:	681b      	ldr	r3, [r3, #0]
}
 800175c:	4618      	mov	r0, r3
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr
 8001766:	bf00      	nop
 8001768:	200005e4 	.word	0x200005e4

0800176c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b084      	sub	sp, #16
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001774:	f7ff ffee 	bl	8001754 <HAL_GetTick>
 8001778:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001784:	d005      	beq.n	8001792 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001786:	4b0a      	ldr	r3, [pc, #40]	; (80017b0 <HAL_Delay+0x44>)
 8001788:	781b      	ldrb	r3, [r3, #0]
 800178a:	461a      	mov	r2, r3
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	4413      	add	r3, r2
 8001790:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001792:	bf00      	nop
 8001794:	f7ff ffde 	bl	8001754 <HAL_GetTick>
 8001798:	4602      	mov	r2, r0
 800179a:	68bb      	ldr	r3, [r7, #8]
 800179c:	1ad3      	subs	r3, r2, r3
 800179e:	68fa      	ldr	r2, [r7, #12]
 80017a0:	429a      	cmp	r2, r3
 80017a2:	d8f7      	bhi.n	8001794 <HAL_Delay+0x28>
  {
  }
}
 80017a4:	bf00      	nop
 80017a6:	bf00      	nop
 80017a8:	3710      	adds	r7, #16
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	20000078 	.word	0x20000078

080017b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b085      	sub	sp, #20
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	f003 0307 	and.w	r3, r3, #7
 80017c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017c4:	4b0c      	ldr	r3, [pc, #48]	; (80017f8 <__NVIC_SetPriorityGrouping+0x44>)
 80017c6:	68db      	ldr	r3, [r3, #12]
 80017c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017ca:	68ba      	ldr	r2, [r7, #8]
 80017cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017d0:	4013      	ands	r3, r2
 80017d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017d8:	68bb      	ldr	r3, [r7, #8]
 80017da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017e6:	4a04      	ldr	r2, [pc, #16]	; (80017f8 <__NVIC_SetPriorityGrouping+0x44>)
 80017e8:	68bb      	ldr	r3, [r7, #8]
 80017ea:	60d3      	str	r3, [r2, #12]
}
 80017ec:	bf00      	nop
 80017ee:	3714      	adds	r7, #20
 80017f0:	46bd      	mov	sp, r7
 80017f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f6:	4770      	bx	lr
 80017f8:	e000ed00 	.word	0xe000ed00

080017fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001800:	4b04      	ldr	r3, [pc, #16]	; (8001814 <__NVIC_GetPriorityGrouping+0x18>)
 8001802:	68db      	ldr	r3, [r3, #12]
 8001804:	0a1b      	lsrs	r3, r3, #8
 8001806:	f003 0307 	and.w	r3, r3, #7
}
 800180a:	4618      	mov	r0, r3
 800180c:	46bd      	mov	sp, r7
 800180e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001812:	4770      	bx	lr
 8001814:	e000ed00 	.word	0xe000ed00

08001818 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001818:	b480      	push	{r7}
 800181a:	b083      	sub	sp, #12
 800181c:	af00      	add	r7, sp, #0
 800181e:	4603      	mov	r3, r0
 8001820:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001822:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001826:	2b00      	cmp	r3, #0
 8001828:	db0b      	blt.n	8001842 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800182a:	79fb      	ldrb	r3, [r7, #7]
 800182c:	f003 021f 	and.w	r2, r3, #31
 8001830:	4907      	ldr	r1, [pc, #28]	; (8001850 <__NVIC_EnableIRQ+0x38>)
 8001832:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001836:	095b      	lsrs	r3, r3, #5
 8001838:	2001      	movs	r0, #1
 800183a:	fa00 f202 	lsl.w	r2, r0, r2
 800183e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001842:	bf00      	nop
 8001844:	370c      	adds	r7, #12
 8001846:	46bd      	mov	sp, r7
 8001848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184c:	4770      	bx	lr
 800184e:	bf00      	nop
 8001850:	e000e100 	.word	0xe000e100

08001854 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001854:	b480      	push	{r7}
 8001856:	b083      	sub	sp, #12
 8001858:	af00      	add	r7, sp, #0
 800185a:	4603      	mov	r3, r0
 800185c:	6039      	str	r1, [r7, #0]
 800185e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001860:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001864:	2b00      	cmp	r3, #0
 8001866:	db0a      	blt.n	800187e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	b2da      	uxtb	r2, r3
 800186c:	490c      	ldr	r1, [pc, #48]	; (80018a0 <__NVIC_SetPriority+0x4c>)
 800186e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001872:	0112      	lsls	r2, r2, #4
 8001874:	b2d2      	uxtb	r2, r2
 8001876:	440b      	add	r3, r1
 8001878:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800187c:	e00a      	b.n	8001894 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	b2da      	uxtb	r2, r3
 8001882:	4908      	ldr	r1, [pc, #32]	; (80018a4 <__NVIC_SetPriority+0x50>)
 8001884:	79fb      	ldrb	r3, [r7, #7]
 8001886:	f003 030f 	and.w	r3, r3, #15
 800188a:	3b04      	subs	r3, #4
 800188c:	0112      	lsls	r2, r2, #4
 800188e:	b2d2      	uxtb	r2, r2
 8001890:	440b      	add	r3, r1
 8001892:	761a      	strb	r2, [r3, #24]
}
 8001894:	bf00      	nop
 8001896:	370c      	adds	r7, #12
 8001898:	46bd      	mov	sp, r7
 800189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189e:	4770      	bx	lr
 80018a0:	e000e100 	.word	0xe000e100
 80018a4:	e000ed00 	.word	0xe000ed00

080018a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b089      	sub	sp, #36	; 0x24
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	60f8      	str	r0, [r7, #12]
 80018b0:	60b9      	str	r1, [r7, #8]
 80018b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	f003 0307 	and.w	r3, r3, #7
 80018ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018bc:	69fb      	ldr	r3, [r7, #28]
 80018be:	f1c3 0307 	rsb	r3, r3, #7
 80018c2:	2b04      	cmp	r3, #4
 80018c4:	bf28      	it	cs
 80018c6:	2304      	movcs	r3, #4
 80018c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018ca:	69fb      	ldr	r3, [r7, #28]
 80018cc:	3304      	adds	r3, #4
 80018ce:	2b06      	cmp	r3, #6
 80018d0:	d902      	bls.n	80018d8 <NVIC_EncodePriority+0x30>
 80018d2:	69fb      	ldr	r3, [r7, #28]
 80018d4:	3b03      	subs	r3, #3
 80018d6:	e000      	b.n	80018da <NVIC_EncodePriority+0x32>
 80018d8:	2300      	movs	r3, #0
 80018da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018dc:	f04f 32ff 	mov.w	r2, #4294967295
 80018e0:	69bb      	ldr	r3, [r7, #24]
 80018e2:	fa02 f303 	lsl.w	r3, r2, r3
 80018e6:	43da      	mvns	r2, r3
 80018e8:	68bb      	ldr	r3, [r7, #8]
 80018ea:	401a      	ands	r2, r3
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018f0:	f04f 31ff 	mov.w	r1, #4294967295
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	fa01 f303 	lsl.w	r3, r1, r3
 80018fa:	43d9      	mvns	r1, r3
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001900:	4313      	orrs	r3, r2
         );
}
 8001902:	4618      	mov	r0, r3
 8001904:	3724      	adds	r7, #36	; 0x24
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr
	...

08001910 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b082      	sub	sp, #8
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	3b01      	subs	r3, #1
 800191c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001920:	d301      	bcc.n	8001926 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001922:	2301      	movs	r3, #1
 8001924:	e00f      	b.n	8001946 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001926:	4a0a      	ldr	r2, [pc, #40]	; (8001950 <SysTick_Config+0x40>)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	3b01      	subs	r3, #1
 800192c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800192e:	210f      	movs	r1, #15
 8001930:	f04f 30ff 	mov.w	r0, #4294967295
 8001934:	f7ff ff8e 	bl	8001854 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001938:	4b05      	ldr	r3, [pc, #20]	; (8001950 <SysTick_Config+0x40>)
 800193a:	2200      	movs	r2, #0
 800193c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800193e:	4b04      	ldr	r3, [pc, #16]	; (8001950 <SysTick_Config+0x40>)
 8001940:	2207      	movs	r2, #7
 8001942:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001944:	2300      	movs	r3, #0
}
 8001946:	4618      	mov	r0, r3
 8001948:	3708      	adds	r7, #8
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	e000e010 	.word	0xe000e010

08001954 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b082      	sub	sp, #8
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800195c:	6878      	ldr	r0, [r7, #4]
 800195e:	f7ff ff29 	bl	80017b4 <__NVIC_SetPriorityGrouping>
}
 8001962:	bf00      	nop
 8001964:	3708      	adds	r7, #8
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}

0800196a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800196a:	b580      	push	{r7, lr}
 800196c:	b086      	sub	sp, #24
 800196e:	af00      	add	r7, sp, #0
 8001970:	4603      	mov	r3, r0
 8001972:	60b9      	str	r1, [r7, #8]
 8001974:	607a      	str	r2, [r7, #4]
 8001976:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001978:	2300      	movs	r3, #0
 800197a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800197c:	f7ff ff3e 	bl	80017fc <__NVIC_GetPriorityGrouping>
 8001980:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001982:	687a      	ldr	r2, [r7, #4]
 8001984:	68b9      	ldr	r1, [r7, #8]
 8001986:	6978      	ldr	r0, [r7, #20]
 8001988:	f7ff ff8e 	bl	80018a8 <NVIC_EncodePriority>
 800198c:	4602      	mov	r2, r0
 800198e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001992:	4611      	mov	r1, r2
 8001994:	4618      	mov	r0, r3
 8001996:	f7ff ff5d 	bl	8001854 <__NVIC_SetPriority>
}
 800199a:	bf00      	nop
 800199c:	3718      	adds	r7, #24
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}

080019a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019a2:	b580      	push	{r7, lr}
 80019a4:	b082      	sub	sp, #8
 80019a6:	af00      	add	r7, sp, #0
 80019a8:	4603      	mov	r3, r0
 80019aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019b0:	4618      	mov	r0, r3
 80019b2:	f7ff ff31 	bl	8001818 <__NVIC_EnableIRQ>
}
 80019b6:	bf00      	nop
 80019b8:	3708      	adds	r7, #8
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}

080019be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019be:	b580      	push	{r7, lr}
 80019c0:	b082      	sub	sp, #8
 80019c2:	af00      	add	r7, sp, #0
 80019c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019c6:	6878      	ldr	r0, [r7, #4]
 80019c8:	f7ff ffa2 	bl	8001910 <SysTick_Config>
 80019cc:	4603      	mov	r3, r0
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	3708      	adds	r7, #8
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}

080019d6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80019d6:	b480      	push	{r7}
 80019d8:	b083      	sub	sp, #12
 80019da:	af00      	add	r7, sp, #0
 80019dc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80019e4:	b2db      	uxtb	r3, r3
 80019e6:	2b02      	cmp	r3, #2
 80019e8:	d004      	beq.n	80019f4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2280      	movs	r2, #128	; 0x80
 80019ee:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80019f0:	2301      	movs	r3, #1
 80019f2:	e00c      	b.n	8001a0e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2205      	movs	r2, #5
 80019f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	681a      	ldr	r2, [r3, #0]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f022 0201 	bic.w	r2, r2, #1
 8001a0a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001a0c:	2300      	movs	r3, #0
}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	370c      	adds	r7, #12
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr
	...

08001a1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b089      	sub	sp, #36	; 0x24
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
 8001a24:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a26:	2300      	movs	r3, #0
 8001a28:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a32:	2300      	movs	r3, #0
 8001a34:	61fb      	str	r3, [r7, #28]
 8001a36:	e16b      	b.n	8001d10 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a38:	2201      	movs	r2, #1
 8001a3a:	69fb      	ldr	r3, [r7, #28]
 8001a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a40:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	697a      	ldr	r2, [r7, #20]
 8001a48:	4013      	ands	r3, r2
 8001a4a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a4c:	693a      	ldr	r2, [r7, #16]
 8001a4e:	697b      	ldr	r3, [r7, #20]
 8001a50:	429a      	cmp	r2, r3
 8001a52:	f040 815a 	bne.w	8001d0a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	2b01      	cmp	r3, #1
 8001a5c:	d00b      	beq.n	8001a76 <HAL_GPIO_Init+0x5a>
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	2b02      	cmp	r3, #2
 8001a64:	d007      	beq.n	8001a76 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a6a:	2b11      	cmp	r3, #17
 8001a6c:	d003      	beq.n	8001a76 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	2b12      	cmp	r3, #18
 8001a74:	d130      	bne.n	8001ad8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	689b      	ldr	r3, [r3, #8]
 8001a7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a7c:	69fb      	ldr	r3, [r7, #28]
 8001a7e:	005b      	lsls	r3, r3, #1
 8001a80:	2203      	movs	r2, #3
 8001a82:	fa02 f303 	lsl.w	r3, r2, r3
 8001a86:	43db      	mvns	r3, r3
 8001a88:	69ba      	ldr	r2, [r7, #24]
 8001a8a:	4013      	ands	r3, r2
 8001a8c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	68da      	ldr	r2, [r3, #12]
 8001a92:	69fb      	ldr	r3, [r7, #28]
 8001a94:	005b      	lsls	r3, r3, #1
 8001a96:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9a:	69ba      	ldr	r2, [r7, #24]
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	69ba      	ldr	r2, [r7, #24]
 8001aa4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001aac:	2201      	movs	r2, #1
 8001aae:	69fb      	ldr	r3, [r7, #28]
 8001ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab4:	43db      	mvns	r3, r3
 8001ab6:	69ba      	ldr	r2, [r7, #24]
 8001ab8:	4013      	ands	r3, r2
 8001aba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	091b      	lsrs	r3, r3, #4
 8001ac2:	f003 0201 	and.w	r2, r3, #1
 8001ac6:	69fb      	ldr	r3, [r7, #28]
 8001ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8001acc:	69ba      	ldr	r2, [r7, #24]
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	69ba      	ldr	r2, [r7, #24]
 8001ad6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	68db      	ldr	r3, [r3, #12]
 8001adc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001ade:	69fb      	ldr	r3, [r7, #28]
 8001ae0:	005b      	lsls	r3, r3, #1
 8001ae2:	2203      	movs	r2, #3
 8001ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae8:	43db      	mvns	r3, r3
 8001aea:	69ba      	ldr	r2, [r7, #24]
 8001aec:	4013      	ands	r3, r2
 8001aee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	689a      	ldr	r2, [r3, #8]
 8001af4:	69fb      	ldr	r3, [r7, #28]
 8001af6:	005b      	lsls	r3, r3, #1
 8001af8:	fa02 f303 	lsl.w	r3, r2, r3
 8001afc:	69ba      	ldr	r2, [r7, #24]
 8001afe:	4313      	orrs	r3, r2
 8001b00:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	69ba      	ldr	r2, [r7, #24]
 8001b06:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	2b02      	cmp	r3, #2
 8001b0e:	d003      	beq.n	8001b18 <HAL_GPIO_Init+0xfc>
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	2b12      	cmp	r3, #18
 8001b16:	d123      	bne.n	8001b60 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b18:	69fb      	ldr	r3, [r7, #28]
 8001b1a:	08da      	lsrs	r2, r3, #3
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	3208      	adds	r2, #8
 8001b20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b24:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b26:	69fb      	ldr	r3, [r7, #28]
 8001b28:	f003 0307 	and.w	r3, r3, #7
 8001b2c:	009b      	lsls	r3, r3, #2
 8001b2e:	220f      	movs	r2, #15
 8001b30:	fa02 f303 	lsl.w	r3, r2, r3
 8001b34:	43db      	mvns	r3, r3
 8001b36:	69ba      	ldr	r2, [r7, #24]
 8001b38:	4013      	ands	r3, r2
 8001b3a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	691a      	ldr	r2, [r3, #16]
 8001b40:	69fb      	ldr	r3, [r7, #28]
 8001b42:	f003 0307 	and.w	r3, r3, #7
 8001b46:	009b      	lsls	r3, r3, #2
 8001b48:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4c:	69ba      	ldr	r2, [r7, #24]
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b52:	69fb      	ldr	r3, [r7, #28]
 8001b54:	08da      	lsrs	r2, r3, #3
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	3208      	adds	r2, #8
 8001b5a:	69b9      	ldr	r1, [r7, #24]
 8001b5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b66:	69fb      	ldr	r3, [r7, #28]
 8001b68:	005b      	lsls	r3, r3, #1
 8001b6a:	2203      	movs	r2, #3
 8001b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b70:	43db      	mvns	r3, r3
 8001b72:	69ba      	ldr	r2, [r7, #24]
 8001b74:	4013      	ands	r3, r2
 8001b76:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	f003 0203 	and.w	r2, r3, #3
 8001b80:	69fb      	ldr	r3, [r7, #28]
 8001b82:	005b      	lsls	r3, r3, #1
 8001b84:	fa02 f303 	lsl.w	r3, r2, r3
 8001b88:	69ba      	ldr	r2, [r7, #24]
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	69ba      	ldr	r2, [r7, #24]
 8001b92:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	f000 80b4 	beq.w	8001d0a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	60fb      	str	r3, [r7, #12]
 8001ba6:	4b60      	ldr	r3, [pc, #384]	; (8001d28 <HAL_GPIO_Init+0x30c>)
 8001ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001baa:	4a5f      	ldr	r2, [pc, #380]	; (8001d28 <HAL_GPIO_Init+0x30c>)
 8001bac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bb0:	6453      	str	r3, [r2, #68]	; 0x44
 8001bb2:	4b5d      	ldr	r3, [pc, #372]	; (8001d28 <HAL_GPIO_Init+0x30c>)
 8001bb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bba:	60fb      	str	r3, [r7, #12]
 8001bbc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001bbe:	4a5b      	ldr	r2, [pc, #364]	; (8001d2c <HAL_GPIO_Init+0x310>)
 8001bc0:	69fb      	ldr	r3, [r7, #28]
 8001bc2:	089b      	lsrs	r3, r3, #2
 8001bc4:	3302      	adds	r3, #2
 8001bc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001bcc:	69fb      	ldr	r3, [r7, #28]
 8001bce:	f003 0303 	and.w	r3, r3, #3
 8001bd2:	009b      	lsls	r3, r3, #2
 8001bd4:	220f      	movs	r2, #15
 8001bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bda:	43db      	mvns	r3, r3
 8001bdc:	69ba      	ldr	r2, [r7, #24]
 8001bde:	4013      	ands	r3, r2
 8001be0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	4a52      	ldr	r2, [pc, #328]	; (8001d30 <HAL_GPIO_Init+0x314>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d02b      	beq.n	8001c42 <HAL_GPIO_Init+0x226>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	4a51      	ldr	r2, [pc, #324]	; (8001d34 <HAL_GPIO_Init+0x318>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d025      	beq.n	8001c3e <HAL_GPIO_Init+0x222>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	4a50      	ldr	r2, [pc, #320]	; (8001d38 <HAL_GPIO_Init+0x31c>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d01f      	beq.n	8001c3a <HAL_GPIO_Init+0x21e>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	4a4f      	ldr	r2, [pc, #316]	; (8001d3c <HAL_GPIO_Init+0x320>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d019      	beq.n	8001c36 <HAL_GPIO_Init+0x21a>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	4a4e      	ldr	r2, [pc, #312]	; (8001d40 <HAL_GPIO_Init+0x324>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d013      	beq.n	8001c32 <HAL_GPIO_Init+0x216>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	4a4d      	ldr	r2, [pc, #308]	; (8001d44 <HAL_GPIO_Init+0x328>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d00d      	beq.n	8001c2e <HAL_GPIO_Init+0x212>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	4a4c      	ldr	r2, [pc, #304]	; (8001d48 <HAL_GPIO_Init+0x32c>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d007      	beq.n	8001c2a <HAL_GPIO_Init+0x20e>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	4a4b      	ldr	r2, [pc, #300]	; (8001d4c <HAL_GPIO_Init+0x330>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d101      	bne.n	8001c26 <HAL_GPIO_Init+0x20a>
 8001c22:	2307      	movs	r3, #7
 8001c24:	e00e      	b.n	8001c44 <HAL_GPIO_Init+0x228>
 8001c26:	2308      	movs	r3, #8
 8001c28:	e00c      	b.n	8001c44 <HAL_GPIO_Init+0x228>
 8001c2a:	2306      	movs	r3, #6
 8001c2c:	e00a      	b.n	8001c44 <HAL_GPIO_Init+0x228>
 8001c2e:	2305      	movs	r3, #5
 8001c30:	e008      	b.n	8001c44 <HAL_GPIO_Init+0x228>
 8001c32:	2304      	movs	r3, #4
 8001c34:	e006      	b.n	8001c44 <HAL_GPIO_Init+0x228>
 8001c36:	2303      	movs	r3, #3
 8001c38:	e004      	b.n	8001c44 <HAL_GPIO_Init+0x228>
 8001c3a:	2302      	movs	r3, #2
 8001c3c:	e002      	b.n	8001c44 <HAL_GPIO_Init+0x228>
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e000      	b.n	8001c44 <HAL_GPIO_Init+0x228>
 8001c42:	2300      	movs	r3, #0
 8001c44:	69fa      	ldr	r2, [r7, #28]
 8001c46:	f002 0203 	and.w	r2, r2, #3
 8001c4a:	0092      	lsls	r2, r2, #2
 8001c4c:	4093      	lsls	r3, r2
 8001c4e:	69ba      	ldr	r2, [r7, #24]
 8001c50:	4313      	orrs	r3, r2
 8001c52:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c54:	4935      	ldr	r1, [pc, #212]	; (8001d2c <HAL_GPIO_Init+0x310>)
 8001c56:	69fb      	ldr	r3, [r7, #28]
 8001c58:	089b      	lsrs	r3, r3, #2
 8001c5a:	3302      	adds	r3, #2
 8001c5c:	69ba      	ldr	r2, [r7, #24]
 8001c5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c62:	4b3b      	ldr	r3, [pc, #236]	; (8001d50 <HAL_GPIO_Init+0x334>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c68:	693b      	ldr	r3, [r7, #16]
 8001c6a:	43db      	mvns	r3, r3
 8001c6c:	69ba      	ldr	r2, [r7, #24]
 8001c6e:	4013      	ands	r3, r2
 8001c70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d003      	beq.n	8001c86 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001c7e:	69ba      	ldr	r2, [r7, #24]
 8001c80:	693b      	ldr	r3, [r7, #16]
 8001c82:	4313      	orrs	r3, r2
 8001c84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c86:	4a32      	ldr	r2, [pc, #200]	; (8001d50 <HAL_GPIO_Init+0x334>)
 8001c88:	69bb      	ldr	r3, [r7, #24]
 8001c8a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001c8c:	4b30      	ldr	r3, [pc, #192]	; (8001d50 <HAL_GPIO_Init+0x334>)
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c92:	693b      	ldr	r3, [r7, #16]
 8001c94:	43db      	mvns	r3, r3
 8001c96:	69ba      	ldr	r2, [r7, #24]
 8001c98:	4013      	ands	r3, r2
 8001c9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d003      	beq.n	8001cb0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001ca8:	69ba      	ldr	r2, [r7, #24]
 8001caa:	693b      	ldr	r3, [r7, #16]
 8001cac:	4313      	orrs	r3, r2
 8001cae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001cb0:	4a27      	ldr	r2, [pc, #156]	; (8001d50 <HAL_GPIO_Init+0x334>)
 8001cb2:	69bb      	ldr	r3, [r7, #24]
 8001cb4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001cb6:	4b26      	ldr	r3, [pc, #152]	; (8001d50 <HAL_GPIO_Init+0x334>)
 8001cb8:	689b      	ldr	r3, [r3, #8]
 8001cba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cbc:	693b      	ldr	r3, [r7, #16]
 8001cbe:	43db      	mvns	r3, r3
 8001cc0:	69ba      	ldr	r2, [r7, #24]
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d003      	beq.n	8001cda <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001cd2:	69ba      	ldr	r2, [r7, #24]
 8001cd4:	693b      	ldr	r3, [r7, #16]
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001cda:	4a1d      	ldr	r2, [pc, #116]	; (8001d50 <HAL_GPIO_Init+0x334>)
 8001cdc:	69bb      	ldr	r3, [r7, #24]
 8001cde:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ce0:	4b1b      	ldr	r3, [pc, #108]	; (8001d50 <HAL_GPIO_Init+0x334>)
 8001ce2:	68db      	ldr	r3, [r3, #12]
 8001ce4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	43db      	mvns	r3, r3
 8001cea:	69ba      	ldr	r2, [r7, #24]
 8001cec:	4013      	ands	r3, r2
 8001cee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d003      	beq.n	8001d04 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001cfc:	69ba      	ldr	r2, [r7, #24]
 8001cfe:	693b      	ldr	r3, [r7, #16]
 8001d00:	4313      	orrs	r3, r2
 8001d02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d04:	4a12      	ldr	r2, [pc, #72]	; (8001d50 <HAL_GPIO_Init+0x334>)
 8001d06:	69bb      	ldr	r3, [r7, #24]
 8001d08:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d0a:	69fb      	ldr	r3, [r7, #28]
 8001d0c:	3301      	adds	r3, #1
 8001d0e:	61fb      	str	r3, [r7, #28]
 8001d10:	69fb      	ldr	r3, [r7, #28]
 8001d12:	2b0f      	cmp	r3, #15
 8001d14:	f67f ae90 	bls.w	8001a38 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d18:	bf00      	nop
 8001d1a:	bf00      	nop
 8001d1c:	3724      	adds	r7, #36	; 0x24
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d24:	4770      	bx	lr
 8001d26:	bf00      	nop
 8001d28:	40023800 	.word	0x40023800
 8001d2c:	40013800 	.word	0x40013800
 8001d30:	40020000 	.word	0x40020000
 8001d34:	40020400 	.word	0x40020400
 8001d38:	40020800 	.word	0x40020800
 8001d3c:	40020c00 	.word	0x40020c00
 8001d40:	40021000 	.word	0x40021000
 8001d44:	40021400 	.word	0x40021400
 8001d48:	40021800 	.word	0x40021800
 8001d4c:	40021c00 	.word	0x40021c00
 8001d50:	40013c00 	.word	0x40013c00

08001d54 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b085      	sub	sp, #20
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
 8001d5c:	460b      	mov	r3, r1
 8001d5e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	691a      	ldr	r2, [r3, #16]
 8001d64:	887b      	ldrh	r3, [r7, #2]
 8001d66:	4013      	ands	r3, r2
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d002      	beq.n	8001d72 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	73fb      	strb	r3, [r7, #15]
 8001d70:	e001      	b.n	8001d76 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001d72:	2300      	movs	r3, #0
 8001d74:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001d76:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	3714      	adds	r7, #20
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr

08001d84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b083      	sub	sp, #12
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
 8001d8c:	460b      	mov	r3, r1
 8001d8e:	807b      	strh	r3, [r7, #2]
 8001d90:	4613      	mov	r3, r2
 8001d92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d94:	787b      	ldrb	r3, [r7, #1]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d003      	beq.n	8001da2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d9a:	887a      	ldrh	r2, [r7, #2]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001da0:	e003      	b.n	8001daa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001da2:	887b      	ldrh	r3, [r7, #2]
 8001da4:	041a      	lsls	r2, r3, #16
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	619a      	str	r2, [r3, #24]
}
 8001daa:	bf00      	nop
 8001dac:	370c      	adds	r7, #12
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr

08001db6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001db6:	b480      	push	{r7}
 8001db8:	b083      	sub	sp, #12
 8001dba:	af00      	add	r7, sp, #0
 8001dbc:	6078      	str	r0, [r7, #4]
 8001dbe:	460b      	mov	r3, r1
 8001dc0:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	695a      	ldr	r2, [r3, #20]
 8001dc6:	887b      	ldrh	r3, [r7, #2]
 8001dc8:	401a      	ands	r2, r3
 8001dca:	887b      	ldrh	r3, [r7, #2]
 8001dcc:	429a      	cmp	r2, r3
 8001dce:	d104      	bne.n	8001dda <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001dd0:	887b      	ldrh	r3, [r7, #2]
 8001dd2:	041a      	lsls	r2, r3, #16
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8001dd8:	e002      	b.n	8001de0 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8001dda:	887a      	ldrh	r2, [r7, #2]
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	619a      	str	r2, [r3, #24]
}
 8001de0:	bf00      	nop
 8001de2:	370c      	adds	r7, #12
 8001de4:	46bd      	mov	sp, r7
 8001de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dea:	4770      	bx	lr

08001dec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b084      	sub	sp, #16
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d101      	bne.n	8001dfe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e12b      	b.n	8002056 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e04:	b2db      	uxtb	r3, r3
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d106      	bne.n	8001e18 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001e12:	6878      	ldr	r0, [r7, #4]
 8001e14:	f7fe fc3c 	bl	8000690 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2224      	movs	r2, #36	; 0x24
 8001e1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	681a      	ldr	r2, [r3, #0]
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f022 0201 	bic.w	r2, r2, #1
 8001e2e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	681a      	ldr	r2, [r3, #0]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001e3e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	681a      	ldr	r2, [r3, #0]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001e4e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001e50:	f001 f84c 	bl	8002eec <HAL_RCC_GetPCLK1Freq>
 8001e54:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	4a81      	ldr	r2, [pc, #516]	; (8002060 <HAL_I2C_Init+0x274>)
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d807      	bhi.n	8001e70 <HAL_I2C_Init+0x84>
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	4a80      	ldr	r2, [pc, #512]	; (8002064 <HAL_I2C_Init+0x278>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	bf94      	ite	ls
 8001e68:	2301      	movls	r3, #1
 8001e6a:	2300      	movhi	r3, #0
 8001e6c:	b2db      	uxtb	r3, r3
 8001e6e:	e006      	b.n	8001e7e <HAL_I2C_Init+0x92>
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	4a7d      	ldr	r2, [pc, #500]	; (8002068 <HAL_I2C_Init+0x27c>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	bf94      	ite	ls
 8001e78:	2301      	movls	r3, #1
 8001e7a:	2300      	movhi	r3, #0
 8001e7c:	b2db      	uxtb	r3, r3
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d001      	beq.n	8001e86 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001e82:	2301      	movs	r3, #1
 8001e84:	e0e7      	b.n	8002056 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	4a78      	ldr	r2, [pc, #480]	; (800206c <HAL_I2C_Init+0x280>)
 8001e8a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e8e:	0c9b      	lsrs	r3, r3, #18
 8001e90:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	68ba      	ldr	r2, [r7, #8]
 8001ea2:	430a      	orrs	r2, r1
 8001ea4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	6a1b      	ldr	r3, [r3, #32]
 8001eac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	4a6a      	ldr	r2, [pc, #424]	; (8002060 <HAL_I2C_Init+0x274>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d802      	bhi.n	8001ec0 <HAL_I2C_Init+0xd4>
 8001eba:	68bb      	ldr	r3, [r7, #8]
 8001ebc:	3301      	adds	r3, #1
 8001ebe:	e009      	b.n	8001ed4 <HAL_I2C_Init+0xe8>
 8001ec0:	68bb      	ldr	r3, [r7, #8]
 8001ec2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001ec6:	fb02 f303 	mul.w	r3, r2, r3
 8001eca:	4a69      	ldr	r2, [pc, #420]	; (8002070 <HAL_I2C_Init+0x284>)
 8001ecc:	fba2 2303 	umull	r2, r3, r2, r3
 8001ed0:	099b      	lsrs	r3, r3, #6
 8001ed2:	3301      	adds	r3, #1
 8001ed4:	687a      	ldr	r2, [r7, #4]
 8001ed6:	6812      	ldr	r2, [r2, #0]
 8001ed8:	430b      	orrs	r3, r1
 8001eda:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	69db      	ldr	r3, [r3, #28]
 8001ee2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001ee6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	495c      	ldr	r1, [pc, #368]	; (8002060 <HAL_I2C_Init+0x274>)
 8001ef0:	428b      	cmp	r3, r1
 8001ef2:	d819      	bhi.n	8001f28 <HAL_I2C_Init+0x13c>
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	1e59      	subs	r1, r3, #1
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	005b      	lsls	r3, r3, #1
 8001efe:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f02:	1c59      	adds	r1, r3, #1
 8001f04:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001f08:	400b      	ands	r3, r1
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d00a      	beq.n	8001f24 <HAL_I2C_Init+0x138>
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	1e59      	subs	r1, r3, #1
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	005b      	lsls	r3, r3, #1
 8001f18:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f1c:	3301      	adds	r3, #1
 8001f1e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f22:	e051      	b.n	8001fc8 <HAL_I2C_Init+0x1dc>
 8001f24:	2304      	movs	r3, #4
 8001f26:	e04f      	b.n	8001fc8 <HAL_I2C_Init+0x1dc>
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	689b      	ldr	r3, [r3, #8]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d111      	bne.n	8001f54 <HAL_I2C_Init+0x168>
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	1e58      	subs	r0, r3, #1
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6859      	ldr	r1, [r3, #4]
 8001f38:	460b      	mov	r3, r1
 8001f3a:	005b      	lsls	r3, r3, #1
 8001f3c:	440b      	add	r3, r1
 8001f3e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f42:	3301      	adds	r3, #1
 8001f44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	bf0c      	ite	eq
 8001f4c:	2301      	moveq	r3, #1
 8001f4e:	2300      	movne	r3, #0
 8001f50:	b2db      	uxtb	r3, r3
 8001f52:	e012      	b.n	8001f7a <HAL_I2C_Init+0x18e>
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	1e58      	subs	r0, r3, #1
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6859      	ldr	r1, [r3, #4]
 8001f5c:	460b      	mov	r3, r1
 8001f5e:	009b      	lsls	r3, r3, #2
 8001f60:	440b      	add	r3, r1
 8001f62:	0099      	lsls	r1, r3, #2
 8001f64:	440b      	add	r3, r1
 8001f66:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f6a:	3301      	adds	r3, #1
 8001f6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	bf0c      	ite	eq
 8001f74:	2301      	moveq	r3, #1
 8001f76:	2300      	movne	r3, #0
 8001f78:	b2db      	uxtb	r3, r3
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d001      	beq.n	8001f82 <HAL_I2C_Init+0x196>
 8001f7e:	2301      	movs	r3, #1
 8001f80:	e022      	b.n	8001fc8 <HAL_I2C_Init+0x1dc>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	689b      	ldr	r3, [r3, #8]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d10e      	bne.n	8001fa8 <HAL_I2C_Init+0x1bc>
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	1e58      	subs	r0, r3, #1
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6859      	ldr	r1, [r3, #4]
 8001f92:	460b      	mov	r3, r1
 8001f94:	005b      	lsls	r3, r3, #1
 8001f96:	440b      	add	r3, r1
 8001f98:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f9c:	3301      	adds	r3, #1
 8001f9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fa2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001fa6:	e00f      	b.n	8001fc8 <HAL_I2C_Init+0x1dc>
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	1e58      	subs	r0, r3, #1
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6859      	ldr	r1, [r3, #4]
 8001fb0:	460b      	mov	r3, r1
 8001fb2:	009b      	lsls	r3, r3, #2
 8001fb4:	440b      	add	r3, r1
 8001fb6:	0099      	lsls	r1, r3, #2
 8001fb8:	440b      	add	r3, r1
 8001fba:	fbb0 f3f3 	udiv	r3, r0, r3
 8001fbe:	3301      	adds	r3, #1
 8001fc0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fc4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001fc8:	6879      	ldr	r1, [r7, #4]
 8001fca:	6809      	ldr	r1, [r1, #0]
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	69da      	ldr	r2, [r3, #28]
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6a1b      	ldr	r3, [r3, #32]
 8001fe2:	431a      	orrs	r2, r3
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	430a      	orrs	r2, r1
 8001fea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	689b      	ldr	r3, [r3, #8]
 8001ff2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001ff6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001ffa:	687a      	ldr	r2, [r7, #4]
 8001ffc:	6911      	ldr	r1, [r2, #16]
 8001ffe:	687a      	ldr	r2, [r7, #4]
 8002000:	68d2      	ldr	r2, [r2, #12]
 8002002:	4311      	orrs	r1, r2
 8002004:	687a      	ldr	r2, [r7, #4]
 8002006:	6812      	ldr	r2, [r2, #0]
 8002008:	430b      	orrs	r3, r1
 800200a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	68db      	ldr	r3, [r3, #12]
 8002012:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	695a      	ldr	r2, [r3, #20]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	699b      	ldr	r3, [r3, #24]
 800201e:	431a      	orrs	r2, r3
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	430a      	orrs	r2, r1
 8002026:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	681a      	ldr	r2, [r3, #0]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f042 0201 	orr.w	r2, r2, #1
 8002036:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2200      	movs	r2, #0
 800203c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2220      	movs	r2, #32
 8002042:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2200      	movs	r2, #0
 800204a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2200      	movs	r2, #0
 8002050:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002054:	2300      	movs	r3, #0
}
 8002056:	4618      	mov	r0, r3
 8002058:	3710      	adds	r7, #16
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	000186a0 	.word	0x000186a0
 8002064:	001e847f 	.word	0x001e847f
 8002068:	003d08ff 	.word	0x003d08ff
 800206c:	431bde83 	.word	0x431bde83
 8002070:	10624dd3 	.word	0x10624dd3

08002074 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b088      	sub	sp, #32
 8002078:	af02      	add	r7, sp, #8
 800207a:	60f8      	str	r0, [r7, #12]
 800207c:	4608      	mov	r0, r1
 800207e:	4611      	mov	r1, r2
 8002080:	461a      	mov	r2, r3
 8002082:	4603      	mov	r3, r0
 8002084:	817b      	strh	r3, [r7, #10]
 8002086:	460b      	mov	r3, r1
 8002088:	813b      	strh	r3, [r7, #8]
 800208a:	4613      	mov	r3, r2
 800208c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800208e:	f7ff fb61 	bl	8001754 <HAL_GetTick>
 8002092:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800209a:	b2db      	uxtb	r3, r3
 800209c:	2b20      	cmp	r3, #32
 800209e:	f040 80d9 	bne.w	8002254 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	9300      	str	r3, [sp, #0]
 80020a6:	2319      	movs	r3, #25
 80020a8:	2201      	movs	r2, #1
 80020aa:	496d      	ldr	r1, [pc, #436]	; (8002260 <HAL_I2C_Mem_Write+0x1ec>)
 80020ac:	68f8      	ldr	r0, [r7, #12]
 80020ae:	f000 f96f 	bl	8002390 <I2C_WaitOnFlagUntilTimeout>
 80020b2:	4603      	mov	r3, r0
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d001      	beq.n	80020bc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80020b8:	2302      	movs	r3, #2
 80020ba:	e0cc      	b.n	8002256 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020c2:	2b01      	cmp	r3, #1
 80020c4:	d101      	bne.n	80020ca <HAL_I2C_Mem_Write+0x56>
 80020c6:	2302      	movs	r3, #2
 80020c8:	e0c5      	b.n	8002256 <HAL_I2C_Mem_Write+0x1e2>
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	2201      	movs	r2, #1
 80020ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f003 0301 	and.w	r3, r3, #1
 80020dc:	2b01      	cmp	r3, #1
 80020de:	d007      	beq.n	80020f0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	681a      	ldr	r2, [r3, #0]
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f042 0201 	orr.w	r2, r2, #1
 80020ee:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	681a      	ldr	r2, [r3, #0]
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80020fe:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	2221      	movs	r2, #33	; 0x21
 8002104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	2240      	movs	r2, #64	; 0x40
 800210c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	2200      	movs	r2, #0
 8002114:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	6a3a      	ldr	r2, [r7, #32]
 800211a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002120:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002126:	b29a      	uxth	r2, r3
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	4a4d      	ldr	r2, [pc, #308]	; (8002264 <HAL_I2C_Mem_Write+0x1f0>)
 8002130:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002132:	88f8      	ldrh	r0, [r7, #6]
 8002134:	893a      	ldrh	r2, [r7, #8]
 8002136:	8979      	ldrh	r1, [r7, #10]
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	9301      	str	r3, [sp, #4]
 800213c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800213e:	9300      	str	r3, [sp, #0]
 8002140:	4603      	mov	r3, r0
 8002142:	68f8      	ldr	r0, [r7, #12]
 8002144:	f000 f890 	bl	8002268 <I2C_RequestMemoryWrite>
 8002148:	4603      	mov	r3, r0
 800214a:	2b00      	cmp	r3, #0
 800214c:	d052      	beq.n	80021f4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	e081      	b.n	8002256 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002152:	697a      	ldr	r2, [r7, #20]
 8002154:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002156:	68f8      	ldr	r0, [r7, #12]
 8002158:	f000 f9f0 	bl	800253c <I2C_WaitOnTXEFlagUntilTimeout>
 800215c:	4603      	mov	r3, r0
 800215e:	2b00      	cmp	r3, #0
 8002160:	d00d      	beq.n	800217e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002166:	2b04      	cmp	r3, #4
 8002168:	d107      	bne.n	800217a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	681a      	ldr	r2, [r3, #0]
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002178:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800217a:	2301      	movs	r3, #1
 800217c:	e06b      	b.n	8002256 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002182:	781a      	ldrb	r2, [r3, #0]
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800218e:	1c5a      	adds	r2, r3, #1
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002198:	3b01      	subs	r3, #1
 800219a:	b29a      	uxth	r2, r3
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021a4:	b29b      	uxth	r3, r3
 80021a6:	3b01      	subs	r3, #1
 80021a8:	b29a      	uxth	r2, r3
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	695b      	ldr	r3, [r3, #20]
 80021b4:	f003 0304 	and.w	r3, r3, #4
 80021b8:	2b04      	cmp	r3, #4
 80021ba:	d11b      	bne.n	80021f4 <HAL_I2C_Mem_Write+0x180>
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d017      	beq.n	80021f4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021c8:	781a      	ldrb	r2, [r3, #0]
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d4:	1c5a      	adds	r2, r3, #1
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021de:	3b01      	subs	r3, #1
 80021e0:	b29a      	uxth	r2, r3
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021ea:	b29b      	uxth	r3, r3
 80021ec:	3b01      	subs	r3, #1
 80021ee:	b29a      	uxth	r2, r3
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d1aa      	bne.n	8002152 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021fc:	697a      	ldr	r2, [r7, #20]
 80021fe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002200:	68f8      	ldr	r0, [r7, #12]
 8002202:	f000 f9dc 	bl	80025be <I2C_WaitOnBTFFlagUntilTimeout>
 8002206:	4603      	mov	r3, r0
 8002208:	2b00      	cmp	r3, #0
 800220a:	d00d      	beq.n	8002228 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002210:	2b04      	cmp	r3, #4
 8002212:	d107      	bne.n	8002224 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	681a      	ldr	r2, [r3, #0]
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002222:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002224:	2301      	movs	r3, #1
 8002226:	e016      	b.n	8002256 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	681a      	ldr	r2, [r3, #0]
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002236:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	2220      	movs	r2, #32
 800223c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	2200      	movs	r2, #0
 8002244:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	2200      	movs	r2, #0
 800224c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002250:	2300      	movs	r3, #0
 8002252:	e000      	b.n	8002256 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002254:	2302      	movs	r3, #2
  }
}
 8002256:	4618      	mov	r0, r3
 8002258:	3718      	adds	r7, #24
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}
 800225e:	bf00      	nop
 8002260:	00100002 	.word	0x00100002
 8002264:	ffff0000 	.word	0xffff0000

08002268 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b088      	sub	sp, #32
 800226c:	af02      	add	r7, sp, #8
 800226e:	60f8      	str	r0, [r7, #12]
 8002270:	4608      	mov	r0, r1
 8002272:	4611      	mov	r1, r2
 8002274:	461a      	mov	r2, r3
 8002276:	4603      	mov	r3, r0
 8002278:	817b      	strh	r3, [r7, #10]
 800227a:	460b      	mov	r3, r1
 800227c:	813b      	strh	r3, [r7, #8]
 800227e:	4613      	mov	r3, r2
 8002280:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	681a      	ldr	r2, [r3, #0]
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002290:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002294:	9300      	str	r3, [sp, #0]
 8002296:	6a3b      	ldr	r3, [r7, #32]
 8002298:	2200      	movs	r2, #0
 800229a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800229e:	68f8      	ldr	r0, [r7, #12]
 80022a0:	f000 f876 	bl	8002390 <I2C_WaitOnFlagUntilTimeout>
 80022a4:	4603      	mov	r3, r0
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d00c      	beq.n	80022c4 <I2C_RequestMemoryWrite+0x5c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d003      	beq.n	80022c0 <I2C_RequestMemoryWrite+0x58>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80022be:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80022c0:	2303      	movs	r3, #3
 80022c2:	e05f      	b.n	8002384 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80022c4:	897b      	ldrh	r3, [r7, #10]
 80022c6:	b2db      	uxtb	r3, r3
 80022c8:	461a      	mov	r2, r3
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80022d2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80022d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d6:	6a3a      	ldr	r2, [r7, #32]
 80022d8:	492c      	ldr	r1, [pc, #176]	; (800238c <I2C_RequestMemoryWrite+0x124>)
 80022da:	68f8      	ldr	r0, [r7, #12]
 80022dc:	f000 f8af 	bl	800243e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80022e0:	4603      	mov	r3, r0
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d001      	beq.n	80022ea <I2C_RequestMemoryWrite+0x82>
  {
    return HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
 80022e8:	e04c      	b.n	8002384 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022ea:	2300      	movs	r3, #0
 80022ec:	617b      	str	r3, [r7, #20]
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	695b      	ldr	r3, [r3, #20]
 80022f4:	617b      	str	r3, [r7, #20]
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	699b      	ldr	r3, [r3, #24]
 80022fc:	617b      	str	r3, [r7, #20]
 80022fe:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002300:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002302:	6a39      	ldr	r1, [r7, #32]
 8002304:	68f8      	ldr	r0, [r7, #12]
 8002306:	f000 f919 	bl	800253c <I2C_WaitOnTXEFlagUntilTimeout>
 800230a:	4603      	mov	r3, r0
 800230c:	2b00      	cmp	r3, #0
 800230e:	d00d      	beq.n	800232c <I2C_RequestMemoryWrite+0xc4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002314:	2b04      	cmp	r3, #4
 8002316:	d107      	bne.n	8002328 <I2C_RequestMemoryWrite+0xc0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	681a      	ldr	r2, [r3, #0]
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002326:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002328:	2301      	movs	r3, #1
 800232a:	e02b      	b.n	8002384 <I2C_RequestMemoryWrite+0x11c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800232c:	88fb      	ldrh	r3, [r7, #6]
 800232e:	2b01      	cmp	r3, #1
 8002330:	d105      	bne.n	800233e <I2C_RequestMemoryWrite+0xd6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002332:	893b      	ldrh	r3, [r7, #8]
 8002334:	b2da      	uxtb	r2, r3
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	611a      	str	r2, [r3, #16]
 800233c:	e021      	b.n	8002382 <I2C_RequestMemoryWrite+0x11a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800233e:	893b      	ldrh	r3, [r7, #8]
 8002340:	0a1b      	lsrs	r3, r3, #8
 8002342:	b29b      	uxth	r3, r3
 8002344:	b2da      	uxtb	r2, r3
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800234c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800234e:	6a39      	ldr	r1, [r7, #32]
 8002350:	68f8      	ldr	r0, [r7, #12]
 8002352:	f000 f8f3 	bl	800253c <I2C_WaitOnTXEFlagUntilTimeout>
 8002356:	4603      	mov	r3, r0
 8002358:	2b00      	cmp	r3, #0
 800235a:	d00d      	beq.n	8002378 <I2C_RequestMemoryWrite+0x110>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002360:	2b04      	cmp	r3, #4
 8002362:	d107      	bne.n	8002374 <I2C_RequestMemoryWrite+0x10c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	681a      	ldr	r2, [r3, #0]
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002372:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002374:	2301      	movs	r3, #1
 8002376:	e005      	b.n	8002384 <I2C_RequestMemoryWrite+0x11c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002378:	893b      	ldrh	r3, [r7, #8]
 800237a:	b2da      	uxtb	r2, r3
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002382:	2300      	movs	r3, #0
}
 8002384:	4618      	mov	r0, r3
 8002386:	3718      	adds	r7, #24
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}
 800238c:	00010002 	.word	0x00010002

08002390 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b084      	sub	sp, #16
 8002394:	af00      	add	r7, sp, #0
 8002396:	60f8      	str	r0, [r7, #12]
 8002398:	60b9      	str	r1, [r7, #8]
 800239a:	603b      	str	r3, [r7, #0]
 800239c:	4613      	mov	r3, r2
 800239e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80023a0:	e025      	b.n	80023ee <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023a8:	d021      	beq.n	80023ee <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023aa:	f7ff f9d3 	bl	8001754 <HAL_GetTick>
 80023ae:	4602      	mov	r2, r0
 80023b0:	69bb      	ldr	r3, [r7, #24]
 80023b2:	1ad3      	subs	r3, r2, r3
 80023b4:	683a      	ldr	r2, [r7, #0]
 80023b6:	429a      	cmp	r2, r3
 80023b8:	d302      	bcc.n	80023c0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d116      	bne.n	80023ee <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	2200      	movs	r2, #0
 80023c4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	2220      	movs	r2, #32
 80023ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	2200      	movs	r2, #0
 80023d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023da:	f043 0220 	orr.w	r2, r3, #32
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	2200      	movs	r2, #0
 80023e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	e023      	b.n	8002436 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80023ee:	68bb      	ldr	r3, [r7, #8]
 80023f0:	0c1b      	lsrs	r3, r3, #16
 80023f2:	b2db      	uxtb	r3, r3
 80023f4:	2b01      	cmp	r3, #1
 80023f6:	d10d      	bne.n	8002414 <I2C_WaitOnFlagUntilTimeout+0x84>
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	695b      	ldr	r3, [r3, #20]
 80023fe:	43da      	mvns	r2, r3
 8002400:	68bb      	ldr	r3, [r7, #8]
 8002402:	4013      	ands	r3, r2
 8002404:	b29b      	uxth	r3, r3
 8002406:	2b00      	cmp	r3, #0
 8002408:	bf0c      	ite	eq
 800240a:	2301      	moveq	r3, #1
 800240c:	2300      	movne	r3, #0
 800240e:	b2db      	uxtb	r3, r3
 8002410:	461a      	mov	r2, r3
 8002412:	e00c      	b.n	800242e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	699b      	ldr	r3, [r3, #24]
 800241a:	43da      	mvns	r2, r3
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	4013      	ands	r3, r2
 8002420:	b29b      	uxth	r3, r3
 8002422:	2b00      	cmp	r3, #0
 8002424:	bf0c      	ite	eq
 8002426:	2301      	moveq	r3, #1
 8002428:	2300      	movne	r3, #0
 800242a:	b2db      	uxtb	r3, r3
 800242c:	461a      	mov	r2, r3
 800242e:	79fb      	ldrb	r3, [r7, #7]
 8002430:	429a      	cmp	r2, r3
 8002432:	d0b6      	beq.n	80023a2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002434:	2300      	movs	r3, #0
}
 8002436:	4618      	mov	r0, r3
 8002438:	3710      	adds	r7, #16
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}

0800243e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800243e:	b580      	push	{r7, lr}
 8002440:	b084      	sub	sp, #16
 8002442:	af00      	add	r7, sp, #0
 8002444:	60f8      	str	r0, [r7, #12]
 8002446:	60b9      	str	r1, [r7, #8]
 8002448:	607a      	str	r2, [r7, #4]
 800244a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800244c:	e051      	b.n	80024f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	695b      	ldr	r3, [r3, #20]
 8002454:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002458:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800245c:	d123      	bne.n	80024a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	681a      	ldr	r2, [r3, #0]
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800246c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002476:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	2200      	movs	r2, #0
 800247c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	2220      	movs	r2, #32
 8002482:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	2200      	movs	r2, #0
 800248a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002492:	f043 0204 	orr.w	r2, r3, #4
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	2200      	movs	r2, #0
 800249e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80024a2:	2301      	movs	r3, #1
 80024a4:	e046      	b.n	8002534 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024ac:	d021      	beq.n	80024f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024ae:	f7ff f951 	bl	8001754 <HAL_GetTick>
 80024b2:	4602      	mov	r2, r0
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	1ad3      	subs	r3, r2, r3
 80024b8:	687a      	ldr	r2, [r7, #4]
 80024ba:	429a      	cmp	r2, r3
 80024bc:	d302      	bcc.n	80024c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d116      	bne.n	80024f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	2200      	movs	r2, #0
 80024c8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	2220      	movs	r2, #32
 80024ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	2200      	movs	r2, #0
 80024d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024de:	f043 0220 	orr.w	r2, r3, #32
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	2200      	movs	r2, #0
 80024ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	e020      	b.n	8002534 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80024f2:	68bb      	ldr	r3, [r7, #8]
 80024f4:	0c1b      	lsrs	r3, r3, #16
 80024f6:	b2db      	uxtb	r3, r3
 80024f8:	2b01      	cmp	r3, #1
 80024fa:	d10c      	bne.n	8002516 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	695b      	ldr	r3, [r3, #20]
 8002502:	43da      	mvns	r2, r3
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	4013      	ands	r3, r2
 8002508:	b29b      	uxth	r3, r3
 800250a:	2b00      	cmp	r3, #0
 800250c:	bf14      	ite	ne
 800250e:	2301      	movne	r3, #1
 8002510:	2300      	moveq	r3, #0
 8002512:	b2db      	uxtb	r3, r3
 8002514:	e00b      	b.n	800252e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	699b      	ldr	r3, [r3, #24]
 800251c:	43da      	mvns	r2, r3
 800251e:	68bb      	ldr	r3, [r7, #8]
 8002520:	4013      	ands	r3, r2
 8002522:	b29b      	uxth	r3, r3
 8002524:	2b00      	cmp	r3, #0
 8002526:	bf14      	ite	ne
 8002528:	2301      	movne	r3, #1
 800252a:	2300      	moveq	r3, #0
 800252c:	b2db      	uxtb	r3, r3
 800252e:	2b00      	cmp	r3, #0
 8002530:	d18d      	bne.n	800244e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002532:	2300      	movs	r3, #0
}
 8002534:	4618      	mov	r0, r3
 8002536:	3710      	adds	r7, #16
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}

0800253c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b084      	sub	sp, #16
 8002540:	af00      	add	r7, sp, #0
 8002542:	60f8      	str	r0, [r7, #12]
 8002544:	60b9      	str	r1, [r7, #8]
 8002546:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002548:	e02d      	b.n	80025a6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800254a:	68f8      	ldr	r0, [r7, #12]
 800254c:	f000 f878 	bl	8002640 <I2C_IsAcknowledgeFailed>
 8002550:	4603      	mov	r3, r0
 8002552:	2b00      	cmp	r3, #0
 8002554:	d001      	beq.n	800255a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	e02d      	b.n	80025b6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800255a:	68bb      	ldr	r3, [r7, #8]
 800255c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002560:	d021      	beq.n	80025a6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002562:	f7ff f8f7 	bl	8001754 <HAL_GetTick>
 8002566:	4602      	mov	r2, r0
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	1ad3      	subs	r3, r2, r3
 800256c:	68ba      	ldr	r2, [r7, #8]
 800256e:	429a      	cmp	r2, r3
 8002570:	d302      	bcc.n	8002578 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d116      	bne.n	80025a6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	2200      	movs	r2, #0
 800257c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	2220      	movs	r2, #32
 8002582:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	2200      	movs	r2, #0
 800258a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002592:	f043 0220 	orr.w	r2, r3, #32
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	2200      	movs	r2, #0
 800259e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	e007      	b.n	80025b6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	695b      	ldr	r3, [r3, #20]
 80025ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025b0:	2b80      	cmp	r3, #128	; 0x80
 80025b2:	d1ca      	bne.n	800254a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80025b4:	2300      	movs	r3, #0
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	3710      	adds	r7, #16
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}

080025be <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80025be:	b580      	push	{r7, lr}
 80025c0:	b084      	sub	sp, #16
 80025c2:	af00      	add	r7, sp, #0
 80025c4:	60f8      	str	r0, [r7, #12]
 80025c6:	60b9      	str	r1, [r7, #8]
 80025c8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80025ca:	e02d      	b.n	8002628 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80025cc:	68f8      	ldr	r0, [r7, #12]
 80025ce:	f000 f837 	bl	8002640 <I2C_IsAcknowledgeFailed>
 80025d2:	4603      	mov	r3, r0
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d001      	beq.n	80025dc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80025d8:	2301      	movs	r3, #1
 80025da:	e02d      	b.n	8002638 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025dc:	68bb      	ldr	r3, [r7, #8]
 80025de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025e2:	d021      	beq.n	8002628 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025e4:	f7ff f8b6 	bl	8001754 <HAL_GetTick>
 80025e8:	4602      	mov	r2, r0
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	1ad3      	subs	r3, r2, r3
 80025ee:	68ba      	ldr	r2, [r7, #8]
 80025f0:	429a      	cmp	r2, r3
 80025f2:	d302      	bcc.n	80025fa <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d116      	bne.n	8002628 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	2200      	movs	r2, #0
 80025fe:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	2220      	movs	r2, #32
 8002604:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	2200      	movs	r2, #0
 800260c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002614:	f043 0220 	orr.w	r2, r3, #32
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	2200      	movs	r2, #0
 8002620:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002624:	2301      	movs	r3, #1
 8002626:	e007      	b.n	8002638 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	695b      	ldr	r3, [r3, #20]
 800262e:	f003 0304 	and.w	r3, r3, #4
 8002632:	2b04      	cmp	r3, #4
 8002634:	d1ca      	bne.n	80025cc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002636:	2300      	movs	r3, #0
}
 8002638:	4618      	mov	r0, r3
 800263a:	3710      	adds	r7, #16
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}

08002640 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002640:	b480      	push	{r7}
 8002642:	b083      	sub	sp, #12
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	695b      	ldr	r3, [r3, #20]
 800264e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002652:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002656:	d11b      	bne.n	8002690 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002660:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2200      	movs	r2, #0
 8002666:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2220      	movs	r2, #32
 800266c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2200      	movs	r2, #0
 8002674:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267c:	f043 0204 	orr.w	r2, r3, #4
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2200      	movs	r2, #0
 8002688:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800268c:	2301      	movs	r3, #1
 800268e:	e000      	b.n	8002692 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002690:	2300      	movs	r3, #0
}
 8002692:	4618      	mov	r0, r3
 8002694:	370c      	adds	r7, #12
 8002696:	46bd      	mov	sp, r7
 8002698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269c:	4770      	bx	lr
	...

080026a0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b086      	sub	sp, #24
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d101      	bne.n	80026b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	e25e      	b.n	8002b70 <HAL_RCC_OscConfig+0x4d0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f003 0301 	and.w	r3, r3, #1
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d075      	beq.n	80027aa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80026be:	4b88      	ldr	r3, [pc, #544]	; (80028e0 <HAL_RCC_OscConfig+0x240>)
 80026c0:	689b      	ldr	r3, [r3, #8]
 80026c2:	f003 030c 	and.w	r3, r3, #12
 80026c6:	2b04      	cmp	r3, #4
 80026c8:	d00c      	beq.n	80026e4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026ca:	4b85      	ldr	r3, [pc, #532]	; (80028e0 <HAL_RCC_OscConfig+0x240>)
 80026cc:	689b      	ldr	r3, [r3, #8]
 80026ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80026d2:	2b08      	cmp	r3, #8
 80026d4:	d112      	bne.n	80026fc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026d6:	4b82      	ldr	r3, [pc, #520]	; (80028e0 <HAL_RCC_OscConfig+0x240>)
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80026e2:	d10b      	bne.n	80026fc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026e4:	4b7e      	ldr	r3, [pc, #504]	; (80028e0 <HAL_RCC_OscConfig+0x240>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d05b      	beq.n	80027a8 <HAL_RCC_OscConfig+0x108>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d157      	bne.n	80027a8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80026f8:	2301      	movs	r3, #1
 80026fa:	e239      	b.n	8002b70 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002704:	d106      	bne.n	8002714 <HAL_RCC_OscConfig+0x74>
 8002706:	4b76      	ldr	r3, [pc, #472]	; (80028e0 <HAL_RCC_OscConfig+0x240>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a75      	ldr	r2, [pc, #468]	; (80028e0 <HAL_RCC_OscConfig+0x240>)
 800270c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002710:	6013      	str	r3, [r2, #0]
 8002712:	e01d      	b.n	8002750 <HAL_RCC_OscConfig+0xb0>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800271c:	d10c      	bne.n	8002738 <HAL_RCC_OscConfig+0x98>
 800271e:	4b70      	ldr	r3, [pc, #448]	; (80028e0 <HAL_RCC_OscConfig+0x240>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4a6f      	ldr	r2, [pc, #444]	; (80028e0 <HAL_RCC_OscConfig+0x240>)
 8002724:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002728:	6013      	str	r3, [r2, #0]
 800272a:	4b6d      	ldr	r3, [pc, #436]	; (80028e0 <HAL_RCC_OscConfig+0x240>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a6c      	ldr	r2, [pc, #432]	; (80028e0 <HAL_RCC_OscConfig+0x240>)
 8002730:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002734:	6013      	str	r3, [r2, #0]
 8002736:	e00b      	b.n	8002750 <HAL_RCC_OscConfig+0xb0>
 8002738:	4b69      	ldr	r3, [pc, #420]	; (80028e0 <HAL_RCC_OscConfig+0x240>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a68      	ldr	r2, [pc, #416]	; (80028e0 <HAL_RCC_OscConfig+0x240>)
 800273e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002742:	6013      	str	r3, [r2, #0]
 8002744:	4b66      	ldr	r3, [pc, #408]	; (80028e0 <HAL_RCC_OscConfig+0x240>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a65      	ldr	r2, [pc, #404]	; (80028e0 <HAL_RCC_OscConfig+0x240>)
 800274a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800274e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d013      	beq.n	8002780 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002758:	f7fe fffc 	bl	8001754 <HAL_GetTick>
 800275c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800275e:	e008      	b.n	8002772 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002760:	f7fe fff8 	bl	8001754 <HAL_GetTick>
 8002764:	4602      	mov	r2, r0
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	1ad3      	subs	r3, r2, r3
 800276a:	2b64      	cmp	r3, #100	; 0x64
 800276c:	d901      	bls.n	8002772 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800276e:	2303      	movs	r3, #3
 8002770:	e1fe      	b.n	8002b70 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002772:	4b5b      	ldr	r3, [pc, #364]	; (80028e0 <HAL_RCC_OscConfig+0x240>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800277a:	2b00      	cmp	r3, #0
 800277c:	d0f0      	beq.n	8002760 <HAL_RCC_OscConfig+0xc0>
 800277e:	e014      	b.n	80027aa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002780:	f7fe ffe8 	bl	8001754 <HAL_GetTick>
 8002784:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002786:	e008      	b.n	800279a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002788:	f7fe ffe4 	bl	8001754 <HAL_GetTick>
 800278c:	4602      	mov	r2, r0
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	1ad3      	subs	r3, r2, r3
 8002792:	2b64      	cmp	r3, #100	; 0x64
 8002794:	d901      	bls.n	800279a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002796:	2303      	movs	r3, #3
 8002798:	e1ea      	b.n	8002b70 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800279a:	4b51      	ldr	r3, [pc, #324]	; (80028e0 <HAL_RCC_OscConfig+0x240>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d1f0      	bne.n	8002788 <HAL_RCC_OscConfig+0xe8>
 80027a6:	e000      	b.n	80027aa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f003 0302 	and.w	r3, r3, #2
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d063      	beq.n	800287e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80027b6:	4b4a      	ldr	r3, [pc, #296]	; (80028e0 <HAL_RCC_OscConfig+0x240>)
 80027b8:	689b      	ldr	r3, [r3, #8]
 80027ba:	f003 030c 	and.w	r3, r3, #12
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d00b      	beq.n	80027da <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027c2:	4b47      	ldr	r3, [pc, #284]	; (80028e0 <HAL_RCC_OscConfig+0x240>)
 80027c4:	689b      	ldr	r3, [r3, #8]
 80027c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80027ca:	2b08      	cmp	r3, #8
 80027cc:	d11c      	bne.n	8002808 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027ce:	4b44      	ldr	r3, [pc, #272]	; (80028e0 <HAL_RCC_OscConfig+0x240>)
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d116      	bne.n	8002808 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027da:	4b41      	ldr	r3, [pc, #260]	; (80028e0 <HAL_RCC_OscConfig+0x240>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f003 0302 	and.w	r3, r3, #2
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d005      	beq.n	80027f2 <HAL_RCC_OscConfig+0x152>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	68db      	ldr	r3, [r3, #12]
 80027ea:	2b01      	cmp	r3, #1
 80027ec:	d001      	beq.n	80027f2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	e1be      	b.n	8002b70 <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027f2:	4b3b      	ldr	r3, [pc, #236]	; (80028e0 <HAL_RCC_OscConfig+0x240>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	691b      	ldr	r3, [r3, #16]
 80027fe:	00db      	lsls	r3, r3, #3
 8002800:	4937      	ldr	r1, [pc, #220]	; (80028e0 <HAL_RCC_OscConfig+0x240>)
 8002802:	4313      	orrs	r3, r2
 8002804:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002806:	e03a      	b.n	800287e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	68db      	ldr	r3, [r3, #12]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d020      	beq.n	8002852 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002810:	4b34      	ldr	r3, [pc, #208]	; (80028e4 <HAL_RCC_OscConfig+0x244>)
 8002812:	2201      	movs	r2, #1
 8002814:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002816:	f7fe ff9d 	bl	8001754 <HAL_GetTick>
 800281a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800281c:	e008      	b.n	8002830 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800281e:	f7fe ff99 	bl	8001754 <HAL_GetTick>
 8002822:	4602      	mov	r2, r0
 8002824:	693b      	ldr	r3, [r7, #16]
 8002826:	1ad3      	subs	r3, r2, r3
 8002828:	2b02      	cmp	r3, #2
 800282a:	d901      	bls.n	8002830 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800282c:	2303      	movs	r3, #3
 800282e:	e19f      	b.n	8002b70 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002830:	4b2b      	ldr	r3, [pc, #172]	; (80028e0 <HAL_RCC_OscConfig+0x240>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f003 0302 	and.w	r3, r3, #2
 8002838:	2b00      	cmp	r3, #0
 800283a:	d0f0      	beq.n	800281e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800283c:	4b28      	ldr	r3, [pc, #160]	; (80028e0 <HAL_RCC_OscConfig+0x240>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	691b      	ldr	r3, [r3, #16]
 8002848:	00db      	lsls	r3, r3, #3
 800284a:	4925      	ldr	r1, [pc, #148]	; (80028e0 <HAL_RCC_OscConfig+0x240>)
 800284c:	4313      	orrs	r3, r2
 800284e:	600b      	str	r3, [r1, #0]
 8002850:	e015      	b.n	800287e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002852:	4b24      	ldr	r3, [pc, #144]	; (80028e4 <HAL_RCC_OscConfig+0x244>)
 8002854:	2200      	movs	r2, #0
 8002856:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002858:	f7fe ff7c 	bl	8001754 <HAL_GetTick>
 800285c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800285e:	e008      	b.n	8002872 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002860:	f7fe ff78 	bl	8001754 <HAL_GetTick>
 8002864:	4602      	mov	r2, r0
 8002866:	693b      	ldr	r3, [r7, #16]
 8002868:	1ad3      	subs	r3, r2, r3
 800286a:	2b02      	cmp	r3, #2
 800286c:	d901      	bls.n	8002872 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800286e:	2303      	movs	r3, #3
 8002870:	e17e      	b.n	8002b70 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002872:	4b1b      	ldr	r3, [pc, #108]	; (80028e0 <HAL_RCC_OscConfig+0x240>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f003 0302 	and.w	r3, r3, #2
 800287a:	2b00      	cmp	r3, #0
 800287c:	d1f0      	bne.n	8002860 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f003 0308 	and.w	r3, r3, #8
 8002886:	2b00      	cmp	r3, #0
 8002888:	d036      	beq.n	80028f8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	695b      	ldr	r3, [r3, #20]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d016      	beq.n	80028c0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002892:	4b15      	ldr	r3, [pc, #84]	; (80028e8 <HAL_RCC_OscConfig+0x248>)
 8002894:	2201      	movs	r2, #1
 8002896:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002898:	f7fe ff5c 	bl	8001754 <HAL_GetTick>
 800289c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800289e:	e008      	b.n	80028b2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028a0:	f7fe ff58 	bl	8001754 <HAL_GetTick>
 80028a4:	4602      	mov	r2, r0
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	1ad3      	subs	r3, r2, r3
 80028aa:	2b02      	cmp	r3, #2
 80028ac:	d901      	bls.n	80028b2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80028ae:	2303      	movs	r3, #3
 80028b0:	e15e      	b.n	8002b70 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028b2:	4b0b      	ldr	r3, [pc, #44]	; (80028e0 <HAL_RCC_OscConfig+0x240>)
 80028b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028b6:	f003 0302 	and.w	r3, r3, #2
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d0f0      	beq.n	80028a0 <HAL_RCC_OscConfig+0x200>
 80028be:	e01b      	b.n	80028f8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028c0:	4b09      	ldr	r3, [pc, #36]	; (80028e8 <HAL_RCC_OscConfig+0x248>)
 80028c2:	2200      	movs	r2, #0
 80028c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028c6:	f7fe ff45 	bl	8001754 <HAL_GetTick>
 80028ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028cc:	e00e      	b.n	80028ec <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028ce:	f7fe ff41 	bl	8001754 <HAL_GetTick>
 80028d2:	4602      	mov	r2, r0
 80028d4:	693b      	ldr	r3, [r7, #16]
 80028d6:	1ad3      	subs	r3, r2, r3
 80028d8:	2b02      	cmp	r3, #2
 80028da:	d907      	bls.n	80028ec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80028dc:	2303      	movs	r3, #3
 80028de:	e147      	b.n	8002b70 <HAL_RCC_OscConfig+0x4d0>
 80028e0:	40023800 	.word	0x40023800
 80028e4:	42470000 	.word	0x42470000
 80028e8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028ec:	4b88      	ldr	r3, [pc, #544]	; (8002b10 <HAL_RCC_OscConfig+0x470>)
 80028ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028f0:	f003 0302 	and.w	r3, r3, #2
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d1ea      	bne.n	80028ce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f003 0304 	and.w	r3, r3, #4
 8002900:	2b00      	cmp	r3, #0
 8002902:	f000 8097 	beq.w	8002a34 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002906:	2300      	movs	r3, #0
 8002908:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800290a:	4b81      	ldr	r3, [pc, #516]	; (8002b10 <HAL_RCC_OscConfig+0x470>)
 800290c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800290e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002912:	2b00      	cmp	r3, #0
 8002914:	d10f      	bne.n	8002936 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002916:	2300      	movs	r3, #0
 8002918:	60bb      	str	r3, [r7, #8]
 800291a:	4b7d      	ldr	r3, [pc, #500]	; (8002b10 <HAL_RCC_OscConfig+0x470>)
 800291c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800291e:	4a7c      	ldr	r2, [pc, #496]	; (8002b10 <HAL_RCC_OscConfig+0x470>)
 8002920:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002924:	6413      	str	r3, [r2, #64]	; 0x40
 8002926:	4b7a      	ldr	r3, [pc, #488]	; (8002b10 <HAL_RCC_OscConfig+0x470>)
 8002928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800292a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800292e:	60bb      	str	r3, [r7, #8]
 8002930:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002932:	2301      	movs	r3, #1
 8002934:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002936:	4b77      	ldr	r3, [pc, #476]	; (8002b14 <HAL_RCC_OscConfig+0x474>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800293e:	2b00      	cmp	r3, #0
 8002940:	d118      	bne.n	8002974 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002942:	4b74      	ldr	r3, [pc, #464]	; (8002b14 <HAL_RCC_OscConfig+0x474>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a73      	ldr	r2, [pc, #460]	; (8002b14 <HAL_RCC_OscConfig+0x474>)
 8002948:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800294c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800294e:	f7fe ff01 	bl	8001754 <HAL_GetTick>
 8002952:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002954:	e008      	b.n	8002968 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002956:	f7fe fefd 	bl	8001754 <HAL_GetTick>
 800295a:	4602      	mov	r2, r0
 800295c:	693b      	ldr	r3, [r7, #16]
 800295e:	1ad3      	subs	r3, r2, r3
 8002960:	2b02      	cmp	r3, #2
 8002962:	d901      	bls.n	8002968 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002964:	2303      	movs	r3, #3
 8002966:	e103      	b.n	8002b70 <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002968:	4b6a      	ldr	r3, [pc, #424]	; (8002b14 <HAL_RCC_OscConfig+0x474>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002970:	2b00      	cmp	r3, #0
 8002972:	d0f0      	beq.n	8002956 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	689b      	ldr	r3, [r3, #8]
 8002978:	2b01      	cmp	r3, #1
 800297a:	d106      	bne.n	800298a <HAL_RCC_OscConfig+0x2ea>
 800297c:	4b64      	ldr	r3, [pc, #400]	; (8002b10 <HAL_RCC_OscConfig+0x470>)
 800297e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002980:	4a63      	ldr	r2, [pc, #396]	; (8002b10 <HAL_RCC_OscConfig+0x470>)
 8002982:	f043 0301 	orr.w	r3, r3, #1
 8002986:	6713      	str	r3, [r2, #112]	; 0x70
 8002988:	e01c      	b.n	80029c4 <HAL_RCC_OscConfig+0x324>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	2b05      	cmp	r3, #5
 8002990:	d10c      	bne.n	80029ac <HAL_RCC_OscConfig+0x30c>
 8002992:	4b5f      	ldr	r3, [pc, #380]	; (8002b10 <HAL_RCC_OscConfig+0x470>)
 8002994:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002996:	4a5e      	ldr	r2, [pc, #376]	; (8002b10 <HAL_RCC_OscConfig+0x470>)
 8002998:	f043 0304 	orr.w	r3, r3, #4
 800299c:	6713      	str	r3, [r2, #112]	; 0x70
 800299e:	4b5c      	ldr	r3, [pc, #368]	; (8002b10 <HAL_RCC_OscConfig+0x470>)
 80029a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029a2:	4a5b      	ldr	r2, [pc, #364]	; (8002b10 <HAL_RCC_OscConfig+0x470>)
 80029a4:	f043 0301 	orr.w	r3, r3, #1
 80029a8:	6713      	str	r3, [r2, #112]	; 0x70
 80029aa:	e00b      	b.n	80029c4 <HAL_RCC_OscConfig+0x324>
 80029ac:	4b58      	ldr	r3, [pc, #352]	; (8002b10 <HAL_RCC_OscConfig+0x470>)
 80029ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029b0:	4a57      	ldr	r2, [pc, #348]	; (8002b10 <HAL_RCC_OscConfig+0x470>)
 80029b2:	f023 0301 	bic.w	r3, r3, #1
 80029b6:	6713      	str	r3, [r2, #112]	; 0x70
 80029b8:	4b55      	ldr	r3, [pc, #340]	; (8002b10 <HAL_RCC_OscConfig+0x470>)
 80029ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029bc:	4a54      	ldr	r2, [pc, #336]	; (8002b10 <HAL_RCC_OscConfig+0x470>)
 80029be:	f023 0304 	bic.w	r3, r3, #4
 80029c2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	689b      	ldr	r3, [r3, #8]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d015      	beq.n	80029f8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029cc:	f7fe fec2 	bl	8001754 <HAL_GetTick>
 80029d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029d2:	e00a      	b.n	80029ea <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029d4:	f7fe febe 	bl	8001754 <HAL_GetTick>
 80029d8:	4602      	mov	r2, r0
 80029da:	693b      	ldr	r3, [r7, #16]
 80029dc:	1ad3      	subs	r3, r2, r3
 80029de:	f241 3288 	movw	r2, #5000	; 0x1388
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d901      	bls.n	80029ea <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80029e6:	2303      	movs	r3, #3
 80029e8:	e0c2      	b.n	8002b70 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029ea:	4b49      	ldr	r3, [pc, #292]	; (8002b10 <HAL_RCC_OscConfig+0x470>)
 80029ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029ee:	f003 0302 	and.w	r3, r3, #2
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d0ee      	beq.n	80029d4 <HAL_RCC_OscConfig+0x334>
 80029f6:	e014      	b.n	8002a22 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029f8:	f7fe feac 	bl	8001754 <HAL_GetTick>
 80029fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029fe:	e00a      	b.n	8002a16 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a00:	f7fe fea8 	bl	8001754 <HAL_GetTick>
 8002a04:	4602      	mov	r2, r0
 8002a06:	693b      	ldr	r3, [r7, #16]
 8002a08:	1ad3      	subs	r3, r2, r3
 8002a0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d901      	bls.n	8002a16 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002a12:	2303      	movs	r3, #3
 8002a14:	e0ac      	b.n	8002b70 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a16:	4b3e      	ldr	r3, [pc, #248]	; (8002b10 <HAL_RCC_OscConfig+0x470>)
 8002a18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a1a:	f003 0302 	and.w	r3, r3, #2
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d1ee      	bne.n	8002a00 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a22:	7dfb      	ldrb	r3, [r7, #23]
 8002a24:	2b01      	cmp	r3, #1
 8002a26:	d105      	bne.n	8002a34 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a28:	4b39      	ldr	r3, [pc, #228]	; (8002b10 <HAL_RCC_OscConfig+0x470>)
 8002a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a2c:	4a38      	ldr	r2, [pc, #224]	; (8002b10 <HAL_RCC_OscConfig+0x470>)
 8002a2e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a32:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	699b      	ldr	r3, [r3, #24]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	f000 8098 	beq.w	8002b6e <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002a3e:	4b34      	ldr	r3, [pc, #208]	; (8002b10 <HAL_RCC_OscConfig+0x470>)
 8002a40:	689b      	ldr	r3, [r3, #8]
 8002a42:	f003 030c 	and.w	r3, r3, #12
 8002a46:	2b08      	cmp	r3, #8
 8002a48:	d05c      	beq.n	8002b04 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	699b      	ldr	r3, [r3, #24]
 8002a4e:	2b02      	cmp	r3, #2
 8002a50:	d141      	bne.n	8002ad6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a52:	4b31      	ldr	r3, [pc, #196]	; (8002b18 <HAL_RCC_OscConfig+0x478>)
 8002a54:	2200      	movs	r2, #0
 8002a56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a58:	f7fe fe7c 	bl	8001754 <HAL_GetTick>
 8002a5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a5e:	e008      	b.n	8002a72 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a60:	f7fe fe78 	bl	8001754 <HAL_GetTick>
 8002a64:	4602      	mov	r2, r0
 8002a66:	693b      	ldr	r3, [r7, #16]
 8002a68:	1ad3      	subs	r3, r2, r3
 8002a6a:	2b02      	cmp	r3, #2
 8002a6c:	d901      	bls.n	8002a72 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002a6e:	2303      	movs	r3, #3
 8002a70:	e07e      	b.n	8002b70 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a72:	4b27      	ldr	r3, [pc, #156]	; (8002b10 <HAL_RCC_OscConfig+0x470>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d1f0      	bne.n	8002a60 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	69da      	ldr	r2, [r3, #28]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6a1b      	ldr	r3, [r3, #32]
 8002a86:	431a      	orrs	r2, r3
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a8c:	019b      	lsls	r3, r3, #6
 8002a8e:	431a      	orrs	r2, r3
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a94:	085b      	lsrs	r3, r3, #1
 8002a96:	3b01      	subs	r3, #1
 8002a98:	041b      	lsls	r3, r3, #16
 8002a9a:	431a      	orrs	r2, r3
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aa0:	061b      	lsls	r3, r3, #24
 8002aa2:	491b      	ldr	r1, [pc, #108]	; (8002b10 <HAL_RCC_OscConfig+0x470>)
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002aa8:	4b1b      	ldr	r3, [pc, #108]	; (8002b18 <HAL_RCC_OscConfig+0x478>)
 8002aaa:	2201      	movs	r2, #1
 8002aac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aae:	f7fe fe51 	bl	8001754 <HAL_GetTick>
 8002ab2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ab4:	e008      	b.n	8002ac8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ab6:	f7fe fe4d 	bl	8001754 <HAL_GetTick>
 8002aba:	4602      	mov	r2, r0
 8002abc:	693b      	ldr	r3, [r7, #16]
 8002abe:	1ad3      	subs	r3, r2, r3
 8002ac0:	2b02      	cmp	r3, #2
 8002ac2:	d901      	bls.n	8002ac8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002ac4:	2303      	movs	r3, #3
 8002ac6:	e053      	b.n	8002b70 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ac8:	4b11      	ldr	r3, [pc, #68]	; (8002b10 <HAL_RCC_OscConfig+0x470>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d0f0      	beq.n	8002ab6 <HAL_RCC_OscConfig+0x416>
 8002ad4:	e04b      	b.n	8002b6e <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ad6:	4b10      	ldr	r3, [pc, #64]	; (8002b18 <HAL_RCC_OscConfig+0x478>)
 8002ad8:	2200      	movs	r2, #0
 8002ada:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002adc:	f7fe fe3a 	bl	8001754 <HAL_GetTick>
 8002ae0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ae2:	e008      	b.n	8002af6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ae4:	f7fe fe36 	bl	8001754 <HAL_GetTick>
 8002ae8:	4602      	mov	r2, r0
 8002aea:	693b      	ldr	r3, [r7, #16]
 8002aec:	1ad3      	subs	r3, r2, r3
 8002aee:	2b02      	cmp	r3, #2
 8002af0:	d901      	bls.n	8002af6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002af2:	2303      	movs	r3, #3
 8002af4:	e03c      	b.n	8002b70 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002af6:	4b06      	ldr	r3, [pc, #24]	; (8002b10 <HAL_RCC_OscConfig+0x470>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d1f0      	bne.n	8002ae4 <HAL_RCC_OscConfig+0x444>
 8002b02:	e034      	b.n	8002b6e <HAL_RCC_OscConfig+0x4ce>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	699b      	ldr	r3, [r3, #24]
 8002b08:	2b01      	cmp	r3, #1
 8002b0a:	d107      	bne.n	8002b1c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	e02f      	b.n	8002b70 <HAL_RCC_OscConfig+0x4d0>
 8002b10:	40023800 	.word	0x40023800
 8002b14:	40007000 	.word	0x40007000
 8002b18:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002b1c:	4b16      	ldr	r3, [pc, #88]	; (8002b78 <HAL_RCC_OscConfig+0x4d8>)
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	69db      	ldr	r3, [r3, #28]
 8002b2c:	429a      	cmp	r2, r3
 8002b2e:	d11c      	bne.n	8002b6a <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b3a:	429a      	cmp	r2, r3
 8002b3c:	d115      	bne.n	8002b6a <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002b3e:	68fa      	ldr	r2, [r7, #12]
 8002b40:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002b44:	4013      	ands	r3, r2
 8002b46:	687a      	ldr	r2, [r7, #4]
 8002b48:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d10d      	bne.n	8002b6a <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002b58:	429a      	cmp	r2, r3
 8002b5a:	d106      	bne.n	8002b6a <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002b66:	429a      	cmp	r2, r3
 8002b68:	d001      	beq.n	8002b6e <HAL_RCC_OscConfig+0x4ce>
        {
          return HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	e000      	b.n	8002b70 <HAL_RCC_OscConfig+0x4d0>
        }
      }
    }
  }
  return HAL_OK;
 8002b6e:	2300      	movs	r3, #0
}
 8002b70:	4618      	mov	r0, r3
 8002b72:	3718      	adds	r7, #24
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bd80      	pop	{r7, pc}
 8002b78:	40023800 	.word	0x40023800

08002b7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b084      	sub	sp, #16
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
 8002b84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d101      	bne.n	8002b90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	e0cc      	b.n	8002d2a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b90:	4b68      	ldr	r3, [pc, #416]	; (8002d34 <HAL_RCC_ClockConfig+0x1b8>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f003 030f 	and.w	r3, r3, #15
 8002b98:	683a      	ldr	r2, [r7, #0]
 8002b9a:	429a      	cmp	r2, r3
 8002b9c:	d90c      	bls.n	8002bb8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b9e:	4b65      	ldr	r3, [pc, #404]	; (8002d34 <HAL_RCC_ClockConfig+0x1b8>)
 8002ba0:	683a      	ldr	r2, [r7, #0]
 8002ba2:	b2d2      	uxtb	r2, r2
 8002ba4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ba6:	4b63      	ldr	r3, [pc, #396]	; (8002d34 <HAL_RCC_ClockConfig+0x1b8>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f003 030f 	and.w	r3, r3, #15
 8002bae:	683a      	ldr	r2, [r7, #0]
 8002bb0:	429a      	cmp	r2, r3
 8002bb2:	d001      	beq.n	8002bb8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	e0b8      	b.n	8002d2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f003 0302 	and.w	r3, r3, #2
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d020      	beq.n	8002c06 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f003 0304 	and.w	r3, r3, #4
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d005      	beq.n	8002bdc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002bd0:	4b59      	ldr	r3, [pc, #356]	; (8002d38 <HAL_RCC_ClockConfig+0x1bc>)
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	4a58      	ldr	r2, [pc, #352]	; (8002d38 <HAL_RCC_ClockConfig+0x1bc>)
 8002bd6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002bda:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f003 0308 	and.w	r3, r3, #8
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d005      	beq.n	8002bf4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002be8:	4b53      	ldr	r3, [pc, #332]	; (8002d38 <HAL_RCC_ClockConfig+0x1bc>)
 8002bea:	689b      	ldr	r3, [r3, #8]
 8002bec:	4a52      	ldr	r2, [pc, #328]	; (8002d38 <HAL_RCC_ClockConfig+0x1bc>)
 8002bee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002bf2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bf4:	4b50      	ldr	r3, [pc, #320]	; (8002d38 <HAL_RCC_ClockConfig+0x1bc>)
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	689b      	ldr	r3, [r3, #8]
 8002c00:	494d      	ldr	r1, [pc, #308]	; (8002d38 <HAL_RCC_ClockConfig+0x1bc>)
 8002c02:	4313      	orrs	r3, r2
 8002c04:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f003 0301 	and.w	r3, r3, #1
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d044      	beq.n	8002c9c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	2b01      	cmp	r3, #1
 8002c18:	d107      	bne.n	8002c2a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c1a:	4b47      	ldr	r3, [pc, #284]	; (8002d38 <HAL_RCC_ClockConfig+0x1bc>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d119      	bne.n	8002c5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	e07f      	b.n	8002d2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	2b02      	cmp	r3, #2
 8002c30:	d003      	beq.n	8002c3a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c36:	2b03      	cmp	r3, #3
 8002c38:	d107      	bne.n	8002c4a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c3a:	4b3f      	ldr	r3, [pc, #252]	; (8002d38 <HAL_RCC_ClockConfig+0x1bc>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d109      	bne.n	8002c5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	e06f      	b.n	8002d2a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c4a:	4b3b      	ldr	r3, [pc, #236]	; (8002d38 <HAL_RCC_ClockConfig+0x1bc>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f003 0302 	and.w	r3, r3, #2
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d101      	bne.n	8002c5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	e067      	b.n	8002d2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c5a:	4b37      	ldr	r3, [pc, #220]	; (8002d38 <HAL_RCC_ClockConfig+0x1bc>)
 8002c5c:	689b      	ldr	r3, [r3, #8]
 8002c5e:	f023 0203 	bic.w	r2, r3, #3
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	4934      	ldr	r1, [pc, #208]	; (8002d38 <HAL_RCC_ClockConfig+0x1bc>)
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c6c:	f7fe fd72 	bl	8001754 <HAL_GetTick>
 8002c70:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c72:	e00a      	b.n	8002c8a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c74:	f7fe fd6e 	bl	8001754 <HAL_GetTick>
 8002c78:	4602      	mov	r2, r0
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	1ad3      	subs	r3, r2, r3
 8002c7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d901      	bls.n	8002c8a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c86:	2303      	movs	r3, #3
 8002c88:	e04f      	b.n	8002d2a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c8a:	4b2b      	ldr	r3, [pc, #172]	; (8002d38 <HAL_RCC_ClockConfig+0x1bc>)
 8002c8c:	689b      	ldr	r3, [r3, #8]
 8002c8e:	f003 020c 	and.w	r2, r3, #12
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	009b      	lsls	r3, r3, #2
 8002c98:	429a      	cmp	r2, r3
 8002c9a:	d1eb      	bne.n	8002c74 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c9c:	4b25      	ldr	r3, [pc, #148]	; (8002d34 <HAL_RCC_ClockConfig+0x1b8>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f003 030f 	and.w	r3, r3, #15
 8002ca4:	683a      	ldr	r2, [r7, #0]
 8002ca6:	429a      	cmp	r2, r3
 8002ca8:	d20c      	bcs.n	8002cc4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002caa:	4b22      	ldr	r3, [pc, #136]	; (8002d34 <HAL_RCC_ClockConfig+0x1b8>)
 8002cac:	683a      	ldr	r2, [r7, #0]
 8002cae:	b2d2      	uxtb	r2, r2
 8002cb0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cb2:	4b20      	ldr	r3, [pc, #128]	; (8002d34 <HAL_RCC_ClockConfig+0x1b8>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f003 030f 	and.w	r3, r3, #15
 8002cba:	683a      	ldr	r2, [r7, #0]
 8002cbc:	429a      	cmp	r2, r3
 8002cbe:	d001      	beq.n	8002cc4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	e032      	b.n	8002d2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f003 0304 	and.w	r3, r3, #4
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d008      	beq.n	8002ce2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002cd0:	4b19      	ldr	r3, [pc, #100]	; (8002d38 <HAL_RCC_ClockConfig+0x1bc>)
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	68db      	ldr	r3, [r3, #12]
 8002cdc:	4916      	ldr	r1, [pc, #88]	; (8002d38 <HAL_RCC_ClockConfig+0x1bc>)
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f003 0308 	and.w	r3, r3, #8
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d009      	beq.n	8002d02 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002cee:	4b12      	ldr	r3, [pc, #72]	; (8002d38 <HAL_RCC_ClockConfig+0x1bc>)
 8002cf0:	689b      	ldr	r3, [r3, #8]
 8002cf2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	691b      	ldr	r3, [r3, #16]
 8002cfa:	00db      	lsls	r3, r3, #3
 8002cfc:	490e      	ldr	r1, [pc, #56]	; (8002d38 <HAL_RCC_ClockConfig+0x1bc>)
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002d02:	f000 f821 	bl	8002d48 <HAL_RCC_GetSysClockFreq>
 8002d06:	4602      	mov	r2, r0
 8002d08:	4b0b      	ldr	r3, [pc, #44]	; (8002d38 <HAL_RCC_ClockConfig+0x1bc>)
 8002d0a:	689b      	ldr	r3, [r3, #8]
 8002d0c:	091b      	lsrs	r3, r3, #4
 8002d0e:	f003 030f 	and.w	r3, r3, #15
 8002d12:	490a      	ldr	r1, [pc, #40]	; (8002d3c <HAL_RCC_ClockConfig+0x1c0>)
 8002d14:	5ccb      	ldrb	r3, [r1, r3]
 8002d16:	fa22 f303 	lsr.w	r3, r2, r3
 8002d1a:	4a09      	ldr	r2, [pc, #36]	; (8002d40 <HAL_RCC_ClockConfig+0x1c4>)
 8002d1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002d1e:	4b09      	ldr	r3, [pc, #36]	; (8002d44 <HAL_RCC_ClockConfig+0x1c8>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4618      	mov	r0, r3
 8002d24:	f7fe fcd2 	bl	80016cc <HAL_InitTick>

  return HAL_OK;
 8002d28:	2300      	movs	r3, #0
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	3710      	adds	r7, #16
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}
 8002d32:	bf00      	nop
 8002d34:	40023c00 	.word	0x40023c00
 8002d38:	40023800 	.word	0x40023800
 8002d3c:	080060d8 	.word	0x080060d8
 8002d40:	20000070 	.word	0x20000070
 8002d44:	20000074 	.word	0x20000074

08002d48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d4c:	b090      	sub	sp, #64	; 0x40
 8002d4e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002d50:	2300      	movs	r3, #0
 8002d52:	637b      	str	r3, [r7, #52]	; 0x34
 8002d54:	2300      	movs	r3, #0
 8002d56:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d58:	2300      	movs	r3, #0
 8002d5a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d60:	4b59      	ldr	r3, [pc, #356]	; (8002ec8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d62:	689b      	ldr	r3, [r3, #8]
 8002d64:	f003 030c 	and.w	r3, r3, #12
 8002d68:	2b08      	cmp	r3, #8
 8002d6a:	d00d      	beq.n	8002d88 <HAL_RCC_GetSysClockFreq+0x40>
 8002d6c:	2b08      	cmp	r3, #8
 8002d6e:	f200 80a1 	bhi.w	8002eb4 <HAL_RCC_GetSysClockFreq+0x16c>
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d002      	beq.n	8002d7c <HAL_RCC_GetSysClockFreq+0x34>
 8002d76:	2b04      	cmp	r3, #4
 8002d78:	d003      	beq.n	8002d82 <HAL_RCC_GetSysClockFreq+0x3a>
 8002d7a:	e09b      	b.n	8002eb4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002d7c:	4b53      	ldr	r3, [pc, #332]	; (8002ecc <HAL_RCC_GetSysClockFreq+0x184>)
 8002d7e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002d80:	e09b      	b.n	8002eba <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002d82:	4b53      	ldr	r3, [pc, #332]	; (8002ed0 <HAL_RCC_GetSysClockFreq+0x188>)
 8002d84:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002d86:	e098      	b.n	8002eba <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d88:	4b4f      	ldr	r3, [pc, #316]	; (8002ec8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d90:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d92:	4b4d      	ldr	r3, [pc, #308]	; (8002ec8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d028      	beq.n	8002df0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d9e:	4b4a      	ldr	r3, [pc, #296]	; (8002ec8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	099b      	lsrs	r3, r3, #6
 8002da4:	2200      	movs	r2, #0
 8002da6:	623b      	str	r3, [r7, #32]
 8002da8:	627a      	str	r2, [r7, #36]	; 0x24
 8002daa:	6a3b      	ldr	r3, [r7, #32]
 8002dac:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002db0:	2100      	movs	r1, #0
 8002db2:	4b47      	ldr	r3, [pc, #284]	; (8002ed0 <HAL_RCC_GetSysClockFreq+0x188>)
 8002db4:	fb03 f201 	mul.w	r2, r3, r1
 8002db8:	2300      	movs	r3, #0
 8002dba:	fb00 f303 	mul.w	r3, r0, r3
 8002dbe:	4413      	add	r3, r2
 8002dc0:	4a43      	ldr	r2, [pc, #268]	; (8002ed0 <HAL_RCC_GetSysClockFreq+0x188>)
 8002dc2:	fba0 1202 	umull	r1, r2, r0, r2
 8002dc6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002dc8:	460a      	mov	r2, r1
 8002dca:	62ba      	str	r2, [r7, #40]	; 0x28
 8002dcc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002dce:	4413      	add	r3, r2
 8002dd0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002dd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	61bb      	str	r3, [r7, #24]
 8002dd8:	61fa      	str	r2, [r7, #28]
 8002dda:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002dde:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002de2:	f7fd fa45 	bl	8000270 <__aeabi_uldivmod>
 8002de6:	4602      	mov	r2, r0
 8002de8:	460b      	mov	r3, r1
 8002dea:	4613      	mov	r3, r2
 8002dec:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002dee:	e053      	b.n	8002e98 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002df0:	4b35      	ldr	r3, [pc, #212]	; (8002ec8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	099b      	lsrs	r3, r3, #6
 8002df6:	2200      	movs	r2, #0
 8002df8:	613b      	str	r3, [r7, #16]
 8002dfa:	617a      	str	r2, [r7, #20]
 8002dfc:	693b      	ldr	r3, [r7, #16]
 8002dfe:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002e02:	f04f 0b00 	mov.w	fp, #0
 8002e06:	4652      	mov	r2, sl
 8002e08:	465b      	mov	r3, fp
 8002e0a:	f04f 0000 	mov.w	r0, #0
 8002e0e:	f04f 0100 	mov.w	r1, #0
 8002e12:	0159      	lsls	r1, r3, #5
 8002e14:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e18:	0150      	lsls	r0, r2, #5
 8002e1a:	4602      	mov	r2, r0
 8002e1c:	460b      	mov	r3, r1
 8002e1e:	ebb2 080a 	subs.w	r8, r2, sl
 8002e22:	eb63 090b 	sbc.w	r9, r3, fp
 8002e26:	f04f 0200 	mov.w	r2, #0
 8002e2a:	f04f 0300 	mov.w	r3, #0
 8002e2e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002e32:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002e36:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002e3a:	ebb2 0408 	subs.w	r4, r2, r8
 8002e3e:	eb63 0509 	sbc.w	r5, r3, r9
 8002e42:	f04f 0200 	mov.w	r2, #0
 8002e46:	f04f 0300 	mov.w	r3, #0
 8002e4a:	00eb      	lsls	r3, r5, #3
 8002e4c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e50:	00e2      	lsls	r2, r4, #3
 8002e52:	4614      	mov	r4, r2
 8002e54:	461d      	mov	r5, r3
 8002e56:	eb14 030a 	adds.w	r3, r4, sl
 8002e5a:	603b      	str	r3, [r7, #0]
 8002e5c:	eb45 030b 	adc.w	r3, r5, fp
 8002e60:	607b      	str	r3, [r7, #4]
 8002e62:	f04f 0200 	mov.w	r2, #0
 8002e66:	f04f 0300 	mov.w	r3, #0
 8002e6a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002e6e:	4629      	mov	r1, r5
 8002e70:	028b      	lsls	r3, r1, #10
 8002e72:	4621      	mov	r1, r4
 8002e74:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002e78:	4621      	mov	r1, r4
 8002e7a:	028a      	lsls	r2, r1, #10
 8002e7c:	4610      	mov	r0, r2
 8002e7e:	4619      	mov	r1, r3
 8002e80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e82:	2200      	movs	r2, #0
 8002e84:	60bb      	str	r3, [r7, #8]
 8002e86:	60fa      	str	r2, [r7, #12]
 8002e88:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002e8c:	f7fd f9f0 	bl	8000270 <__aeabi_uldivmod>
 8002e90:	4602      	mov	r2, r0
 8002e92:	460b      	mov	r3, r1
 8002e94:	4613      	mov	r3, r2
 8002e96:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002e98:	4b0b      	ldr	r3, [pc, #44]	; (8002ec8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	0c1b      	lsrs	r3, r3, #16
 8002e9e:	f003 0303 	and.w	r3, r3, #3
 8002ea2:	3301      	adds	r3, #1
 8002ea4:	005b      	lsls	r3, r3, #1
 8002ea6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002ea8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eac:	fbb2 f3f3 	udiv	r3, r2, r3
 8002eb0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002eb2:	e002      	b.n	8002eba <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002eb4:	4b05      	ldr	r3, [pc, #20]	; (8002ecc <HAL_RCC_GetSysClockFreq+0x184>)
 8002eb6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002eb8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002eba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	3740      	adds	r7, #64	; 0x40
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ec6:	bf00      	nop
 8002ec8:	40023800 	.word	0x40023800
 8002ecc:	00f42400 	.word	0x00f42400
 8002ed0:	017d7840 	.word	0x017d7840

08002ed4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ed8:	4b03      	ldr	r3, [pc, #12]	; (8002ee8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002eda:	681b      	ldr	r3, [r3, #0]
}
 8002edc:	4618      	mov	r0, r3
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee4:	4770      	bx	lr
 8002ee6:	bf00      	nop
 8002ee8:	20000070 	.word	0x20000070

08002eec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002ef0:	f7ff fff0 	bl	8002ed4 <HAL_RCC_GetHCLKFreq>
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	4b05      	ldr	r3, [pc, #20]	; (8002f0c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ef8:	689b      	ldr	r3, [r3, #8]
 8002efa:	0a9b      	lsrs	r3, r3, #10
 8002efc:	f003 0307 	and.w	r3, r3, #7
 8002f00:	4903      	ldr	r1, [pc, #12]	; (8002f10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f02:	5ccb      	ldrb	r3, [r1, r3]
 8002f04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	bd80      	pop	{r7, pc}
 8002f0c:	40023800 	.word	0x40023800
 8002f10:	080060e8 	.word	0x080060e8

08002f14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002f18:	f7ff ffdc 	bl	8002ed4 <HAL_RCC_GetHCLKFreq>
 8002f1c:	4602      	mov	r2, r0
 8002f1e:	4b05      	ldr	r3, [pc, #20]	; (8002f34 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002f20:	689b      	ldr	r3, [r3, #8]
 8002f22:	0b5b      	lsrs	r3, r3, #13
 8002f24:	f003 0307 	and.w	r3, r3, #7
 8002f28:	4903      	ldr	r1, [pc, #12]	; (8002f38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f2a:	5ccb      	ldrb	r3, [r1, r3]
 8002f2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	bd80      	pop	{r7, pc}
 8002f34:	40023800 	.word	0x40023800
 8002f38:	080060e8 	.word	0x080060e8

08002f3c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b082      	sub	sp, #8
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d101      	bne.n	8002f4e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e03f      	b.n	8002fce <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002f54:	b2db      	uxtb	r3, r3
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d106      	bne.n	8002f68 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f62:	6878      	ldr	r0, [r7, #4]
 8002f64:	f7fe fb16 	bl	8001594 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2224      	movs	r2, #36	; 0x24
 8002f6c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	68da      	ldr	r2, [r3, #12]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002f7e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002f80:	6878      	ldr	r0, [r7, #4]
 8002f82:	f000 fbf1 	bl	8003768 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	691a      	ldr	r2, [r3, #16]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002f94:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	695a      	ldr	r2, [r3, #20]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002fa4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	68da      	ldr	r2, [r3, #12]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002fb4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2220      	movs	r2, #32
 8002fc0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2220      	movs	r2, #32
 8002fc8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002fcc:	2300      	movs	r3, #0
}
 8002fce:	4618      	mov	r0, r3
 8002fd0:	3708      	adds	r7, #8
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd80      	pop	{r7, pc}

08002fd6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fd6:	b580      	push	{r7, lr}
 8002fd8:	b088      	sub	sp, #32
 8002fda:	af02      	add	r7, sp, #8
 8002fdc:	60f8      	str	r0, [r7, #12]
 8002fde:	60b9      	str	r1, [r7, #8]
 8002fe0:	603b      	str	r3, [r7, #0]
 8002fe2:	4613      	mov	r3, r2
 8002fe4:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002ff0:	b2db      	uxtb	r3, r3
 8002ff2:	2b20      	cmp	r3, #32
 8002ff4:	f040 8083 	bne.w	80030fe <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d002      	beq.n	8003004 <HAL_UART_Transmit+0x2e>
 8002ffe:	88fb      	ldrh	r3, [r7, #6]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d101      	bne.n	8003008 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8003004:	2301      	movs	r3, #1
 8003006:	e07b      	b.n	8003100 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800300e:	2b01      	cmp	r3, #1
 8003010:	d101      	bne.n	8003016 <HAL_UART_Transmit+0x40>
 8003012:	2302      	movs	r3, #2
 8003014:	e074      	b.n	8003100 <HAL_UART_Transmit+0x12a>
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	2201      	movs	r2, #1
 800301a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	2200      	movs	r2, #0
 8003022:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	2221      	movs	r2, #33	; 0x21
 8003028:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800302c:	f7fe fb92 	bl	8001754 <HAL_GetTick>
 8003030:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	88fa      	ldrh	r2, [r7, #6]
 8003036:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	88fa      	ldrh	r2, [r7, #6]
 800303c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	2200      	movs	r2, #0
 8003042:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8003046:	e042      	b.n	80030ce <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800304c:	b29b      	uxth	r3, r3
 800304e:	3b01      	subs	r3, #1
 8003050:	b29a      	uxth	r2, r3
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	689b      	ldr	r3, [r3, #8]
 800305a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800305e:	d122      	bne.n	80030a6 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	9300      	str	r3, [sp, #0]
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	2200      	movs	r2, #0
 8003068:	2180      	movs	r1, #128	; 0x80
 800306a:	68f8      	ldr	r0, [r7, #12]
 800306c:	f000 fa10 	bl	8003490 <UART_WaitOnFlagUntilTimeout>
 8003070:	4603      	mov	r3, r0
 8003072:	2b00      	cmp	r3, #0
 8003074:	d001      	beq.n	800307a <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8003076:	2303      	movs	r3, #3
 8003078:	e042      	b.n	8003100 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800307a:	68bb      	ldr	r3, [r7, #8]
 800307c:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800307e:	693b      	ldr	r3, [r7, #16]
 8003080:	881b      	ldrh	r3, [r3, #0]
 8003082:	461a      	mov	r2, r3
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800308c:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	691b      	ldr	r3, [r3, #16]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d103      	bne.n	800309e <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8003096:	68bb      	ldr	r3, [r7, #8]
 8003098:	3302      	adds	r3, #2
 800309a:	60bb      	str	r3, [r7, #8]
 800309c:	e017      	b.n	80030ce <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	3301      	adds	r3, #1
 80030a2:	60bb      	str	r3, [r7, #8]
 80030a4:	e013      	b.n	80030ce <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	9300      	str	r3, [sp, #0]
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	2200      	movs	r2, #0
 80030ae:	2180      	movs	r1, #128	; 0x80
 80030b0:	68f8      	ldr	r0, [r7, #12]
 80030b2:	f000 f9ed 	bl	8003490 <UART_WaitOnFlagUntilTimeout>
 80030b6:	4603      	mov	r3, r0
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d001      	beq.n	80030c0 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80030bc:	2303      	movs	r3, #3
 80030be:	e01f      	b.n	8003100 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80030c0:	68bb      	ldr	r3, [r7, #8]
 80030c2:	1c5a      	adds	r2, r3, #1
 80030c4:	60ba      	str	r2, [r7, #8]
 80030c6:	781a      	ldrb	r2, [r3, #0]
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80030d2:	b29b      	uxth	r3, r3
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d1b7      	bne.n	8003048 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	9300      	str	r3, [sp, #0]
 80030dc:	697b      	ldr	r3, [r7, #20]
 80030de:	2200      	movs	r2, #0
 80030e0:	2140      	movs	r1, #64	; 0x40
 80030e2:	68f8      	ldr	r0, [r7, #12]
 80030e4:	f000 f9d4 	bl	8003490 <UART_WaitOnFlagUntilTimeout>
 80030e8:	4603      	mov	r3, r0
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d001      	beq.n	80030f2 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80030ee:	2303      	movs	r3, #3
 80030f0:	e006      	b.n	8003100 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	2220      	movs	r2, #32
 80030f6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80030fa:	2300      	movs	r3, #0
 80030fc:	e000      	b.n	8003100 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80030fe:	2302      	movs	r3, #2
  }
}
 8003100:	4618      	mov	r0, r3
 8003102:	3718      	adds	r7, #24
 8003104:	46bd      	mov	sp, r7
 8003106:	bd80      	pop	{r7, pc}

08003108 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b088      	sub	sp, #32
 800310c:	af02      	add	r7, sp, #8
 800310e:	60f8      	str	r0, [r7, #12]
 8003110:	60b9      	str	r1, [r7, #8]
 8003112:	603b      	str	r3, [r7, #0]
 8003114:	4613      	mov	r3, r2
 8003116:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8003118:	2300      	movs	r3, #0
 800311a:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003122:	b2db      	uxtb	r3, r3
 8003124:	2b20      	cmp	r3, #32
 8003126:	f040 8090 	bne.w	800324a <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d002      	beq.n	8003136 <HAL_UART_Receive+0x2e>
 8003130:	88fb      	ldrh	r3, [r7, #6]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d101      	bne.n	800313a <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003136:	2301      	movs	r3, #1
 8003138:	e088      	b.n	800324c <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003140:	2b01      	cmp	r3, #1
 8003142:	d101      	bne.n	8003148 <HAL_UART_Receive+0x40>
 8003144:	2302      	movs	r3, #2
 8003146:	e081      	b.n	800324c <HAL_UART_Receive+0x144>
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	2201      	movs	r2, #1
 800314c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	2200      	movs	r2, #0
 8003154:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2222      	movs	r2, #34	; 0x22
 800315a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800315e:	f7fe faf9 	bl	8001754 <HAL_GetTick>
 8003162:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	88fa      	ldrh	r2, [r7, #6]
 8003168:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	88fa      	ldrh	r2, [r7, #6]
 800316e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	2200      	movs	r2, #0
 8003174:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003178:	e05c      	b.n	8003234 <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800317e:	b29b      	uxth	r3, r3
 8003180:	3b01      	subs	r3, #1
 8003182:	b29a      	uxth	r2, r3
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	689b      	ldr	r3, [r3, #8]
 800318c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003190:	d12b      	bne.n	80031ea <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	9300      	str	r3, [sp, #0]
 8003196:	697b      	ldr	r3, [r7, #20]
 8003198:	2200      	movs	r2, #0
 800319a:	2120      	movs	r1, #32
 800319c:	68f8      	ldr	r0, [r7, #12]
 800319e:	f000 f977 	bl	8003490 <UART_WaitOnFlagUntilTimeout>
 80031a2:	4603      	mov	r3, r0
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d001      	beq.n	80031ac <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 80031a8:	2303      	movs	r3, #3
 80031aa:	e04f      	b.n	800324c <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 80031ac:	68bb      	ldr	r3, [r7, #8]
 80031ae:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	691b      	ldr	r3, [r3, #16]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d10c      	bne.n	80031d2 <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	b29b      	uxth	r3, r3
 80031c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031c4:	b29a      	uxth	r2, r3
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	3302      	adds	r3, #2
 80031ce:	60bb      	str	r3, [r7, #8]
 80031d0:	e030      	b.n	8003234 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	b29b      	uxth	r3, r3
 80031da:	b2db      	uxtb	r3, r3
 80031dc:	b29a      	uxth	r2, r3
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 80031e2:	68bb      	ldr	r3, [r7, #8]
 80031e4:	3301      	adds	r3, #1
 80031e6:	60bb      	str	r3, [r7, #8]
 80031e8:	e024      	b.n	8003234 <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	9300      	str	r3, [sp, #0]
 80031ee:	697b      	ldr	r3, [r7, #20]
 80031f0:	2200      	movs	r2, #0
 80031f2:	2120      	movs	r1, #32
 80031f4:	68f8      	ldr	r0, [r7, #12]
 80031f6:	f000 f94b 	bl	8003490 <UART_WaitOnFlagUntilTimeout>
 80031fa:	4603      	mov	r3, r0
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d001      	beq.n	8003204 <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 8003200:	2303      	movs	r3, #3
 8003202:	e023      	b.n	800324c <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	691b      	ldr	r3, [r3, #16]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d108      	bne.n	800321e <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	6859      	ldr	r1, [r3, #4]
 8003212:	68bb      	ldr	r3, [r7, #8]
 8003214:	1c5a      	adds	r2, r3, #1
 8003216:	60ba      	str	r2, [r7, #8]
 8003218:	b2ca      	uxtb	r2, r1
 800321a:	701a      	strb	r2, [r3, #0]
 800321c:	e00a      	b.n	8003234 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	b2da      	uxtb	r2, r3
 8003226:	68bb      	ldr	r3, [r7, #8]
 8003228:	1c59      	adds	r1, r3, #1
 800322a:	60b9      	str	r1, [r7, #8]
 800322c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003230:	b2d2      	uxtb	r2, r2
 8003232:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003238:	b29b      	uxth	r3, r3
 800323a:	2b00      	cmp	r3, #0
 800323c:	d19d      	bne.n	800317a <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	2220      	movs	r2, #32
 8003242:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 8003246:	2300      	movs	r3, #0
 8003248:	e000      	b.n	800324c <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 800324a:	2302      	movs	r3, #2
  }
}
 800324c:	4618      	mov	r0, r3
 800324e:	3718      	adds	r7, #24
 8003250:	46bd      	mov	sp, r7
 8003252:	bd80      	pop	{r7, pc}

08003254 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b088      	sub	sp, #32
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	68db      	ldr	r3, [r3, #12]
 800326a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	695b      	ldr	r3, [r3, #20]
 8003272:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8003274:	2300      	movs	r3, #0
 8003276:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8003278:	2300      	movs	r3, #0
 800327a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800327c:	69fb      	ldr	r3, [r7, #28]
 800327e:	f003 030f 	and.w	r3, r3, #15
 8003282:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d10d      	bne.n	80032a6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800328a:	69fb      	ldr	r3, [r7, #28]
 800328c:	f003 0320 	and.w	r3, r3, #32
 8003290:	2b00      	cmp	r3, #0
 8003292:	d008      	beq.n	80032a6 <HAL_UART_IRQHandler+0x52>
 8003294:	69bb      	ldr	r3, [r7, #24]
 8003296:	f003 0320 	and.w	r3, r3, #32
 800329a:	2b00      	cmp	r3, #0
 800329c:	d003      	beq.n	80032a6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800329e:	6878      	ldr	r0, [r7, #4]
 80032a0:	f000 f9e0 	bl	8003664 <UART_Receive_IT>
      return;
 80032a4:	e0d0      	b.n	8003448 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80032a6:	693b      	ldr	r3, [r7, #16]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	f000 80b0 	beq.w	800340e <HAL_UART_IRQHandler+0x1ba>
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	f003 0301 	and.w	r3, r3, #1
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d105      	bne.n	80032c4 <HAL_UART_IRQHandler+0x70>
 80032b8:	69bb      	ldr	r3, [r7, #24]
 80032ba:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80032be:	2b00      	cmp	r3, #0
 80032c0:	f000 80a5 	beq.w	800340e <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80032c4:	69fb      	ldr	r3, [r7, #28]
 80032c6:	f003 0301 	and.w	r3, r3, #1
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d00a      	beq.n	80032e4 <HAL_UART_IRQHandler+0x90>
 80032ce:	69bb      	ldr	r3, [r7, #24]
 80032d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d005      	beq.n	80032e4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032dc:	f043 0201 	orr.w	r2, r3, #1
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80032e4:	69fb      	ldr	r3, [r7, #28]
 80032e6:	f003 0304 	and.w	r3, r3, #4
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d00a      	beq.n	8003304 <HAL_UART_IRQHandler+0xb0>
 80032ee:	697b      	ldr	r3, [r7, #20]
 80032f0:	f003 0301 	and.w	r3, r3, #1
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d005      	beq.n	8003304 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032fc:	f043 0202 	orr.w	r2, r3, #2
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003304:	69fb      	ldr	r3, [r7, #28]
 8003306:	f003 0302 	and.w	r3, r3, #2
 800330a:	2b00      	cmp	r3, #0
 800330c:	d00a      	beq.n	8003324 <HAL_UART_IRQHandler+0xd0>
 800330e:	697b      	ldr	r3, [r7, #20]
 8003310:	f003 0301 	and.w	r3, r3, #1
 8003314:	2b00      	cmp	r3, #0
 8003316:	d005      	beq.n	8003324 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800331c:	f043 0204 	orr.w	r2, r3, #4
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003324:	69fb      	ldr	r3, [r7, #28]
 8003326:	f003 0308 	and.w	r3, r3, #8
 800332a:	2b00      	cmp	r3, #0
 800332c:	d00f      	beq.n	800334e <HAL_UART_IRQHandler+0xfa>
 800332e:	69bb      	ldr	r3, [r7, #24]
 8003330:	f003 0320 	and.w	r3, r3, #32
 8003334:	2b00      	cmp	r3, #0
 8003336:	d104      	bne.n	8003342 <HAL_UART_IRQHandler+0xee>
 8003338:	697b      	ldr	r3, [r7, #20]
 800333a:	f003 0301 	and.w	r3, r3, #1
 800333e:	2b00      	cmp	r3, #0
 8003340:	d005      	beq.n	800334e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003346:	f043 0208 	orr.w	r2, r3, #8
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003352:	2b00      	cmp	r3, #0
 8003354:	d077      	beq.n	8003446 <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003356:	69fb      	ldr	r3, [r7, #28]
 8003358:	f003 0320 	and.w	r3, r3, #32
 800335c:	2b00      	cmp	r3, #0
 800335e:	d007      	beq.n	8003370 <HAL_UART_IRQHandler+0x11c>
 8003360:	69bb      	ldr	r3, [r7, #24]
 8003362:	f003 0320 	and.w	r3, r3, #32
 8003366:	2b00      	cmp	r3, #0
 8003368:	d002      	beq.n	8003370 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800336a:	6878      	ldr	r0, [r7, #4]
 800336c:	f000 f97a 	bl	8003664 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	695b      	ldr	r3, [r3, #20]
 8003376:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800337a:	2b40      	cmp	r3, #64	; 0x40
 800337c:	bf0c      	ite	eq
 800337e:	2301      	moveq	r3, #1
 8003380:	2300      	movne	r3, #0
 8003382:	b2db      	uxtb	r3, r3
 8003384:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800338a:	f003 0308 	and.w	r3, r3, #8
 800338e:	2b00      	cmp	r3, #0
 8003390:	d102      	bne.n	8003398 <HAL_UART_IRQHandler+0x144>
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d031      	beq.n	80033fc <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003398:	6878      	ldr	r0, [r7, #4]
 800339a:	f000 f8c3 	bl	8003524 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	695b      	ldr	r3, [r3, #20]
 80033a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033a8:	2b40      	cmp	r3, #64	; 0x40
 80033aa:	d123      	bne.n	80033f4 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	695a      	ldr	r2, [r3, #20]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80033ba:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d013      	beq.n	80033ec <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033c8:	4a21      	ldr	r2, [pc, #132]	; (8003450 <HAL_UART_IRQHandler+0x1fc>)
 80033ca:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033d0:	4618      	mov	r0, r3
 80033d2:	f7fe fb00 	bl	80019d6 <HAL_DMA_Abort_IT>
 80033d6:	4603      	mov	r3, r0
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d016      	beq.n	800340a <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033e2:	687a      	ldr	r2, [r7, #4]
 80033e4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80033e6:	4610      	mov	r0, r2
 80033e8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033ea:	e00e      	b.n	800340a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80033ec:	6878      	ldr	r0, [r7, #4]
 80033ee:	f000 f845 	bl	800347c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033f2:	e00a      	b.n	800340a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80033f4:	6878      	ldr	r0, [r7, #4]
 80033f6:	f000 f841 	bl	800347c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033fa:	e006      	b.n	800340a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80033fc:	6878      	ldr	r0, [r7, #4]
 80033fe:	f000 f83d 	bl	800347c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2200      	movs	r2, #0
 8003406:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8003408:	e01d      	b.n	8003446 <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800340a:	bf00      	nop
    return;
 800340c:	e01b      	b.n	8003446 <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800340e:	69fb      	ldr	r3, [r7, #28]
 8003410:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003414:	2b00      	cmp	r3, #0
 8003416:	d008      	beq.n	800342a <HAL_UART_IRQHandler+0x1d6>
 8003418:	69bb      	ldr	r3, [r7, #24]
 800341a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800341e:	2b00      	cmp	r3, #0
 8003420:	d003      	beq.n	800342a <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8003422:	6878      	ldr	r0, [r7, #4]
 8003424:	f000 f8b0 	bl	8003588 <UART_Transmit_IT>
    return;
 8003428:	e00e      	b.n	8003448 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800342a:	69fb      	ldr	r3, [r7, #28]
 800342c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003430:	2b00      	cmp	r3, #0
 8003432:	d009      	beq.n	8003448 <HAL_UART_IRQHandler+0x1f4>
 8003434:	69bb      	ldr	r3, [r7, #24]
 8003436:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800343a:	2b00      	cmp	r3, #0
 800343c:	d004      	beq.n	8003448 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 800343e:	6878      	ldr	r0, [r7, #4]
 8003440:	f000 f8f8 	bl	8003634 <UART_EndTransmit_IT>
    return;
 8003444:	e000      	b.n	8003448 <HAL_UART_IRQHandler+0x1f4>
    return;
 8003446:	bf00      	nop
  }
}
 8003448:	3720      	adds	r7, #32
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}
 800344e:	bf00      	nop
 8003450:	08003561 	.word	0x08003561

08003454 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003454:	b480      	push	{r7}
 8003456:	b083      	sub	sp, #12
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800345c:	bf00      	nop
 800345e:	370c      	adds	r7, #12
 8003460:	46bd      	mov	sp, r7
 8003462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003466:	4770      	bx	lr

08003468 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003468:	b480      	push	{r7}
 800346a:	b083      	sub	sp, #12
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003470:	bf00      	nop
 8003472:	370c      	adds	r7, #12
 8003474:	46bd      	mov	sp, r7
 8003476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347a:	4770      	bx	lr

0800347c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800347c:	b480      	push	{r7}
 800347e:	b083      	sub	sp, #12
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003484:	bf00      	nop
 8003486:	370c      	adds	r7, #12
 8003488:	46bd      	mov	sp, r7
 800348a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348e:	4770      	bx	lr

08003490 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b084      	sub	sp, #16
 8003494:	af00      	add	r7, sp, #0
 8003496:	60f8      	str	r0, [r7, #12]
 8003498:	60b9      	str	r1, [r7, #8]
 800349a:	603b      	str	r3, [r7, #0]
 800349c:	4613      	mov	r3, r2
 800349e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034a0:	e02c      	b.n	80034fc <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034a2:	69bb      	ldr	r3, [r7, #24]
 80034a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034a8:	d028      	beq.n	80034fc <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80034aa:	69bb      	ldr	r3, [r7, #24]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d007      	beq.n	80034c0 <UART_WaitOnFlagUntilTimeout+0x30>
 80034b0:	f7fe f950 	bl	8001754 <HAL_GetTick>
 80034b4:	4602      	mov	r2, r0
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	1ad3      	subs	r3, r2, r3
 80034ba:	69ba      	ldr	r2, [r7, #24]
 80034bc:	429a      	cmp	r2, r3
 80034be:	d21d      	bcs.n	80034fc <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	68da      	ldr	r2, [r3, #12]
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80034ce:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	695a      	ldr	r2, [r3, #20]
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f022 0201 	bic.w	r2, r2, #1
 80034de:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	2220      	movs	r2, #32
 80034e4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	2220      	movs	r2, #32
 80034ec:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	2200      	movs	r2, #0
 80034f4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80034f8:	2303      	movs	r3, #3
 80034fa:	e00f      	b.n	800351c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	681a      	ldr	r2, [r3, #0]
 8003502:	68bb      	ldr	r3, [r7, #8]
 8003504:	4013      	ands	r3, r2
 8003506:	68ba      	ldr	r2, [r7, #8]
 8003508:	429a      	cmp	r2, r3
 800350a:	bf0c      	ite	eq
 800350c:	2301      	moveq	r3, #1
 800350e:	2300      	movne	r3, #0
 8003510:	b2db      	uxtb	r3, r3
 8003512:	461a      	mov	r2, r3
 8003514:	79fb      	ldrb	r3, [r7, #7]
 8003516:	429a      	cmp	r2, r3
 8003518:	d0c3      	beq.n	80034a2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800351a:	2300      	movs	r3, #0
}
 800351c:	4618      	mov	r0, r3
 800351e:	3710      	adds	r7, #16
 8003520:	46bd      	mov	sp, r7
 8003522:	bd80      	pop	{r7, pc}

08003524 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003524:	b480      	push	{r7}
 8003526:	b083      	sub	sp, #12
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	68da      	ldr	r2, [r3, #12]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800353a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	695a      	ldr	r2, [r3, #20]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f022 0201 	bic.w	r2, r2, #1
 800354a:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2220      	movs	r2, #32
 8003550:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8003554:	bf00      	nop
 8003556:	370c      	adds	r7, #12
 8003558:	46bd      	mov	sp, r7
 800355a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355e:	4770      	bx	lr

08003560 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b084      	sub	sp, #16
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800356c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	2200      	movs	r2, #0
 8003572:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	2200      	movs	r2, #0
 8003578:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800357a:	68f8      	ldr	r0, [r7, #12]
 800357c:	f7ff ff7e 	bl	800347c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003580:	bf00      	nop
 8003582:	3710      	adds	r7, #16
 8003584:	46bd      	mov	sp, r7
 8003586:	bd80      	pop	{r7, pc}

08003588 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003588:	b480      	push	{r7}
 800358a:	b085      	sub	sp, #20
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003596:	b2db      	uxtb	r3, r3
 8003598:	2b21      	cmp	r3, #33	; 0x21
 800359a:	d144      	bne.n	8003626 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	689b      	ldr	r3, [r3, #8]
 80035a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035a4:	d11a      	bne.n	80035dc <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6a1b      	ldr	r3, [r3, #32]
 80035aa:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	881b      	ldrh	r3, [r3, #0]
 80035b0:	461a      	mov	r2, r3
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80035ba:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	691b      	ldr	r3, [r3, #16]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d105      	bne.n	80035d0 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6a1b      	ldr	r3, [r3, #32]
 80035c8:	1c9a      	adds	r2, r3, #2
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	621a      	str	r2, [r3, #32]
 80035ce:	e00e      	b.n	80035ee <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6a1b      	ldr	r3, [r3, #32]
 80035d4:	1c5a      	adds	r2, r3, #1
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	621a      	str	r2, [r3, #32]
 80035da:	e008      	b.n	80035ee <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6a1b      	ldr	r3, [r3, #32]
 80035e0:	1c59      	adds	r1, r3, #1
 80035e2:	687a      	ldr	r2, [r7, #4]
 80035e4:	6211      	str	r1, [r2, #32]
 80035e6:	781a      	ldrb	r2, [r3, #0]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80035f2:	b29b      	uxth	r3, r3
 80035f4:	3b01      	subs	r3, #1
 80035f6:	b29b      	uxth	r3, r3
 80035f8:	687a      	ldr	r2, [r7, #4]
 80035fa:	4619      	mov	r1, r3
 80035fc:	84d1      	strh	r1, [r2, #38]	; 0x26
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d10f      	bne.n	8003622 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	68da      	ldr	r2, [r3, #12]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003610:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	68da      	ldr	r2, [r3, #12]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003620:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003622:	2300      	movs	r3, #0
 8003624:	e000      	b.n	8003628 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8003626:	2302      	movs	r3, #2
  }
}
 8003628:	4618      	mov	r0, r3
 800362a:	3714      	adds	r7, #20
 800362c:	46bd      	mov	sp, r7
 800362e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003632:	4770      	bx	lr

08003634 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b082      	sub	sp, #8
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	68da      	ldr	r2, [r3, #12]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800364a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2220      	movs	r2, #32
 8003650:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003654:	6878      	ldr	r0, [r7, #4]
 8003656:	f7ff fefd 	bl	8003454 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800365a:	2300      	movs	r3, #0
}
 800365c:	4618      	mov	r0, r3
 800365e:	3708      	adds	r7, #8
 8003660:	46bd      	mov	sp, r7
 8003662:	bd80      	pop	{r7, pc}

08003664 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b084      	sub	sp, #16
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003672:	b2db      	uxtb	r3, r3
 8003674:	2b22      	cmp	r3, #34	; 0x22
 8003676:	d171      	bne.n	800375c <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	689b      	ldr	r3, [r3, #8]
 800367c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003680:	d123      	bne.n	80036ca <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003686:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	691b      	ldr	r3, [r3, #16]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d10e      	bne.n	80036ae <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	b29b      	uxth	r3, r3
 8003698:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800369c:	b29a      	uxth	r2, r3
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036a6:	1c9a      	adds	r2, r3, #2
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	629a      	str	r2, [r3, #40]	; 0x28
 80036ac:	e029      	b.n	8003702 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	b29b      	uxth	r3, r3
 80036b6:	b2db      	uxtb	r3, r3
 80036b8:	b29a      	uxth	r2, r3
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036c2:	1c5a      	adds	r2, r3, #1
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	629a      	str	r2, [r3, #40]	; 0x28
 80036c8:	e01b      	b.n	8003702 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	691b      	ldr	r3, [r3, #16]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d10a      	bne.n	80036e8 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	6858      	ldr	r0, [r3, #4]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036dc:	1c59      	adds	r1, r3, #1
 80036de:	687a      	ldr	r2, [r7, #4]
 80036e0:	6291      	str	r1, [r2, #40]	; 0x28
 80036e2:	b2c2      	uxtb	r2, r0
 80036e4:	701a      	strb	r2, [r3, #0]
 80036e6:	e00c      	b.n	8003702 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	b2da      	uxtb	r2, r3
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036f4:	1c58      	adds	r0, r3, #1
 80036f6:	6879      	ldr	r1, [r7, #4]
 80036f8:	6288      	str	r0, [r1, #40]	; 0x28
 80036fa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80036fe:	b2d2      	uxtb	r2, r2
 8003700:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003706:	b29b      	uxth	r3, r3
 8003708:	3b01      	subs	r3, #1
 800370a:	b29b      	uxth	r3, r3
 800370c:	687a      	ldr	r2, [r7, #4]
 800370e:	4619      	mov	r1, r3
 8003710:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003712:	2b00      	cmp	r3, #0
 8003714:	d120      	bne.n	8003758 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	68da      	ldr	r2, [r3, #12]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f022 0220 	bic.w	r2, r2, #32
 8003724:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	68da      	ldr	r2, [r3, #12]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003734:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	695a      	ldr	r2, [r3, #20]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f022 0201 	bic.w	r2, r2, #1
 8003744:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2220      	movs	r2, #32
 800374a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800374e:	6878      	ldr	r0, [r7, #4]
 8003750:	f7ff fe8a 	bl	8003468 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8003754:	2300      	movs	r3, #0
 8003756:	e002      	b.n	800375e <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8003758:	2300      	movs	r3, #0
 800375a:	e000      	b.n	800375e <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800375c:	2302      	movs	r3, #2
  }
}
 800375e:	4618      	mov	r0, r3
 8003760:	3710      	adds	r7, #16
 8003762:	46bd      	mov	sp, r7
 8003764:	bd80      	pop	{r7, pc}
	...

08003768 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003768:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800376c:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8003770:	af00      	add	r7, sp, #0
 8003772:	f8c7 01fc 	str.w	r0, [r7, #508]	; 0x1fc
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003776:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	691b      	ldr	r3, [r3, #16]
 800377e:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003782:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003786:	68d9      	ldr	r1, [r3, #12]
 8003788:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800378c:	681a      	ldr	r2, [r3, #0]
 800378e:	ea40 0301 	orr.w	r3, r0, r1
 8003792:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003794:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003798:	689a      	ldr	r2, [r3, #8]
 800379a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800379e:	691b      	ldr	r3, [r3, #16]
 80037a0:	431a      	orrs	r2, r3
 80037a2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80037a6:	695b      	ldr	r3, [r3, #20]
 80037a8:	431a      	orrs	r2, r3
 80037aa:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80037ae:	69db      	ldr	r3, [r3, #28]
 80037b0:	4313      	orrs	r3, r2
 80037b2:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
  MODIFY_REG(huart->Instance->CR1,
 80037b6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	68db      	ldr	r3, [r3, #12]
 80037be:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80037c2:	f021 010c 	bic.w	r1, r1, #12
 80037c6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80037ca:	681a      	ldr	r2, [r3, #0]
 80037cc:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 80037d0:	430b      	orrs	r3, r1
 80037d2:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80037d4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	695b      	ldr	r3, [r3, #20]
 80037dc:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80037e0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80037e4:	6999      	ldr	r1, [r3, #24]
 80037e6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80037ea:	681a      	ldr	r2, [r3, #0]
 80037ec:	ea40 0301 	orr.w	r3, r0, r1
 80037f0:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80037f2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80037f6:	69db      	ldr	r3, [r3, #28]
 80037f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037fc:	f040 824a 	bne.w	8003c94 <UART_SetConfig+0x52c>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003800:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003804:	681a      	ldr	r2, [r3, #0]
 8003806:	4b96      	ldr	r3, [pc, #600]	; (8003a60 <UART_SetConfig+0x2f8>)
 8003808:	429a      	cmp	r2, r3
 800380a:	d006      	beq.n	800381a <UART_SetConfig+0xb2>
 800380c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003810:	681a      	ldr	r2, [r3, #0]
 8003812:	4b94      	ldr	r3, [pc, #592]	; (8003a64 <UART_SetConfig+0x2fc>)
 8003814:	429a      	cmp	r2, r3
 8003816:	f040 8129 	bne.w	8003a6c <UART_SetConfig+0x304>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800381a:	f7ff fb7b 	bl	8002f14 <HAL_RCC_GetPCLK2Freq>
 800381e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003822:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003826:	2200      	movs	r2, #0
 8003828:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 800382c:	f8c7 21f4 	str.w	r2, [r7, #500]	; 0x1f4
 8003830:	e9d7 457c 	ldrd	r4, r5, [r7, #496]	; 0x1f0
 8003834:	4622      	mov	r2, r4
 8003836:	462b      	mov	r3, r5
 8003838:	1891      	adds	r1, r2, r2
 800383a:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 800383e:	415b      	adcs	r3, r3
 8003840:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003844:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 8003848:	4621      	mov	r1, r4
 800384a:	1851      	adds	r1, r2, r1
 800384c:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 8003850:	4629      	mov	r1, r5
 8003852:	414b      	adcs	r3, r1
 8003854:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003858:	f04f 0200 	mov.w	r2, #0
 800385c:	f04f 0300 	mov.w	r3, #0
 8003860:	e9d7 8932 	ldrd	r8, r9, [r7, #200]	; 0xc8
 8003864:	4649      	mov	r1, r9
 8003866:	00cb      	lsls	r3, r1, #3
 8003868:	4641      	mov	r1, r8
 800386a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800386e:	4641      	mov	r1, r8
 8003870:	00ca      	lsls	r2, r1, #3
 8003872:	4610      	mov	r0, r2
 8003874:	4619      	mov	r1, r3
 8003876:	4603      	mov	r3, r0
 8003878:	4622      	mov	r2, r4
 800387a:	189b      	adds	r3, r3, r2
 800387c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8003880:	462b      	mov	r3, r5
 8003882:	460a      	mov	r2, r1
 8003884:	eb42 0303 	adc.w	r3, r2, r3
 8003888:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 800388c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	2200      	movs	r2, #0
 8003894:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8003898:	f8c7 21e4 	str.w	r2, [r7, #484]	; 0x1e4
 800389c:	e9d7 1278 	ldrd	r1, r2, [r7, #480]	; 0x1e0
 80038a0:	460b      	mov	r3, r1
 80038a2:	18db      	adds	r3, r3, r3
 80038a4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80038a8:	4613      	mov	r3, r2
 80038aa:	eb42 0303 	adc.w	r3, r2, r3
 80038ae:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80038b2:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 80038b6:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	; 0x1e8
 80038ba:	f7fc fcd9 	bl	8000270 <__aeabi_uldivmod>
 80038be:	4602      	mov	r2, r0
 80038c0:	460b      	mov	r3, r1
 80038c2:	4b69      	ldr	r3, [pc, #420]	; (8003a68 <UART_SetConfig+0x300>)
 80038c4:	fba3 2302 	umull	r2, r3, r3, r2
 80038c8:	095b      	lsrs	r3, r3, #5
 80038ca:	011c      	lsls	r4, r3, #4
 80038cc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80038d0:	2200      	movs	r2, #0
 80038d2:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
 80038d6:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 80038da:	e9d7 8976 	ldrd	r8, r9, [r7, #472]	; 0x1d8
 80038de:	4642      	mov	r2, r8
 80038e0:	464b      	mov	r3, r9
 80038e2:	1891      	adds	r1, r2, r2
 80038e4:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 80038e8:	415b      	adcs	r3, r3
 80038ea:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80038ee:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 80038f2:	4641      	mov	r1, r8
 80038f4:	1851      	adds	r1, r2, r1
 80038f6:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 80038fa:	4649      	mov	r1, r9
 80038fc:	414b      	adcs	r3, r1
 80038fe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003902:	f04f 0200 	mov.w	r2, #0
 8003906:	f04f 0300 	mov.w	r3, #0
 800390a:	e9d7 ab2c 	ldrd	sl, fp, [r7, #176]	; 0xb0
 800390e:	4659      	mov	r1, fp
 8003910:	00cb      	lsls	r3, r1, #3
 8003912:	4651      	mov	r1, sl
 8003914:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003918:	4651      	mov	r1, sl
 800391a:	00ca      	lsls	r2, r1, #3
 800391c:	4610      	mov	r0, r2
 800391e:	4619      	mov	r1, r3
 8003920:	4603      	mov	r3, r0
 8003922:	4642      	mov	r2, r8
 8003924:	189b      	adds	r3, r3, r2
 8003926:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 800392a:	464b      	mov	r3, r9
 800392c:	460a      	mov	r2, r1
 800392e:	eb42 0303 	adc.w	r3, r2, r3
 8003932:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 8003936:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	2200      	movs	r2, #0
 800393e:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8003942:	f8c7 21cc 	str.w	r2, [r7, #460]	; 0x1cc
 8003946:	e9d7 1272 	ldrd	r1, r2, [r7, #456]	; 0x1c8
 800394a:	460b      	mov	r3, r1
 800394c:	18db      	adds	r3, r3, r3
 800394e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003952:	4613      	mov	r3, r2
 8003954:	eb42 0303 	adc.w	r3, r2, r3
 8003958:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800395c:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8003960:	e9d7 0174 	ldrd	r0, r1, [r7, #464]	; 0x1d0
 8003964:	f7fc fc84 	bl	8000270 <__aeabi_uldivmod>
 8003968:	4602      	mov	r2, r0
 800396a:	460b      	mov	r3, r1
 800396c:	4611      	mov	r1, r2
 800396e:	4b3e      	ldr	r3, [pc, #248]	; (8003a68 <UART_SetConfig+0x300>)
 8003970:	fba3 2301 	umull	r2, r3, r3, r1
 8003974:	095b      	lsrs	r3, r3, #5
 8003976:	2264      	movs	r2, #100	; 0x64
 8003978:	fb02 f303 	mul.w	r3, r2, r3
 800397c:	1acb      	subs	r3, r1, r3
 800397e:	00db      	lsls	r3, r3, #3
 8003980:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003984:	4b38      	ldr	r3, [pc, #224]	; (8003a68 <UART_SetConfig+0x300>)
 8003986:	fba3 2302 	umull	r2, r3, r3, r2
 800398a:	095b      	lsrs	r3, r3, #5
 800398c:	005b      	lsls	r3, r3, #1
 800398e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003992:	441c      	add	r4, r3
 8003994:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003998:	2200      	movs	r2, #0
 800399a:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800399e:	f8c7 21c4 	str.w	r2, [r7, #452]	; 0x1c4
 80039a2:	e9d7 8970 	ldrd	r8, r9, [r7, #448]	; 0x1c0
 80039a6:	4642      	mov	r2, r8
 80039a8:	464b      	mov	r3, r9
 80039aa:	1891      	adds	r1, r2, r2
 80039ac:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 80039b0:	415b      	adcs	r3, r3
 80039b2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80039b6:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 80039ba:	4641      	mov	r1, r8
 80039bc:	1851      	adds	r1, r2, r1
 80039be:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 80039c2:	4649      	mov	r1, r9
 80039c4:	414b      	adcs	r3, r1
 80039c6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80039ca:	f04f 0200 	mov.w	r2, #0
 80039ce:	f04f 0300 	mov.w	r3, #0
 80039d2:	e9d7 ab26 	ldrd	sl, fp, [r7, #152]	; 0x98
 80039d6:	4659      	mov	r1, fp
 80039d8:	00cb      	lsls	r3, r1, #3
 80039da:	4651      	mov	r1, sl
 80039dc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80039e0:	4651      	mov	r1, sl
 80039e2:	00ca      	lsls	r2, r1, #3
 80039e4:	4610      	mov	r0, r2
 80039e6:	4619      	mov	r1, r3
 80039e8:	4603      	mov	r3, r0
 80039ea:	4642      	mov	r2, r8
 80039ec:	189b      	adds	r3, r3, r2
 80039ee:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 80039f2:	464b      	mov	r3, r9
 80039f4:	460a      	mov	r2, r1
 80039f6:	eb42 0303 	adc.w	r3, r2, r3
 80039fa:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80039fe:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	2200      	movs	r2, #0
 8003a06:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
 8003a0a:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
 8003a0e:	e9d7 126c 	ldrd	r1, r2, [r7, #432]	; 0x1b0
 8003a12:	460b      	mov	r3, r1
 8003a14:	18db      	adds	r3, r3, r3
 8003a16:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003a1a:	4613      	mov	r3, r2
 8003a1c:	eb42 0303 	adc.w	r3, r2, r3
 8003a20:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003a24:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8003a28:	e9d7 016e 	ldrd	r0, r1, [r7, #440]	; 0x1b8
 8003a2c:	f7fc fc20 	bl	8000270 <__aeabi_uldivmod>
 8003a30:	4602      	mov	r2, r0
 8003a32:	460b      	mov	r3, r1
 8003a34:	4b0c      	ldr	r3, [pc, #48]	; (8003a68 <UART_SetConfig+0x300>)
 8003a36:	fba3 1302 	umull	r1, r3, r3, r2
 8003a3a:	095b      	lsrs	r3, r3, #5
 8003a3c:	2164      	movs	r1, #100	; 0x64
 8003a3e:	fb01 f303 	mul.w	r3, r1, r3
 8003a42:	1ad3      	subs	r3, r2, r3
 8003a44:	00db      	lsls	r3, r3, #3
 8003a46:	3332      	adds	r3, #50	; 0x32
 8003a48:	4a07      	ldr	r2, [pc, #28]	; (8003a68 <UART_SetConfig+0x300>)
 8003a4a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a4e:	095b      	lsrs	r3, r3, #5
 8003a50:	f003 0207 	and.w	r2, r3, #7
 8003a54:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4422      	add	r2, r4
 8003a5c:	609a      	str	r2, [r3, #8]
 8003a5e:	e349      	b.n	80040f4 <UART_SetConfig+0x98c>
 8003a60:	40011000 	.word	0x40011000
 8003a64:	40011400 	.word	0x40011400
 8003a68:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003a6c:	f7ff fa3e 	bl	8002eec <HAL_RCC_GetPCLK1Freq>
 8003a70:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003a74:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003a78:	2200      	movs	r2, #0
 8003a7a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8003a7e:	f8c7 21ac 	str.w	r2, [r7, #428]	; 0x1ac
 8003a82:	e9d7 456a 	ldrd	r4, r5, [r7, #424]	; 0x1a8
 8003a86:	4622      	mov	r2, r4
 8003a88:	462b      	mov	r3, r5
 8003a8a:	1891      	adds	r1, r2, r2
 8003a8c:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8003a90:	415b      	adcs	r3, r3
 8003a92:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003a96:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8003a9a:	4621      	mov	r1, r4
 8003a9c:	eb12 0a01 	adds.w	sl, r2, r1
 8003aa0:	4629      	mov	r1, r5
 8003aa2:	eb43 0b01 	adc.w	fp, r3, r1
 8003aa6:	f04f 0200 	mov.w	r2, #0
 8003aaa:	f04f 0300 	mov.w	r3, #0
 8003aae:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003ab2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003ab6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003aba:	4692      	mov	sl, r2
 8003abc:	469b      	mov	fp, r3
 8003abe:	4623      	mov	r3, r4
 8003ac0:	eb1a 0303 	adds.w	r3, sl, r3
 8003ac4:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8003ac8:	462b      	mov	r3, r5
 8003aca:	eb4b 0303 	adc.w	r3, fp, r3
 8003ace:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8003ad2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
 8003ade:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8003ae2:	e9d7 1266 	ldrd	r1, r2, [r7, #408]	; 0x198
 8003ae6:	460b      	mov	r3, r1
 8003ae8:	18db      	adds	r3, r3, r3
 8003aea:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003aee:	4613      	mov	r3, r2
 8003af0:	eb42 0303 	adc.w	r3, r2, r3
 8003af4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003af8:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8003afc:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	; 0x1a0
 8003b00:	f7fc fbb6 	bl	8000270 <__aeabi_uldivmod>
 8003b04:	4602      	mov	r2, r0
 8003b06:	460b      	mov	r3, r1
 8003b08:	4b61      	ldr	r3, [pc, #388]	; (8003c90 <UART_SetConfig+0x528>)
 8003b0a:	fba3 2302 	umull	r2, r3, r3, r2
 8003b0e:	095b      	lsrs	r3, r3, #5
 8003b10:	011c      	lsls	r4, r3, #4
 8003b12:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003b16:	2200      	movs	r2, #0
 8003b18:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 8003b1c:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
 8003b20:	e9d7 8964 	ldrd	r8, r9, [r7, #400]	; 0x190
 8003b24:	4642      	mov	r2, r8
 8003b26:	464b      	mov	r3, r9
 8003b28:	1891      	adds	r1, r2, r2
 8003b2a:	67b9      	str	r1, [r7, #120]	; 0x78
 8003b2c:	415b      	adcs	r3, r3
 8003b2e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003b30:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8003b34:	4641      	mov	r1, r8
 8003b36:	1851      	adds	r1, r2, r1
 8003b38:	6739      	str	r1, [r7, #112]	; 0x70
 8003b3a:	4649      	mov	r1, r9
 8003b3c:	414b      	adcs	r3, r1
 8003b3e:	677b      	str	r3, [r7, #116]	; 0x74
 8003b40:	f04f 0200 	mov.w	r2, #0
 8003b44:	f04f 0300 	mov.w	r3, #0
 8003b48:	e9d7 ab1c 	ldrd	sl, fp, [r7, #112]	; 0x70
 8003b4c:	4659      	mov	r1, fp
 8003b4e:	00cb      	lsls	r3, r1, #3
 8003b50:	4651      	mov	r1, sl
 8003b52:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b56:	4651      	mov	r1, sl
 8003b58:	00ca      	lsls	r2, r1, #3
 8003b5a:	4610      	mov	r0, r2
 8003b5c:	4619      	mov	r1, r3
 8003b5e:	4603      	mov	r3, r0
 8003b60:	4642      	mov	r2, r8
 8003b62:	189b      	adds	r3, r3, r2
 8003b64:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8003b68:	464b      	mov	r3, r9
 8003b6a:	460a      	mov	r2, r1
 8003b6c:	eb42 0303 	adc.w	r3, r2, r3
 8003b70:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 8003b74:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8003b80:	f8c7 2184 	str.w	r2, [r7, #388]	; 0x184
 8003b84:	e9d7 1260 	ldrd	r1, r2, [r7, #384]	; 0x180
 8003b88:	460b      	mov	r3, r1
 8003b8a:	18db      	adds	r3, r3, r3
 8003b8c:	66bb      	str	r3, [r7, #104]	; 0x68
 8003b8e:	4613      	mov	r3, r2
 8003b90:	eb42 0303 	adc.w	r3, r2, r3
 8003b94:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003b96:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8003b9a:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003b9e:	f7fc fb67 	bl	8000270 <__aeabi_uldivmod>
 8003ba2:	4602      	mov	r2, r0
 8003ba4:	460b      	mov	r3, r1
 8003ba6:	4611      	mov	r1, r2
 8003ba8:	4b39      	ldr	r3, [pc, #228]	; (8003c90 <UART_SetConfig+0x528>)
 8003baa:	fba3 2301 	umull	r2, r3, r3, r1
 8003bae:	095b      	lsrs	r3, r3, #5
 8003bb0:	2264      	movs	r2, #100	; 0x64
 8003bb2:	fb02 f303 	mul.w	r3, r2, r3
 8003bb6:	1acb      	subs	r3, r1, r3
 8003bb8:	00db      	lsls	r3, r3, #3
 8003bba:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003bbe:	4b34      	ldr	r3, [pc, #208]	; (8003c90 <UART_SetConfig+0x528>)
 8003bc0:	fba3 2302 	umull	r2, r3, r3, r2
 8003bc4:	095b      	lsrs	r3, r3, #5
 8003bc6:	005b      	lsls	r3, r3, #1
 8003bc8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003bcc:	441c      	add	r4, r3
 8003bce:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 8003bd8:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8003bdc:	e9d7 895e 	ldrd	r8, r9, [r7, #376]	; 0x178
 8003be0:	4642      	mov	r2, r8
 8003be2:	464b      	mov	r3, r9
 8003be4:	1891      	adds	r1, r2, r2
 8003be6:	6639      	str	r1, [r7, #96]	; 0x60
 8003be8:	415b      	adcs	r3, r3
 8003bea:	667b      	str	r3, [r7, #100]	; 0x64
 8003bec:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8003bf0:	4641      	mov	r1, r8
 8003bf2:	1851      	adds	r1, r2, r1
 8003bf4:	65b9      	str	r1, [r7, #88]	; 0x58
 8003bf6:	4649      	mov	r1, r9
 8003bf8:	414b      	adcs	r3, r1
 8003bfa:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003bfc:	f04f 0200 	mov.w	r2, #0
 8003c00:	f04f 0300 	mov.w	r3, #0
 8003c04:	e9d7 ab16 	ldrd	sl, fp, [r7, #88]	; 0x58
 8003c08:	4659      	mov	r1, fp
 8003c0a:	00cb      	lsls	r3, r1, #3
 8003c0c:	4651      	mov	r1, sl
 8003c0e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c12:	4651      	mov	r1, sl
 8003c14:	00ca      	lsls	r2, r1, #3
 8003c16:	4610      	mov	r0, r2
 8003c18:	4619      	mov	r1, r3
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	4642      	mov	r2, r8
 8003c1e:	189b      	adds	r3, r3, r2
 8003c20:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 8003c24:	464b      	mov	r3, r9
 8003c26:	460a      	mov	r2, r1
 8003c28:	eb42 0303 	adc.w	r3, r2, r3
 8003c2c:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8003c30:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	2200      	movs	r2, #0
 8003c38:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 8003c3c:	f8c7 216c 	str.w	r2, [r7, #364]	; 0x16c
 8003c40:	e9d7 125a 	ldrd	r1, r2, [r7, #360]	; 0x168
 8003c44:	460b      	mov	r3, r1
 8003c46:	18db      	adds	r3, r3, r3
 8003c48:	653b      	str	r3, [r7, #80]	; 0x50
 8003c4a:	4613      	mov	r3, r2
 8003c4c:	eb42 0303 	adc.w	r3, r2, r3
 8003c50:	657b      	str	r3, [r7, #84]	; 0x54
 8003c52:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003c56:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 8003c5a:	f7fc fb09 	bl	8000270 <__aeabi_uldivmod>
 8003c5e:	4602      	mov	r2, r0
 8003c60:	460b      	mov	r3, r1
 8003c62:	4b0b      	ldr	r3, [pc, #44]	; (8003c90 <UART_SetConfig+0x528>)
 8003c64:	fba3 1302 	umull	r1, r3, r3, r2
 8003c68:	095b      	lsrs	r3, r3, #5
 8003c6a:	2164      	movs	r1, #100	; 0x64
 8003c6c:	fb01 f303 	mul.w	r3, r1, r3
 8003c70:	1ad3      	subs	r3, r2, r3
 8003c72:	00db      	lsls	r3, r3, #3
 8003c74:	3332      	adds	r3, #50	; 0x32
 8003c76:	4a06      	ldr	r2, [pc, #24]	; (8003c90 <UART_SetConfig+0x528>)
 8003c78:	fba2 2303 	umull	r2, r3, r2, r3
 8003c7c:	095b      	lsrs	r3, r3, #5
 8003c7e:	f003 0207 	and.w	r2, r3, #7
 8003c82:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4422      	add	r2, r4
 8003c8a:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8003c8c:	e232      	b.n	80040f4 <UART_SetConfig+0x98c>
 8003c8e:	bf00      	nop
 8003c90:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003c94:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003c98:	681a      	ldr	r2, [r3, #0]
 8003c9a:	4b8d      	ldr	r3, [pc, #564]	; (8003ed0 <UART_SetConfig+0x768>)
 8003c9c:	429a      	cmp	r2, r3
 8003c9e:	d006      	beq.n	8003cae <UART_SetConfig+0x546>
 8003ca0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003ca4:	681a      	ldr	r2, [r3, #0]
 8003ca6:	4b8b      	ldr	r3, [pc, #556]	; (8003ed4 <UART_SetConfig+0x76c>)
 8003ca8:	429a      	cmp	r2, r3
 8003caa:	f040 8117 	bne.w	8003edc <UART_SetConfig+0x774>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003cae:	f7ff f931 	bl	8002f14 <HAL_RCC_GetPCLK2Freq>
 8003cb2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003cb6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003cba:	2200      	movs	r2, #0
 8003cbc:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 8003cc0:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 8003cc4:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 8003cc8:	4622      	mov	r2, r4
 8003cca:	462b      	mov	r3, r5
 8003ccc:	1891      	adds	r1, r2, r2
 8003cce:	64b9      	str	r1, [r7, #72]	; 0x48
 8003cd0:	415b      	adcs	r3, r3
 8003cd2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003cd4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003cd8:	4621      	mov	r1, r4
 8003cda:	eb12 0801 	adds.w	r8, r2, r1
 8003cde:	4629      	mov	r1, r5
 8003ce0:	eb43 0901 	adc.w	r9, r3, r1
 8003ce4:	f04f 0200 	mov.w	r2, #0
 8003ce8:	f04f 0300 	mov.w	r3, #0
 8003cec:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003cf0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003cf4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003cf8:	4690      	mov	r8, r2
 8003cfa:	4699      	mov	r9, r3
 8003cfc:	4623      	mov	r3, r4
 8003cfe:	eb18 0303 	adds.w	r3, r8, r3
 8003d02:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8003d06:	462b      	mov	r3, r5
 8003d08:	eb49 0303 	adc.w	r3, r9, r3
 8003d0c:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8003d10:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	2200      	movs	r2, #0
 8003d18:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003d1c:	f8c7 2154 	str.w	r2, [r7, #340]	; 0x154
 8003d20:	f04f 0200 	mov.w	r2, #0
 8003d24:	f04f 0300 	mov.w	r3, #0
 8003d28:	e9d7 4554 	ldrd	r4, r5, [r7, #336]	; 0x150
 8003d2c:	4629      	mov	r1, r5
 8003d2e:	008b      	lsls	r3, r1, #2
 8003d30:	4621      	mov	r1, r4
 8003d32:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003d36:	4621      	mov	r1, r4
 8003d38:	008a      	lsls	r2, r1, #2
 8003d3a:	e9d7 0156 	ldrd	r0, r1, [r7, #344]	; 0x158
 8003d3e:	f7fc fa97 	bl	8000270 <__aeabi_uldivmod>
 8003d42:	4602      	mov	r2, r0
 8003d44:	460b      	mov	r3, r1
 8003d46:	4b64      	ldr	r3, [pc, #400]	; (8003ed8 <UART_SetConfig+0x770>)
 8003d48:	fba3 2302 	umull	r2, r3, r3, r2
 8003d4c:	095b      	lsrs	r3, r3, #5
 8003d4e:	011c      	lsls	r4, r3, #4
 8003d50:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003d54:	2200      	movs	r2, #0
 8003d56:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8003d5a:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8003d5e:	e9d7 8952 	ldrd	r8, r9, [r7, #328]	; 0x148
 8003d62:	4642      	mov	r2, r8
 8003d64:	464b      	mov	r3, r9
 8003d66:	1891      	adds	r1, r2, r2
 8003d68:	6439      	str	r1, [r7, #64]	; 0x40
 8003d6a:	415b      	adcs	r3, r3
 8003d6c:	647b      	str	r3, [r7, #68]	; 0x44
 8003d6e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003d72:	4641      	mov	r1, r8
 8003d74:	1851      	adds	r1, r2, r1
 8003d76:	63b9      	str	r1, [r7, #56]	; 0x38
 8003d78:	4649      	mov	r1, r9
 8003d7a:	414b      	adcs	r3, r1
 8003d7c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d7e:	f04f 0200 	mov.w	r2, #0
 8003d82:	f04f 0300 	mov.w	r3, #0
 8003d86:	e9d7 ab0e 	ldrd	sl, fp, [r7, #56]	; 0x38
 8003d8a:	4659      	mov	r1, fp
 8003d8c:	00cb      	lsls	r3, r1, #3
 8003d8e:	4651      	mov	r1, sl
 8003d90:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d94:	4651      	mov	r1, sl
 8003d96:	00ca      	lsls	r2, r1, #3
 8003d98:	4610      	mov	r0, r2
 8003d9a:	4619      	mov	r1, r3
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	4642      	mov	r2, r8
 8003da0:	189b      	adds	r3, r3, r2
 8003da2:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8003da6:	464b      	mov	r3, r9
 8003da8:	460a      	mov	r2, r1
 8003daa:	eb42 0303 	adc.w	r3, r2, r3
 8003dae:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8003db2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	2200      	movs	r2, #0
 8003dba:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8003dbe:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 8003dc2:	f04f 0200 	mov.w	r2, #0
 8003dc6:	f04f 0300 	mov.w	r3, #0
 8003dca:	e9d7 894e 	ldrd	r8, r9, [r7, #312]	; 0x138
 8003dce:	4649      	mov	r1, r9
 8003dd0:	008b      	lsls	r3, r1, #2
 8003dd2:	4641      	mov	r1, r8
 8003dd4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003dd8:	4641      	mov	r1, r8
 8003dda:	008a      	lsls	r2, r1, #2
 8003ddc:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 8003de0:	f7fc fa46 	bl	8000270 <__aeabi_uldivmod>
 8003de4:	4602      	mov	r2, r0
 8003de6:	460b      	mov	r3, r1
 8003de8:	4b3b      	ldr	r3, [pc, #236]	; (8003ed8 <UART_SetConfig+0x770>)
 8003dea:	fba3 1302 	umull	r1, r3, r3, r2
 8003dee:	095b      	lsrs	r3, r3, #5
 8003df0:	2164      	movs	r1, #100	; 0x64
 8003df2:	fb01 f303 	mul.w	r3, r1, r3
 8003df6:	1ad3      	subs	r3, r2, r3
 8003df8:	011b      	lsls	r3, r3, #4
 8003dfa:	3332      	adds	r3, #50	; 0x32
 8003dfc:	4a36      	ldr	r2, [pc, #216]	; (8003ed8 <UART_SetConfig+0x770>)
 8003dfe:	fba2 2303 	umull	r2, r3, r2, r3
 8003e02:	095b      	lsrs	r3, r3, #5
 8003e04:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e08:	441c      	add	r4, r3
 8003e0a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003e0e:	2200      	movs	r2, #0
 8003e10:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8003e14:	f8c7 2134 	str.w	r2, [r7, #308]	; 0x134
 8003e18:	e9d7 894c 	ldrd	r8, r9, [r7, #304]	; 0x130
 8003e1c:	4642      	mov	r2, r8
 8003e1e:	464b      	mov	r3, r9
 8003e20:	1891      	adds	r1, r2, r2
 8003e22:	6339      	str	r1, [r7, #48]	; 0x30
 8003e24:	415b      	adcs	r3, r3
 8003e26:	637b      	str	r3, [r7, #52]	; 0x34
 8003e28:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003e2c:	4641      	mov	r1, r8
 8003e2e:	1851      	adds	r1, r2, r1
 8003e30:	62b9      	str	r1, [r7, #40]	; 0x28
 8003e32:	4649      	mov	r1, r9
 8003e34:	414b      	adcs	r3, r1
 8003e36:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e38:	f04f 0200 	mov.w	r2, #0
 8003e3c:	f04f 0300 	mov.w	r3, #0
 8003e40:	e9d7 ab0a 	ldrd	sl, fp, [r7, #40]	; 0x28
 8003e44:	4659      	mov	r1, fp
 8003e46:	00cb      	lsls	r3, r1, #3
 8003e48:	4651      	mov	r1, sl
 8003e4a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e4e:	4651      	mov	r1, sl
 8003e50:	00ca      	lsls	r2, r1, #3
 8003e52:	4610      	mov	r0, r2
 8003e54:	4619      	mov	r1, r3
 8003e56:	4603      	mov	r3, r0
 8003e58:	4642      	mov	r2, r8
 8003e5a:	189b      	adds	r3, r3, r2
 8003e5c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8003e60:	464b      	mov	r3, r9
 8003e62:	460a      	mov	r2, r1
 8003e64:	eb42 0303 	adc.w	r3, r2, r3
 8003e68:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8003e6c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	2200      	movs	r2, #0
 8003e74:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003e78:	f8c7 2124 	str.w	r2, [r7, #292]	; 0x124
 8003e7c:	f04f 0200 	mov.w	r2, #0
 8003e80:	f04f 0300 	mov.w	r3, #0
 8003e84:	e9d7 8948 	ldrd	r8, r9, [r7, #288]	; 0x120
 8003e88:	4649      	mov	r1, r9
 8003e8a:	008b      	lsls	r3, r1, #2
 8003e8c:	4641      	mov	r1, r8
 8003e8e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003e92:	4641      	mov	r1, r8
 8003e94:	008a      	lsls	r2, r1, #2
 8003e96:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 8003e9a:	f7fc f9e9 	bl	8000270 <__aeabi_uldivmod>
 8003e9e:	4602      	mov	r2, r0
 8003ea0:	460b      	mov	r3, r1
 8003ea2:	4b0d      	ldr	r3, [pc, #52]	; (8003ed8 <UART_SetConfig+0x770>)
 8003ea4:	fba3 1302 	umull	r1, r3, r3, r2
 8003ea8:	095b      	lsrs	r3, r3, #5
 8003eaa:	2164      	movs	r1, #100	; 0x64
 8003eac:	fb01 f303 	mul.w	r3, r1, r3
 8003eb0:	1ad3      	subs	r3, r2, r3
 8003eb2:	011b      	lsls	r3, r3, #4
 8003eb4:	3332      	adds	r3, #50	; 0x32
 8003eb6:	4a08      	ldr	r2, [pc, #32]	; (8003ed8 <UART_SetConfig+0x770>)
 8003eb8:	fba2 2303 	umull	r2, r3, r2, r3
 8003ebc:	095b      	lsrs	r3, r3, #5
 8003ebe:	f003 020f 	and.w	r2, r3, #15
 8003ec2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4422      	add	r2, r4
 8003eca:	609a      	str	r2, [r3, #8]
 8003ecc:	e112      	b.n	80040f4 <UART_SetConfig+0x98c>
 8003ece:	bf00      	nop
 8003ed0:	40011000 	.word	0x40011000
 8003ed4:	40011400 	.word	0x40011400
 8003ed8:	51eb851f 	.word	0x51eb851f
      pclk = HAL_RCC_GetPCLK1Freq();
 8003edc:	f7ff f806 	bl	8002eec <HAL_RCC_GetPCLK1Freq>
 8003ee0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003ee4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003ee8:	2200      	movs	r2, #0
 8003eea:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8003eee:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8003ef2:	e9d7 8946 	ldrd	r8, r9, [r7, #280]	; 0x118
 8003ef6:	4642      	mov	r2, r8
 8003ef8:	464b      	mov	r3, r9
 8003efa:	1891      	adds	r1, r2, r2
 8003efc:	6239      	str	r1, [r7, #32]
 8003efe:	415b      	adcs	r3, r3
 8003f00:	627b      	str	r3, [r7, #36]	; 0x24
 8003f02:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003f06:	4641      	mov	r1, r8
 8003f08:	1854      	adds	r4, r2, r1
 8003f0a:	4649      	mov	r1, r9
 8003f0c:	eb43 0501 	adc.w	r5, r3, r1
 8003f10:	f04f 0200 	mov.w	r2, #0
 8003f14:	f04f 0300 	mov.w	r3, #0
 8003f18:	00eb      	lsls	r3, r5, #3
 8003f1a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003f1e:	00e2      	lsls	r2, r4, #3
 8003f20:	4614      	mov	r4, r2
 8003f22:	461d      	mov	r5, r3
 8003f24:	4643      	mov	r3, r8
 8003f26:	18e3      	adds	r3, r4, r3
 8003f28:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8003f2c:	464b      	mov	r3, r9
 8003f2e:	eb45 0303 	adc.w	r3, r5, r3
 8003f32:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8003f36:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8003f42:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 8003f46:	f04f 0200 	mov.w	r2, #0
 8003f4a:	f04f 0300 	mov.w	r3, #0
 8003f4e:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 8003f52:	4629      	mov	r1, r5
 8003f54:	008b      	lsls	r3, r1, #2
 8003f56:	4621      	mov	r1, r4
 8003f58:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003f5c:	4621      	mov	r1, r4
 8003f5e:	008a      	lsls	r2, r1, #2
 8003f60:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8003f64:	f7fc f984 	bl	8000270 <__aeabi_uldivmod>
 8003f68:	4602      	mov	r2, r0
 8003f6a:	460b      	mov	r3, r1
 8003f6c:	4b64      	ldr	r3, [pc, #400]	; (8004100 <UART_SetConfig+0x998>)
 8003f6e:	fba3 2302 	umull	r2, r3, r3, r2
 8003f72:	095b      	lsrs	r3, r3, #5
 8003f74:	011c      	lsls	r4, r3, #4
 8003f76:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003f80:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 8003f84:	e9d7 8940 	ldrd	r8, r9, [r7, #256]	; 0x100
 8003f88:	4642      	mov	r2, r8
 8003f8a:	464b      	mov	r3, r9
 8003f8c:	1891      	adds	r1, r2, r2
 8003f8e:	61b9      	str	r1, [r7, #24]
 8003f90:	415b      	adcs	r3, r3
 8003f92:	61fb      	str	r3, [r7, #28]
 8003f94:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003f98:	4641      	mov	r1, r8
 8003f9a:	1851      	adds	r1, r2, r1
 8003f9c:	6139      	str	r1, [r7, #16]
 8003f9e:	4649      	mov	r1, r9
 8003fa0:	414b      	adcs	r3, r1
 8003fa2:	617b      	str	r3, [r7, #20]
 8003fa4:	f04f 0200 	mov.w	r2, #0
 8003fa8:	f04f 0300 	mov.w	r3, #0
 8003fac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003fb0:	4659      	mov	r1, fp
 8003fb2:	00cb      	lsls	r3, r1, #3
 8003fb4:	4651      	mov	r1, sl
 8003fb6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003fba:	4651      	mov	r1, sl
 8003fbc:	00ca      	lsls	r2, r1, #3
 8003fbe:	4610      	mov	r0, r2
 8003fc0:	4619      	mov	r1, r3
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	4642      	mov	r2, r8
 8003fc6:	189b      	adds	r3, r3, r2
 8003fc8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003fcc:	464b      	mov	r3, r9
 8003fce:	460a      	mov	r2, r1
 8003fd0:	eb42 0303 	adc.w	r3, r2, r3
 8003fd4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003fd8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8003fe4:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8003fe8:	f04f 0200 	mov.w	r2, #0
 8003fec:	f04f 0300 	mov.w	r3, #0
 8003ff0:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	; 0xf0
 8003ff4:	4649      	mov	r1, r9
 8003ff6:	008b      	lsls	r3, r1, #2
 8003ff8:	4641      	mov	r1, r8
 8003ffa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003ffe:	4641      	mov	r1, r8
 8004000:	008a      	lsls	r2, r1, #2
 8004002:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 8004006:	f7fc f933 	bl	8000270 <__aeabi_uldivmod>
 800400a:	4602      	mov	r2, r0
 800400c:	460b      	mov	r3, r1
 800400e:	4b3c      	ldr	r3, [pc, #240]	; (8004100 <UART_SetConfig+0x998>)
 8004010:	fba3 1302 	umull	r1, r3, r3, r2
 8004014:	095b      	lsrs	r3, r3, #5
 8004016:	2164      	movs	r1, #100	; 0x64
 8004018:	fb01 f303 	mul.w	r3, r1, r3
 800401c:	1ad3      	subs	r3, r2, r3
 800401e:	011b      	lsls	r3, r3, #4
 8004020:	3332      	adds	r3, #50	; 0x32
 8004022:	4a37      	ldr	r2, [pc, #220]	; (8004100 <UART_SetConfig+0x998>)
 8004024:	fba2 2303 	umull	r2, r3, r2, r3
 8004028:	095b      	lsrs	r3, r3, #5
 800402a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800402e:	441c      	add	r4, r3
 8004030:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004034:	2200      	movs	r2, #0
 8004036:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800403a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800403e:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 8004042:	4642      	mov	r2, r8
 8004044:	464b      	mov	r3, r9
 8004046:	1891      	adds	r1, r2, r2
 8004048:	60b9      	str	r1, [r7, #8]
 800404a:	415b      	adcs	r3, r3
 800404c:	60fb      	str	r3, [r7, #12]
 800404e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004052:	4641      	mov	r1, r8
 8004054:	1851      	adds	r1, r2, r1
 8004056:	6039      	str	r1, [r7, #0]
 8004058:	4649      	mov	r1, r9
 800405a:	414b      	adcs	r3, r1
 800405c:	607b      	str	r3, [r7, #4]
 800405e:	f04f 0200 	mov.w	r2, #0
 8004062:	f04f 0300 	mov.w	r3, #0
 8004066:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800406a:	4659      	mov	r1, fp
 800406c:	00cb      	lsls	r3, r1, #3
 800406e:	4651      	mov	r1, sl
 8004070:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004074:	4651      	mov	r1, sl
 8004076:	00ca      	lsls	r2, r1, #3
 8004078:	4610      	mov	r0, r2
 800407a:	4619      	mov	r1, r3
 800407c:	4603      	mov	r3, r0
 800407e:	4642      	mov	r2, r8
 8004080:	189b      	adds	r3, r3, r2
 8004082:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004086:	464b      	mov	r3, r9
 8004088:	460a      	mov	r2, r1
 800408a:	eb42 0303 	adc.w	r3, r2, r3
 800408e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004092:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	2200      	movs	r2, #0
 800409a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800409e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80040a2:	f04f 0200 	mov.w	r2, #0
 80040a6:	f04f 0300 	mov.w	r3, #0
 80040aa:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	; 0xd8
 80040ae:	4649      	mov	r1, r9
 80040b0:	008b      	lsls	r3, r1, #2
 80040b2:	4641      	mov	r1, r8
 80040b4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80040b8:	4641      	mov	r1, r8
 80040ba:	008a      	lsls	r2, r1, #2
 80040bc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80040c0:	f7fc f8d6 	bl	8000270 <__aeabi_uldivmod>
 80040c4:	4602      	mov	r2, r0
 80040c6:	460b      	mov	r3, r1
 80040c8:	4b0d      	ldr	r3, [pc, #52]	; (8004100 <UART_SetConfig+0x998>)
 80040ca:	fba3 1302 	umull	r1, r3, r3, r2
 80040ce:	095b      	lsrs	r3, r3, #5
 80040d0:	2164      	movs	r1, #100	; 0x64
 80040d2:	fb01 f303 	mul.w	r3, r1, r3
 80040d6:	1ad3      	subs	r3, r2, r3
 80040d8:	011b      	lsls	r3, r3, #4
 80040da:	3332      	adds	r3, #50	; 0x32
 80040dc:	4a08      	ldr	r2, [pc, #32]	; (8004100 <UART_SetConfig+0x998>)
 80040de:	fba2 2303 	umull	r2, r3, r2, r3
 80040e2:	095b      	lsrs	r3, r3, #5
 80040e4:	f003 020f 	and.w	r2, r3, #15
 80040e8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4422      	add	r2, r4
 80040f0:	609a      	str	r2, [r3, #8]
}
 80040f2:	e7ff      	b.n	80040f4 <UART_SetConfig+0x98c>
 80040f4:	bf00      	nop
 80040f6:	f507 7702 	add.w	r7, r7, #520	; 0x208
 80040fa:	46bd      	mov	sp, r7
 80040fc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004100:	51eb851f 	.word	0x51eb851f

08004104 <__errno>:
 8004104:	4b01      	ldr	r3, [pc, #4]	; (800410c <__errno+0x8>)
 8004106:	6818      	ldr	r0, [r3, #0]
 8004108:	4770      	bx	lr
 800410a:	bf00      	nop
 800410c:	2000007c 	.word	0x2000007c

08004110 <__libc_init_array>:
 8004110:	b570      	push	{r4, r5, r6, lr}
 8004112:	4d0d      	ldr	r5, [pc, #52]	; (8004148 <__libc_init_array+0x38>)
 8004114:	4c0d      	ldr	r4, [pc, #52]	; (800414c <__libc_init_array+0x3c>)
 8004116:	1b64      	subs	r4, r4, r5
 8004118:	10a4      	asrs	r4, r4, #2
 800411a:	2600      	movs	r6, #0
 800411c:	42a6      	cmp	r6, r4
 800411e:	d109      	bne.n	8004134 <__libc_init_array+0x24>
 8004120:	4d0b      	ldr	r5, [pc, #44]	; (8004150 <__libc_init_array+0x40>)
 8004122:	4c0c      	ldr	r4, [pc, #48]	; (8004154 <__libc_init_array+0x44>)
 8004124:	f000 fc96 	bl	8004a54 <_init>
 8004128:	1b64      	subs	r4, r4, r5
 800412a:	10a4      	asrs	r4, r4, #2
 800412c:	2600      	movs	r6, #0
 800412e:	42a6      	cmp	r6, r4
 8004130:	d105      	bne.n	800413e <__libc_init_array+0x2e>
 8004132:	bd70      	pop	{r4, r5, r6, pc}
 8004134:	f855 3b04 	ldr.w	r3, [r5], #4
 8004138:	4798      	blx	r3
 800413a:	3601      	adds	r6, #1
 800413c:	e7ee      	b.n	800411c <__libc_init_array+0xc>
 800413e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004142:	4798      	blx	r3
 8004144:	3601      	adds	r6, #1
 8004146:	e7f2      	b.n	800412e <__libc_init_array+0x1e>
 8004148:	0800612c 	.word	0x0800612c
 800414c:	0800612c 	.word	0x0800612c
 8004150:	0800612c 	.word	0x0800612c
 8004154:	08006130 	.word	0x08006130

08004158 <memset>:
 8004158:	4402      	add	r2, r0
 800415a:	4603      	mov	r3, r0
 800415c:	4293      	cmp	r3, r2
 800415e:	d100      	bne.n	8004162 <memset+0xa>
 8004160:	4770      	bx	lr
 8004162:	f803 1b01 	strb.w	r1, [r3], #1
 8004166:	e7f9      	b.n	800415c <memset+0x4>

08004168 <siprintf>:
 8004168:	b40e      	push	{r1, r2, r3}
 800416a:	b500      	push	{lr}
 800416c:	b09c      	sub	sp, #112	; 0x70
 800416e:	ab1d      	add	r3, sp, #116	; 0x74
 8004170:	9002      	str	r0, [sp, #8]
 8004172:	9006      	str	r0, [sp, #24]
 8004174:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004178:	4809      	ldr	r0, [pc, #36]	; (80041a0 <siprintf+0x38>)
 800417a:	9107      	str	r1, [sp, #28]
 800417c:	9104      	str	r1, [sp, #16]
 800417e:	4909      	ldr	r1, [pc, #36]	; (80041a4 <siprintf+0x3c>)
 8004180:	f853 2b04 	ldr.w	r2, [r3], #4
 8004184:	9105      	str	r1, [sp, #20]
 8004186:	6800      	ldr	r0, [r0, #0]
 8004188:	9301      	str	r3, [sp, #4]
 800418a:	a902      	add	r1, sp, #8
 800418c:	f000 f870 	bl	8004270 <_svfiprintf_r>
 8004190:	9b02      	ldr	r3, [sp, #8]
 8004192:	2200      	movs	r2, #0
 8004194:	701a      	strb	r2, [r3, #0]
 8004196:	b01c      	add	sp, #112	; 0x70
 8004198:	f85d eb04 	ldr.w	lr, [sp], #4
 800419c:	b003      	add	sp, #12
 800419e:	4770      	bx	lr
 80041a0:	2000007c 	.word	0x2000007c
 80041a4:	ffff0208 	.word	0xffff0208

080041a8 <strcpy>:
 80041a8:	4603      	mov	r3, r0
 80041aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80041ae:	f803 2b01 	strb.w	r2, [r3], #1
 80041b2:	2a00      	cmp	r2, #0
 80041b4:	d1f9      	bne.n	80041aa <strcpy+0x2>
 80041b6:	4770      	bx	lr

080041b8 <__ssputs_r>:
 80041b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80041bc:	688e      	ldr	r6, [r1, #8]
 80041be:	429e      	cmp	r6, r3
 80041c0:	4682      	mov	sl, r0
 80041c2:	460c      	mov	r4, r1
 80041c4:	4690      	mov	r8, r2
 80041c6:	461f      	mov	r7, r3
 80041c8:	d838      	bhi.n	800423c <__ssputs_r+0x84>
 80041ca:	898a      	ldrh	r2, [r1, #12]
 80041cc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80041d0:	d032      	beq.n	8004238 <__ssputs_r+0x80>
 80041d2:	6825      	ldr	r5, [r4, #0]
 80041d4:	6909      	ldr	r1, [r1, #16]
 80041d6:	eba5 0901 	sub.w	r9, r5, r1
 80041da:	6965      	ldr	r5, [r4, #20]
 80041dc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80041e0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80041e4:	3301      	adds	r3, #1
 80041e6:	444b      	add	r3, r9
 80041e8:	106d      	asrs	r5, r5, #1
 80041ea:	429d      	cmp	r5, r3
 80041ec:	bf38      	it	cc
 80041ee:	461d      	movcc	r5, r3
 80041f0:	0553      	lsls	r3, r2, #21
 80041f2:	d531      	bpl.n	8004258 <__ssputs_r+0xa0>
 80041f4:	4629      	mov	r1, r5
 80041f6:	f000 fb63 	bl	80048c0 <_malloc_r>
 80041fa:	4606      	mov	r6, r0
 80041fc:	b950      	cbnz	r0, 8004214 <__ssputs_r+0x5c>
 80041fe:	230c      	movs	r3, #12
 8004200:	f8ca 3000 	str.w	r3, [sl]
 8004204:	89a3      	ldrh	r3, [r4, #12]
 8004206:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800420a:	81a3      	strh	r3, [r4, #12]
 800420c:	f04f 30ff 	mov.w	r0, #4294967295
 8004210:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004214:	6921      	ldr	r1, [r4, #16]
 8004216:	464a      	mov	r2, r9
 8004218:	f000 fabe 	bl	8004798 <memcpy>
 800421c:	89a3      	ldrh	r3, [r4, #12]
 800421e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004222:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004226:	81a3      	strh	r3, [r4, #12]
 8004228:	6126      	str	r6, [r4, #16]
 800422a:	6165      	str	r5, [r4, #20]
 800422c:	444e      	add	r6, r9
 800422e:	eba5 0509 	sub.w	r5, r5, r9
 8004232:	6026      	str	r6, [r4, #0]
 8004234:	60a5      	str	r5, [r4, #8]
 8004236:	463e      	mov	r6, r7
 8004238:	42be      	cmp	r6, r7
 800423a:	d900      	bls.n	800423e <__ssputs_r+0x86>
 800423c:	463e      	mov	r6, r7
 800423e:	6820      	ldr	r0, [r4, #0]
 8004240:	4632      	mov	r2, r6
 8004242:	4641      	mov	r1, r8
 8004244:	f000 fab6 	bl	80047b4 <memmove>
 8004248:	68a3      	ldr	r3, [r4, #8]
 800424a:	1b9b      	subs	r3, r3, r6
 800424c:	60a3      	str	r3, [r4, #8]
 800424e:	6823      	ldr	r3, [r4, #0]
 8004250:	4433      	add	r3, r6
 8004252:	6023      	str	r3, [r4, #0]
 8004254:	2000      	movs	r0, #0
 8004256:	e7db      	b.n	8004210 <__ssputs_r+0x58>
 8004258:	462a      	mov	r2, r5
 800425a:	f000 fba5 	bl	80049a8 <_realloc_r>
 800425e:	4606      	mov	r6, r0
 8004260:	2800      	cmp	r0, #0
 8004262:	d1e1      	bne.n	8004228 <__ssputs_r+0x70>
 8004264:	6921      	ldr	r1, [r4, #16]
 8004266:	4650      	mov	r0, sl
 8004268:	f000 fabe 	bl	80047e8 <_free_r>
 800426c:	e7c7      	b.n	80041fe <__ssputs_r+0x46>
	...

08004270 <_svfiprintf_r>:
 8004270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004274:	4698      	mov	r8, r3
 8004276:	898b      	ldrh	r3, [r1, #12]
 8004278:	061b      	lsls	r3, r3, #24
 800427a:	b09d      	sub	sp, #116	; 0x74
 800427c:	4607      	mov	r7, r0
 800427e:	460d      	mov	r5, r1
 8004280:	4614      	mov	r4, r2
 8004282:	d50e      	bpl.n	80042a2 <_svfiprintf_r+0x32>
 8004284:	690b      	ldr	r3, [r1, #16]
 8004286:	b963      	cbnz	r3, 80042a2 <_svfiprintf_r+0x32>
 8004288:	2140      	movs	r1, #64	; 0x40
 800428a:	f000 fb19 	bl	80048c0 <_malloc_r>
 800428e:	6028      	str	r0, [r5, #0]
 8004290:	6128      	str	r0, [r5, #16]
 8004292:	b920      	cbnz	r0, 800429e <_svfiprintf_r+0x2e>
 8004294:	230c      	movs	r3, #12
 8004296:	603b      	str	r3, [r7, #0]
 8004298:	f04f 30ff 	mov.w	r0, #4294967295
 800429c:	e0d1      	b.n	8004442 <_svfiprintf_r+0x1d2>
 800429e:	2340      	movs	r3, #64	; 0x40
 80042a0:	616b      	str	r3, [r5, #20]
 80042a2:	2300      	movs	r3, #0
 80042a4:	9309      	str	r3, [sp, #36]	; 0x24
 80042a6:	2320      	movs	r3, #32
 80042a8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80042ac:	f8cd 800c 	str.w	r8, [sp, #12]
 80042b0:	2330      	movs	r3, #48	; 0x30
 80042b2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800445c <_svfiprintf_r+0x1ec>
 80042b6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80042ba:	f04f 0901 	mov.w	r9, #1
 80042be:	4623      	mov	r3, r4
 80042c0:	469a      	mov	sl, r3
 80042c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80042c6:	b10a      	cbz	r2, 80042cc <_svfiprintf_r+0x5c>
 80042c8:	2a25      	cmp	r2, #37	; 0x25
 80042ca:	d1f9      	bne.n	80042c0 <_svfiprintf_r+0x50>
 80042cc:	ebba 0b04 	subs.w	fp, sl, r4
 80042d0:	d00b      	beq.n	80042ea <_svfiprintf_r+0x7a>
 80042d2:	465b      	mov	r3, fp
 80042d4:	4622      	mov	r2, r4
 80042d6:	4629      	mov	r1, r5
 80042d8:	4638      	mov	r0, r7
 80042da:	f7ff ff6d 	bl	80041b8 <__ssputs_r>
 80042de:	3001      	adds	r0, #1
 80042e0:	f000 80aa 	beq.w	8004438 <_svfiprintf_r+0x1c8>
 80042e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80042e6:	445a      	add	r2, fp
 80042e8:	9209      	str	r2, [sp, #36]	; 0x24
 80042ea:	f89a 3000 	ldrb.w	r3, [sl]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	f000 80a2 	beq.w	8004438 <_svfiprintf_r+0x1c8>
 80042f4:	2300      	movs	r3, #0
 80042f6:	f04f 32ff 	mov.w	r2, #4294967295
 80042fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80042fe:	f10a 0a01 	add.w	sl, sl, #1
 8004302:	9304      	str	r3, [sp, #16]
 8004304:	9307      	str	r3, [sp, #28]
 8004306:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800430a:	931a      	str	r3, [sp, #104]	; 0x68
 800430c:	4654      	mov	r4, sl
 800430e:	2205      	movs	r2, #5
 8004310:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004314:	4851      	ldr	r0, [pc, #324]	; (800445c <_svfiprintf_r+0x1ec>)
 8004316:	f7fb ff5b 	bl	80001d0 <memchr>
 800431a:	9a04      	ldr	r2, [sp, #16]
 800431c:	b9d8      	cbnz	r0, 8004356 <_svfiprintf_r+0xe6>
 800431e:	06d0      	lsls	r0, r2, #27
 8004320:	bf44      	itt	mi
 8004322:	2320      	movmi	r3, #32
 8004324:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004328:	0711      	lsls	r1, r2, #28
 800432a:	bf44      	itt	mi
 800432c:	232b      	movmi	r3, #43	; 0x2b
 800432e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004332:	f89a 3000 	ldrb.w	r3, [sl]
 8004336:	2b2a      	cmp	r3, #42	; 0x2a
 8004338:	d015      	beq.n	8004366 <_svfiprintf_r+0xf6>
 800433a:	9a07      	ldr	r2, [sp, #28]
 800433c:	4654      	mov	r4, sl
 800433e:	2000      	movs	r0, #0
 8004340:	f04f 0c0a 	mov.w	ip, #10
 8004344:	4621      	mov	r1, r4
 8004346:	f811 3b01 	ldrb.w	r3, [r1], #1
 800434a:	3b30      	subs	r3, #48	; 0x30
 800434c:	2b09      	cmp	r3, #9
 800434e:	d94e      	bls.n	80043ee <_svfiprintf_r+0x17e>
 8004350:	b1b0      	cbz	r0, 8004380 <_svfiprintf_r+0x110>
 8004352:	9207      	str	r2, [sp, #28]
 8004354:	e014      	b.n	8004380 <_svfiprintf_r+0x110>
 8004356:	eba0 0308 	sub.w	r3, r0, r8
 800435a:	fa09 f303 	lsl.w	r3, r9, r3
 800435e:	4313      	orrs	r3, r2
 8004360:	9304      	str	r3, [sp, #16]
 8004362:	46a2      	mov	sl, r4
 8004364:	e7d2      	b.n	800430c <_svfiprintf_r+0x9c>
 8004366:	9b03      	ldr	r3, [sp, #12]
 8004368:	1d19      	adds	r1, r3, #4
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	9103      	str	r1, [sp, #12]
 800436e:	2b00      	cmp	r3, #0
 8004370:	bfbb      	ittet	lt
 8004372:	425b      	neglt	r3, r3
 8004374:	f042 0202 	orrlt.w	r2, r2, #2
 8004378:	9307      	strge	r3, [sp, #28]
 800437a:	9307      	strlt	r3, [sp, #28]
 800437c:	bfb8      	it	lt
 800437e:	9204      	strlt	r2, [sp, #16]
 8004380:	7823      	ldrb	r3, [r4, #0]
 8004382:	2b2e      	cmp	r3, #46	; 0x2e
 8004384:	d10c      	bne.n	80043a0 <_svfiprintf_r+0x130>
 8004386:	7863      	ldrb	r3, [r4, #1]
 8004388:	2b2a      	cmp	r3, #42	; 0x2a
 800438a:	d135      	bne.n	80043f8 <_svfiprintf_r+0x188>
 800438c:	9b03      	ldr	r3, [sp, #12]
 800438e:	1d1a      	adds	r2, r3, #4
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	9203      	str	r2, [sp, #12]
 8004394:	2b00      	cmp	r3, #0
 8004396:	bfb8      	it	lt
 8004398:	f04f 33ff 	movlt.w	r3, #4294967295
 800439c:	3402      	adds	r4, #2
 800439e:	9305      	str	r3, [sp, #20]
 80043a0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800446c <_svfiprintf_r+0x1fc>
 80043a4:	7821      	ldrb	r1, [r4, #0]
 80043a6:	2203      	movs	r2, #3
 80043a8:	4650      	mov	r0, sl
 80043aa:	f7fb ff11 	bl	80001d0 <memchr>
 80043ae:	b140      	cbz	r0, 80043c2 <_svfiprintf_r+0x152>
 80043b0:	2340      	movs	r3, #64	; 0x40
 80043b2:	eba0 000a 	sub.w	r0, r0, sl
 80043b6:	fa03 f000 	lsl.w	r0, r3, r0
 80043ba:	9b04      	ldr	r3, [sp, #16]
 80043bc:	4303      	orrs	r3, r0
 80043be:	3401      	adds	r4, #1
 80043c0:	9304      	str	r3, [sp, #16]
 80043c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80043c6:	4826      	ldr	r0, [pc, #152]	; (8004460 <_svfiprintf_r+0x1f0>)
 80043c8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80043cc:	2206      	movs	r2, #6
 80043ce:	f7fb feff 	bl	80001d0 <memchr>
 80043d2:	2800      	cmp	r0, #0
 80043d4:	d038      	beq.n	8004448 <_svfiprintf_r+0x1d8>
 80043d6:	4b23      	ldr	r3, [pc, #140]	; (8004464 <_svfiprintf_r+0x1f4>)
 80043d8:	bb1b      	cbnz	r3, 8004422 <_svfiprintf_r+0x1b2>
 80043da:	9b03      	ldr	r3, [sp, #12]
 80043dc:	3307      	adds	r3, #7
 80043de:	f023 0307 	bic.w	r3, r3, #7
 80043e2:	3308      	adds	r3, #8
 80043e4:	9303      	str	r3, [sp, #12]
 80043e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80043e8:	4433      	add	r3, r6
 80043ea:	9309      	str	r3, [sp, #36]	; 0x24
 80043ec:	e767      	b.n	80042be <_svfiprintf_r+0x4e>
 80043ee:	fb0c 3202 	mla	r2, ip, r2, r3
 80043f2:	460c      	mov	r4, r1
 80043f4:	2001      	movs	r0, #1
 80043f6:	e7a5      	b.n	8004344 <_svfiprintf_r+0xd4>
 80043f8:	2300      	movs	r3, #0
 80043fa:	3401      	adds	r4, #1
 80043fc:	9305      	str	r3, [sp, #20]
 80043fe:	4619      	mov	r1, r3
 8004400:	f04f 0c0a 	mov.w	ip, #10
 8004404:	4620      	mov	r0, r4
 8004406:	f810 2b01 	ldrb.w	r2, [r0], #1
 800440a:	3a30      	subs	r2, #48	; 0x30
 800440c:	2a09      	cmp	r2, #9
 800440e:	d903      	bls.n	8004418 <_svfiprintf_r+0x1a8>
 8004410:	2b00      	cmp	r3, #0
 8004412:	d0c5      	beq.n	80043a0 <_svfiprintf_r+0x130>
 8004414:	9105      	str	r1, [sp, #20]
 8004416:	e7c3      	b.n	80043a0 <_svfiprintf_r+0x130>
 8004418:	fb0c 2101 	mla	r1, ip, r1, r2
 800441c:	4604      	mov	r4, r0
 800441e:	2301      	movs	r3, #1
 8004420:	e7f0      	b.n	8004404 <_svfiprintf_r+0x194>
 8004422:	ab03      	add	r3, sp, #12
 8004424:	9300      	str	r3, [sp, #0]
 8004426:	462a      	mov	r2, r5
 8004428:	4b0f      	ldr	r3, [pc, #60]	; (8004468 <_svfiprintf_r+0x1f8>)
 800442a:	a904      	add	r1, sp, #16
 800442c:	4638      	mov	r0, r7
 800442e:	f3af 8000 	nop.w
 8004432:	1c42      	adds	r2, r0, #1
 8004434:	4606      	mov	r6, r0
 8004436:	d1d6      	bne.n	80043e6 <_svfiprintf_r+0x176>
 8004438:	89ab      	ldrh	r3, [r5, #12]
 800443a:	065b      	lsls	r3, r3, #25
 800443c:	f53f af2c 	bmi.w	8004298 <_svfiprintf_r+0x28>
 8004440:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004442:	b01d      	add	sp, #116	; 0x74
 8004444:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004448:	ab03      	add	r3, sp, #12
 800444a:	9300      	str	r3, [sp, #0]
 800444c:	462a      	mov	r2, r5
 800444e:	4b06      	ldr	r3, [pc, #24]	; (8004468 <_svfiprintf_r+0x1f8>)
 8004450:	a904      	add	r1, sp, #16
 8004452:	4638      	mov	r0, r7
 8004454:	f000 f87a 	bl	800454c <_printf_i>
 8004458:	e7eb      	b.n	8004432 <_svfiprintf_r+0x1c2>
 800445a:	bf00      	nop
 800445c:	080060f0 	.word	0x080060f0
 8004460:	080060fa 	.word	0x080060fa
 8004464:	00000000 	.word	0x00000000
 8004468:	080041b9 	.word	0x080041b9
 800446c:	080060f6 	.word	0x080060f6

08004470 <_printf_common>:
 8004470:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004474:	4616      	mov	r6, r2
 8004476:	4699      	mov	r9, r3
 8004478:	688a      	ldr	r2, [r1, #8]
 800447a:	690b      	ldr	r3, [r1, #16]
 800447c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004480:	4293      	cmp	r3, r2
 8004482:	bfb8      	it	lt
 8004484:	4613      	movlt	r3, r2
 8004486:	6033      	str	r3, [r6, #0]
 8004488:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800448c:	4607      	mov	r7, r0
 800448e:	460c      	mov	r4, r1
 8004490:	b10a      	cbz	r2, 8004496 <_printf_common+0x26>
 8004492:	3301      	adds	r3, #1
 8004494:	6033      	str	r3, [r6, #0]
 8004496:	6823      	ldr	r3, [r4, #0]
 8004498:	0699      	lsls	r1, r3, #26
 800449a:	bf42      	ittt	mi
 800449c:	6833      	ldrmi	r3, [r6, #0]
 800449e:	3302      	addmi	r3, #2
 80044a0:	6033      	strmi	r3, [r6, #0]
 80044a2:	6825      	ldr	r5, [r4, #0]
 80044a4:	f015 0506 	ands.w	r5, r5, #6
 80044a8:	d106      	bne.n	80044b8 <_printf_common+0x48>
 80044aa:	f104 0a19 	add.w	sl, r4, #25
 80044ae:	68e3      	ldr	r3, [r4, #12]
 80044b0:	6832      	ldr	r2, [r6, #0]
 80044b2:	1a9b      	subs	r3, r3, r2
 80044b4:	42ab      	cmp	r3, r5
 80044b6:	dc26      	bgt.n	8004506 <_printf_common+0x96>
 80044b8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80044bc:	1e13      	subs	r3, r2, #0
 80044be:	6822      	ldr	r2, [r4, #0]
 80044c0:	bf18      	it	ne
 80044c2:	2301      	movne	r3, #1
 80044c4:	0692      	lsls	r2, r2, #26
 80044c6:	d42b      	bmi.n	8004520 <_printf_common+0xb0>
 80044c8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80044cc:	4649      	mov	r1, r9
 80044ce:	4638      	mov	r0, r7
 80044d0:	47c0      	blx	r8
 80044d2:	3001      	adds	r0, #1
 80044d4:	d01e      	beq.n	8004514 <_printf_common+0xa4>
 80044d6:	6823      	ldr	r3, [r4, #0]
 80044d8:	68e5      	ldr	r5, [r4, #12]
 80044da:	6832      	ldr	r2, [r6, #0]
 80044dc:	f003 0306 	and.w	r3, r3, #6
 80044e0:	2b04      	cmp	r3, #4
 80044e2:	bf08      	it	eq
 80044e4:	1aad      	subeq	r5, r5, r2
 80044e6:	68a3      	ldr	r3, [r4, #8]
 80044e8:	6922      	ldr	r2, [r4, #16]
 80044ea:	bf0c      	ite	eq
 80044ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80044f0:	2500      	movne	r5, #0
 80044f2:	4293      	cmp	r3, r2
 80044f4:	bfc4      	itt	gt
 80044f6:	1a9b      	subgt	r3, r3, r2
 80044f8:	18ed      	addgt	r5, r5, r3
 80044fa:	2600      	movs	r6, #0
 80044fc:	341a      	adds	r4, #26
 80044fe:	42b5      	cmp	r5, r6
 8004500:	d11a      	bne.n	8004538 <_printf_common+0xc8>
 8004502:	2000      	movs	r0, #0
 8004504:	e008      	b.n	8004518 <_printf_common+0xa8>
 8004506:	2301      	movs	r3, #1
 8004508:	4652      	mov	r2, sl
 800450a:	4649      	mov	r1, r9
 800450c:	4638      	mov	r0, r7
 800450e:	47c0      	blx	r8
 8004510:	3001      	adds	r0, #1
 8004512:	d103      	bne.n	800451c <_printf_common+0xac>
 8004514:	f04f 30ff 	mov.w	r0, #4294967295
 8004518:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800451c:	3501      	adds	r5, #1
 800451e:	e7c6      	b.n	80044ae <_printf_common+0x3e>
 8004520:	18e1      	adds	r1, r4, r3
 8004522:	1c5a      	adds	r2, r3, #1
 8004524:	2030      	movs	r0, #48	; 0x30
 8004526:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800452a:	4422      	add	r2, r4
 800452c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004530:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004534:	3302      	adds	r3, #2
 8004536:	e7c7      	b.n	80044c8 <_printf_common+0x58>
 8004538:	2301      	movs	r3, #1
 800453a:	4622      	mov	r2, r4
 800453c:	4649      	mov	r1, r9
 800453e:	4638      	mov	r0, r7
 8004540:	47c0      	blx	r8
 8004542:	3001      	adds	r0, #1
 8004544:	d0e6      	beq.n	8004514 <_printf_common+0xa4>
 8004546:	3601      	adds	r6, #1
 8004548:	e7d9      	b.n	80044fe <_printf_common+0x8e>
	...

0800454c <_printf_i>:
 800454c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004550:	7e0f      	ldrb	r7, [r1, #24]
 8004552:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004554:	2f78      	cmp	r7, #120	; 0x78
 8004556:	4691      	mov	r9, r2
 8004558:	4680      	mov	r8, r0
 800455a:	460c      	mov	r4, r1
 800455c:	469a      	mov	sl, r3
 800455e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004562:	d807      	bhi.n	8004574 <_printf_i+0x28>
 8004564:	2f62      	cmp	r7, #98	; 0x62
 8004566:	d80a      	bhi.n	800457e <_printf_i+0x32>
 8004568:	2f00      	cmp	r7, #0
 800456a:	f000 80d8 	beq.w	800471e <_printf_i+0x1d2>
 800456e:	2f58      	cmp	r7, #88	; 0x58
 8004570:	f000 80a3 	beq.w	80046ba <_printf_i+0x16e>
 8004574:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004578:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800457c:	e03a      	b.n	80045f4 <_printf_i+0xa8>
 800457e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004582:	2b15      	cmp	r3, #21
 8004584:	d8f6      	bhi.n	8004574 <_printf_i+0x28>
 8004586:	a101      	add	r1, pc, #4	; (adr r1, 800458c <_printf_i+0x40>)
 8004588:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800458c:	080045e5 	.word	0x080045e5
 8004590:	080045f9 	.word	0x080045f9
 8004594:	08004575 	.word	0x08004575
 8004598:	08004575 	.word	0x08004575
 800459c:	08004575 	.word	0x08004575
 80045a0:	08004575 	.word	0x08004575
 80045a4:	080045f9 	.word	0x080045f9
 80045a8:	08004575 	.word	0x08004575
 80045ac:	08004575 	.word	0x08004575
 80045b0:	08004575 	.word	0x08004575
 80045b4:	08004575 	.word	0x08004575
 80045b8:	08004705 	.word	0x08004705
 80045bc:	08004629 	.word	0x08004629
 80045c0:	080046e7 	.word	0x080046e7
 80045c4:	08004575 	.word	0x08004575
 80045c8:	08004575 	.word	0x08004575
 80045cc:	08004727 	.word	0x08004727
 80045d0:	08004575 	.word	0x08004575
 80045d4:	08004629 	.word	0x08004629
 80045d8:	08004575 	.word	0x08004575
 80045dc:	08004575 	.word	0x08004575
 80045e0:	080046ef 	.word	0x080046ef
 80045e4:	682b      	ldr	r3, [r5, #0]
 80045e6:	1d1a      	adds	r2, r3, #4
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	602a      	str	r2, [r5, #0]
 80045ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80045f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80045f4:	2301      	movs	r3, #1
 80045f6:	e0a3      	b.n	8004740 <_printf_i+0x1f4>
 80045f8:	6820      	ldr	r0, [r4, #0]
 80045fa:	6829      	ldr	r1, [r5, #0]
 80045fc:	0606      	lsls	r6, r0, #24
 80045fe:	f101 0304 	add.w	r3, r1, #4
 8004602:	d50a      	bpl.n	800461a <_printf_i+0xce>
 8004604:	680e      	ldr	r6, [r1, #0]
 8004606:	602b      	str	r3, [r5, #0]
 8004608:	2e00      	cmp	r6, #0
 800460a:	da03      	bge.n	8004614 <_printf_i+0xc8>
 800460c:	232d      	movs	r3, #45	; 0x2d
 800460e:	4276      	negs	r6, r6
 8004610:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004614:	485e      	ldr	r0, [pc, #376]	; (8004790 <_printf_i+0x244>)
 8004616:	230a      	movs	r3, #10
 8004618:	e019      	b.n	800464e <_printf_i+0x102>
 800461a:	680e      	ldr	r6, [r1, #0]
 800461c:	602b      	str	r3, [r5, #0]
 800461e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004622:	bf18      	it	ne
 8004624:	b236      	sxthne	r6, r6
 8004626:	e7ef      	b.n	8004608 <_printf_i+0xbc>
 8004628:	682b      	ldr	r3, [r5, #0]
 800462a:	6820      	ldr	r0, [r4, #0]
 800462c:	1d19      	adds	r1, r3, #4
 800462e:	6029      	str	r1, [r5, #0]
 8004630:	0601      	lsls	r1, r0, #24
 8004632:	d501      	bpl.n	8004638 <_printf_i+0xec>
 8004634:	681e      	ldr	r6, [r3, #0]
 8004636:	e002      	b.n	800463e <_printf_i+0xf2>
 8004638:	0646      	lsls	r6, r0, #25
 800463a:	d5fb      	bpl.n	8004634 <_printf_i+0xe8>
 800463c:	881e      	ldrh	r6, [r3, #0]
 800463e:	4854      	ldr	r0, [pc, #336]	; (8004790 <_printf_i+0x244>)
 8004640:	2f6f      	cmp	r7, #111	; 0x6f
 8004642:	bf0c      	ite	eq
 8004644:	2308      	moveq	r3, #8
 8004646:	230a      	movne	r3, #10
 8004648:	2100      	movs	r1, #0
 800464a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800464e:	6865      	ldr	r5, [r4, #4]
 8004650:	60a5      	str	r5, [r4, #8]
 8004652:	2d00      	cmp	r5, #0
 8004654:	bfa2      	ittt	ge
 8004656:	6821      	ldrge	r1, [r4, #0]
 8004658:	f021 0104 	bicge.w	r1, r1, #4
 800465c:	6021      	strge	r1, [r4, #0]
 800465e:	b90e      	cbnz	r6, 8004664 <_printf_i+0x118>
 8004660:	2d00      	cmp	r5, #0
 8004662:	d04d      	beq.n	8004700 <_printf_i+0x1b4>
 8004664:	4615      	mov	r5, r2
 8004666:	fbb6 f1f3 	udiv	r1, r6, r3
 800466a:	fb03 6711 	mls	r7, r3, r1, r6
 800466e:	5dc7      	ldrb	r7, [r0, r7]
 8004670:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004674:	4637      	mov	r7, r6
 8004676:	42bb      	cmp	r3, r7
 8004678:	460e      	mov	r6, r1
 800467a:	d9f4      	bls.n	8004666 <_printf_i+0x11a>
 800467c:	2b08      	cmp	r3, #8
 800467e:	d10b      	bne.n	8004698 <_printf_i+0x14c>
 8004680:	6823      	ldr	r3, [r4, #0]
 8004682:	07de      	lsls	r6, r3, #31
 8004684:	d508      	bpl.n	8004698 <_printf_i+0x14c>
 8004686:	6923      	ldr	r3, [r4, #16]
 8004688:	6861      	ldr	r1, [r4, #4]
 800468a:	4299      	cmp	r1, r3
 800468c:	bfde      	ittt	le
 800468e:	2330      	movle	r3, #48	; 0x30
 8004690:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004694:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004698:	1b52      	subs	r2, r2, r5
 800469a:	6122      	str	r2, [r4, #16]
 800469c:	f8cd a000 	str.w	sl, [sp]
 80046a0:	464b      	mov	r3, r9
 80046a2:	aa03      	add	r2, sp, #12
 80046a4:	4621      	mov	r1, r4
 80046a6:	4640      	mov	r0, r8
 80046a8:	f7ff fee2 	bl	8004470 <_printf_common>
 80046ac:	3001      	adds	r0, #1
 80046ae:	d14c      	bne.n	800474a <_printf_i+0x1fe>
 80046b0:	f04f 30ff 	mov.w	r0, #4294967295
 80046b4:	b004      	add	sp, #16
 80046b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046ba:	4835      	ldr	r0, [pc, #212]	; (8004790 <_printf_i+0x244>)
 80046bc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80046c0:	6829      	ldr	r1, [r5, #0]
 80046c2:	6823      	ldr	r3, [r4, #0]
 80046c4:	f851 6b04 	ldr.w	r6, [r1], #4
 80046c8:	6029      	str	r1, [r5, #0]
 80046ca:	061d      	lsls	r5, r3, #24
 80046cc:	d514      	bpl.n	80046f8 <_printf_i+0x1ac>
 80046ce:	07df      	lsls	r7, r3, #31
 80046d0:	bf44      	itt	mi
 80046d2:	f043 0320 	orrmi.w	r3, r3, #32
 80046d6:	6023      	strmi	r3, [r4, #0]
 80046d8:	b91e      	cbnz	r6, 80046e2 <_printf_i+0x196>
 80046da:	6823      	ldr	r3, [r4, #0]
 80046dc:	f023 0320 	bic.w	r3, r3, #32
 80046e0:	6023      	str	r3, [r4, #0]
 80046e2:	2310      	movs	r3, #16
 80046e4:	e7b0      	b.n	8004648 <_printf_i+0xfc>
 80046e6:	6823      	ldr	r3, [r4, #0]
 80046e8:	f043 0320 	orr.w	r3, r3, #32
 80046ec:	6023      	str	r3, [r4, #0]
 80046ee:	2378      	movs	r3, #120	; 0x78
 80046f0:	4828      	ldr	r0, [pc, #160]	; (8004794 <_printf_i+0x248>)
 80046f2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80046f6:	e7e3      	b.n	80046c0 <_printf_i+0x174>
 80046f8:	0659      	lsls	r1, r3, #25
 80046fa:	bf48      	it	mi
 80046fc:	b2b6      	uxthmi	r6, r6
 80046fe:	e7e6      	b.n	80046ce <_printf_i+0x182>
 8004700:	4615      	mov	r5, r2
 8004702:	e7bb      	b.n	800467c <_printf_i+0x130>
 8004704:	682b      	ldr	r3, [r5, #0]
 8004706:	6826      	ldr	r6, [r4, #0]
 8004708:	6961      	ldr	r1, [r4, #20]
 800470a:	1d18      	adds	r0, r3, #4
 800470c:	6028      	str	r0, [r5, #0]
 800470e:	0635      	lsls	r5, r6, #24
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	d501      	bpl.n	8004718 <_printf_i+0x1cc>
 8004714:	6019      	str	r1, [r3, #0]
 8004716:	e002      	b.n	800471e <_printf_i+0x1d2>
 8004718:	0670      	lsls	r0, r6, #25
 800471a:	d5fb      	bpl.n	8004714 <_printf_i+0x1c8>
 800471c:	8019      	strh	r1, [r3, #0]
 800471e:	2300      	movs	r3, #0
 8004720:	6123      	str	r3, [r4, #16]
 8004722:	4615      	mov	r5, r2
 8004724:	e7ba      	b.n	800469c <_printf_i+0x150>
 8004726:	682b      	ldr	r3, [r5, #0]
 8004728:	1d1a      	adds	r2, r3, #4
 800472a:	602a      	str	r2, [r5, #0]
 800472c:	681d      	ldr	r5, [r3, #0]
 800472e:	6862      	ldr	r2, [r4, #4]
 8004730:	2100      	movs	r1, #0
 8004732:	4628      	mov	r0, r5
 8004734:	f7fb fd4c 	bl	80001d0 <memchr>
 8004738:	b108      	cbz	r0, 800473e <_printf_i+0x1f2>
 800473a:	1b40      	subs	r0, r0, r5
 800473c:	6060      	str	r0, [r4, #4]
 800473e:	6863      	ldr	r3, [r4, #4]
 8004740:	6123      	str	r3, [r4, #16]
 8004742:	2300      	movs	r3, #0
 8004744:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004748:	e7a8      	b.n	800469c <_printf_i+0x150>
 800474a:	6923      	ldr	r3, [r4, #16]
 800474c:	462a      	mov	r2, r5
 800474e:	4649      	mov	r1, r9
 8004750:	4640      	mov	r0, r8
 8004752:	47d0      	blx	sl
 8004754:	3001      	adds	r0, #1
 8004756:	d0ab      	beq.n	80046b0 <_printf_i+0x164>
 8004758:	6823      	ldr	r3, [r4, #0]
 800475a:	079b      	lsls	r3, r3, #30
 800475c:	d413      	bmi.n	8004786 <_printf_i+0x23a>
 800475e:	68e0      	ldr	r0, [r4, #12]
 8004760:	9b03      	ldr	r3, [sp, #12]
 8004762:	4298      	cmp	r0, r3
 8004764:	bfb8      	it	lt
 8004766:	4618      	movlt	r0, r3
 8004768:	e7a4      	b.n	80046b4 <_printf_i+0x168>
 800476a:	2301      	movs	r3, #1
 800476c:	4632      	mov	r2, r6
 800476e:	4649      	mov	r1, r9
 8004770:	4640      	mov	r0, r8
 8004772:	47d0      	blx	sl
 8004774:	3001      	adds	r0, #1
 8004776:	d09b      	beq.n	80046b0 <_printf_i+0x164>
 8004778:	3501      	adds	r5, #1
 800477a:	68e3      	ldr	r3, [r4, #12]
 800477c:	9903      	ldr	r1, [sp, #12]
 800477e:	1a5b      	subs	r3, r3, r1
 8004780:	42ab      	cmp	r3, r5
 8004782:	dcf2      	bgt.n	800476a <_printf_i+0x21e>
 8004784:	e7eb      	b.n	800475e <_printf_i+0x212>
 8004786:	2500      	movs	r5, #0
 8004788:	f104 0619 	add.w	r6, r4, #25
 800478c:	e7f5      	b.n	800477a <_printf_i+0x22e>
 800478e:	bf00      	nop
 8004790:	08006101 	.word	0x08006101
 8004794:	08006112 	.word	0x08006112

08004798 <memcpy>:
 8004798:	440a      	add	r2, r1
 800479a:	4291      	cmp	r1, r2
 800479c:	f100 33ff 	add.w	r3, r0, #4294967295
 80047a0:	d100      	bne.n	80047a4 <memcpy+0xc>
 80047a2:	4770      	bx	lr
 80047a4:	b510      	push	{r4, lr}
 80047a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80047aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80047ae:	4291      	cmp	r1, r2
 80047b0:	d1f9      	bne.n	80047a6 <memcpy+0xe>
 80047b2:	bd10      	pop	{r4, pc}

080047b4 <memmove>:
 80047b4:	4288      	cmp	r0, r1
 80047b6:	b510      	push	{r4, lr}
 80047b8:	eb01 0402 	add.w	r4, r1, r2
 80047bc:	d902      	bls.n	80047c4 <memmove+0x10>
 80047be:	4284      	cmp	r4, r0
 80047c0:	4623      	mov	r3, r4
 80047c2:	d807      	bhi.n	80047d4 <memmove+0x20>
 80047c4:	1e43      	subs	r3, r0, #1
 80047c6:	42a1      	cmp	r1, r4
 80047c8:	d008      	beq.n	80047dc <memmove+0x28>
 80047ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 80047ce:	f803 2f01 	strb.w	r2, [r3, #1]!
 80047d2:	e7f8      	b.n	80047c6 <memmove+0x12>
 80047d4:	4402      	add	r2, r0
 80047d6:	4601      	mov	r1, r0
 80047d8:	428a      	cmp	r2, r1
 80047da:	d100      	bne.n	80047de <memmove+0x2a>
 80047dc:	bd10      	pop	{r4, pc}
 80047de:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80047e2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80047e6:	e7f7      	b.n	80047d8 <memmove+0x24>

080047e8 <_free_r>:
 80047e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80047ea:	2900      	cmp	r1, #0
 80047ec:	d044      	beq.n	8004878 <_free_r+0x90>
 80047ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80047f2:	9001      	str	r0, [sp, #4]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	f1a1 0404 	sub.w	r4, r1, #4
 80047fa:	bfb8      	it	lt
 80047fc:	18e4      	addlt	r4, r4, r3
 80047fe:	f000 f913 	bl	8004a28 <__malloc_lock>
 8004802:	4a1e      	ldr	r2, [pc, #120]	; (800487c <_free_r+0x94>)
 8004804:	9801      	ldr	r0, [sp, #4]
 8004806:	6813      	ldr	r3, [r2, #0]
 8004808:	b933      	cbnz	r3, 8004818 <_free_r+0x30>
 800480a:	6063      	str	r3, [r4, #4]
 800480c:	6014      	str	r4, [r2, #0]
 800480e:	b003      	add	sp, #12
 8004810:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004814:	f000 b90e 	b.w	8004a34 <__malloc_unlock>
 8004818:	42a3      	cmp	r3, r4
 800481a:	d908      	bls.n	800482e <_free_r+0x46>
 800481c:	6825      	ldr	r5, [r4, #0]
 800481e:	1961      	adds	r1, r4, r5
 8004820:	428b      	cmp	r3, r1
 8004822:	bf01      	itttt	eq
 8004824:	6819      	ldreq	r1, [r3, #0]
 8004826:	685b      	ldreq	r3, [r3, #4]
 8004828:	1949      	addeq	r1, r1, r5
 800482a:	6021      	streq	r1, [r4, #0]
 800482c:	e7ed      	b.n	800480a <_free_r+0x22>
 800482e:	461a      	mov	r2, r3
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	b10b      	cbz	r3, 8004838 <_free_r+0x50>
 8004834:	42a3      	cmp	r3, r4
 8004836:	d9fa      	bls.n	800482e <_free_r+0x46>
 8004838:	6811      	ldr	r1, [r2, #0]
 800483a:	1855      	adds	r5, r2, r1
 800483c:	42a5      	cmp	r5, r4
 800483e:	d10b      	bne.n	8004858 <_free_r+0x70>
 8004840:	6824      	ldr	r4, [r4, #0]
 8004842:	4421      	add	r1, r4
 8004844:	1854      	adds	r4, r2, r1
 8004846:	42a3      	cmp	r3, r4
 8004848:	6011      	str	r1, [r2, #0]
 800484a:	d1e0      	bne.n	800480e <_free_r+0x26>
 800484c:	681c      	ldr	r4, [r3, #0]
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	6053      	str	r3, [r2, #4]
 8004852:	4421      	add	r1, r4
 8004854:	6011      	str	r1, [r2, #0]
 8004856:	e7da      	b.n	800480e <_free_r+0x26>
 8004858:	d902      	bls.n	8004860 <_free_r+0x78>
 800485a:	230c      	movs	r3, #12
 800485c:	6003      	str	r3, [r0, #0]
 800485e:	e7d6      	b.n	800480e <_free_r+0x26>
 8004860:	6825      	ldr	r5, [r4, #0]
 8004862:	1961      	adds	r1, r4, r5
 8004864:	428b      	cmp	r3, r1
 8004866:	bf04      	itt	eq
 8004868:	6819      	ldreq	r1, [r3, #0]
 800486a:	685b      	ldreq	r3, [r3, #4]
 800486c:	6063      	str	r3, [r4, #4]
 800486e:	bf04      	itt	eq
 8004870:	1949      	addeq	r1, r1, r5
 8004872:	6021      	streq	r1, [r4, #0]
 8004874:	6054      	str	r4, [r2, #4]
 8004876:	e7ca      	b.n	800480e <_free_r+0x26>
 8004878:	b003      	add	sp, #12
 800487a:	bd30      	pop	{r4, r5, pc}
 800487c:	200005e8 	.word	0x200005e8

08004880 <sbrk_aligned>:
 8004880:	b570      	push	{r4, r5, r6, lr}
 8004882:	4e0e      	ldr	r6, [pc, #56]	; (80048bc <sbrk_aligned+0x3c>)
 8004884:	460c      	mov	r4, r1
 8004886:	6831      	ldr	r1, [r6, #0]
 8004888:	4605      	mov	r5, r0
 800488a:	b911      	cbnz	r1, 8004892 <sbrk_aligned+0x12>
 800488c:	f000 f8bc 	bl	8004a08 <_sbrk_r>
 8004890:	6030      	str	r0, [r6, #0]
 8004892:	4621      	mov	r1, r4
 8004894:	4628      	mov	r0, r5
 8004896:	f000 f8b7 	bl	8004a08 <_sbrk_r>
 800489a:	1c43      	adds	r3, r0, #1
 800489c:	d00a      	beq.n	80048b4 <sbrk_aligned+0x34>
 800489e:	1cc4      	adds	r4, r0, #3
 80048a0:	f024 0403 	bic.w	r4, r4, #3
 80048a4:	42a0      	cmp	r0, r4
 80048a6:	d007      	beq.n	80048b8 <sbrk_aligned+0x38>
 80048a8:	1a21      	subs	r1, r4, r0
 80048aa:	4628      	mov	r0, r5
 80048ac:	f000 f8ac 	bl	8004a08 <_sbrk_r>
 80048b0:	3001      	adds	r0, #1
 80048b2:	d101      	bne.n	80048b8 <sbrk_aligned+0x38>
 80048b4:	f04f 34ff 	mov.w	r4, #4294967295
 80048b8:	4620      	mov	r0, r4
 80048ba:	bd70      	pop	{r4, r5, r6, pc}
 80048bc:	200005ec 	.word	0x200005ec

080048c0 <_malloc_r>:
 80048c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80048c4:	1ccd      	adds	r5, r1, #3
 80048c6:	f025 0503 	bic.w	r5, r5, #3
 80048ca:	3508      	adds	r5, #8
 80048cc:	2d0c      	cmp	r5, #12
 80048ce:	bf38      	it	cc
 80048d0:	250c      	movcc	r5, #12
 80048d2:	2d00      	cmp	r5, #0
 80048d4:	4607      	mov	r7, r0
 80048d6:	db01      	blt.n	80048dc <_malloc_r+0x1c>
 80048d8:	42a9      	cmp	r1, r5
 80048da:	d905      	bls.n	80048e8 <_malloc_r+0x28>
 80048dc:	230c      	movs	r3, #12
 80048de:	603b      	str	r3, [r7, #0]
 80048e0:	2600      	movs	r6, #0
 80048e2:	4630      	mov	r0, r6
 80048e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80048e8:	4e2e      	ldr	r6, [pc, #184]	; (80049a4 <_malloc_r+0xe4>)
 80048ea:	f000 f89d 	bl	8004a28 <__malloc_lock>
 80048ee:	6833      	ldr	r3, [r6, #0]
 80048f0:	461c      	mov	r4, r3
 80048f2:	bb34      	cbnz	r4, 8004942 <_malloc_r+0x82>
 80048f4:	4629      	mov	r1, r5
 80048f6:	4638      	mov	r0, r7
 80048f8:	f7ff ffc2 	bl	8004880 <sbrk_aligned>
 80048fc:	1c43      	adds	r3, r0, #1
 80048fe:	4604      	mov	r4, r0
 8004900:	d14d      	bne.n	800499e <_malloc_r+0xde>
 8004902:	6834      	ldr	r4, [r6, #0]
 8004904:	4626      	mov	r6, r4
 8004906:	2e00      	cmp	r6, #0
 8004908:	d140      	bne.n	800498c <_malloc_r+0xcc>
 800490a:	6823      	ldr	r3, [r4, #0]
 800490c:	4631      	mov	r1, r6
 800490e:	4638      	mov	r0, r7
 8004910:	eb04 0803 	add.w	r8, r4, r3
 8004914:	f000 f878 	bl	8004a08 <_sbrk_r>
 8004918:	4580      	cmp	r8, r0
 800491a:	d13a      	bne.n	8004992 <_malloc_r+0xd2>
 800491c:	6821      	ldr	r1, [r4, #0]
 800491e:	3503      	adds	r5, #3
 8004920:	1a6d      	subs	r5, r5, r1
 8004922:	f025 0503 	bic.w	r5, r5, #3
 8004926:	3508      	adds	r5, #8
 8004928:	2d0c      	cmp	r5, #12
 800492a:	bf38      	it	cc
 800492c:	250c      	movcc	r5, #12
 800492e:	4629      	mov	r1, r5
 8004930:	4638      	mov	r0, r7
 8004932:	f7ff ffa5 	bl	8004880 <sbrk_aligned>
 8004936:	3001      	adds	r0, #1
 8004938:	d02b      	beq.n	8004992 <_malloc_r+0xd2>
 800493a:	6823      	ldr	r3, [r4, #0]
 800493c:	442b      	add	r3, r5
 800493e:	6023      	str	r3, [r4, #0]
 8004940:	e00e      	b.n	8004960 <_malloc_r+0xa0>
 8004942:	6822      	ldr	r2, [r4, #0]
 8004944:	1b52      	subs	r2, r2, r5
 8004946:	d41e      	bmi.n	8004986 <_malloc_r+0xc6>
 8004948:	2a0b      	cmp	r2, #11
 800494a:	d916      	bls.n	800497a <_malloc_r+0xba>
 800494c:	1961      	adds	r1, r4, r5
 800494e:	42a3      	cmp	r3, r4
 8004950:	6025      	str	r5, [r4, #0]
 8004952:	bf18      	it	ne
 8004954:	6059      	strne	r1, [r3, #4]
 8004956:	6863      	ldr	r3, [r4, #4]
 8004958:	bf08      	it	eq
 800495a:	6031      	streq	r1, [r6, #0]
 800495c:	5162      	str	r2, [r4, r5]
 800495e:	604b      	str	r3, [r1, #4]
 8004960:	4638      	mov	r0, r7
 8004962:	f104 060b 	add.w	r6, r4, #11
 8004966:	f000 f865 	bl	8004a34 <__malloc_unlock>
 800496a:	f026 0607 	bic.w	r6, r6, #7
 800496e:	1d23      	adds	r3, r4, #4
 8004970:	1af2      	subs	r2, r6, r3
 8004972:	d0b6      	beq.n	80048e2 <_malloc_r+0x22>
 8004974:	1b9b      	subs	r3, r3, r6
 8004976:	50a3      	str	r3, [r4, r2]
 8004978:	e7b3      	b.n	80048e2 <_malloc_r+0x22>
 800497a:	6862      	ldr	r2, [r4, #4]
 800497c:	42a3      	cmp	r3, r4
 800497e:	bf0c      	ite	eq
 8004980:	6032      	streq	r2, [r6, #0]
 8004982:	605a      	strne	r2, [r3, #4]
 8004984:	e7ec      	b.n	8004960 <_malloc_r+0xa0>
 8004986:	4623      	mov	r3, r4
 8004988:	6864      	ldr	r4, [r4, #4]
 800498a:	e7b2      	b.n	80048f2 <_malloc_r+0x32>
 800498c:	4634      	mov	r4, r6
 800498e:	6876      	ldr	r6, [r6, #4]
 8004990:	e7b9      	b.n	8004906 <_malloc_r+0x46>
 8004992:	230c      	movs	r3, #12
 8004994:	603b      	str	r3, [r7, #0]
 8004996:	4638      	mov	r0, r7
 8004998:	f000 f84c 	bl	8004a34 <__malloc_unlock>
 800499c:	e7a1      	b.n	80048e2 <_malloc_r+0x22>
 800499e:	6025      	str	r5, [r4, #0]
 80049a0:	e7de      	b.n	8004960 <_malloc_r+0xa0>
 80049a2:	bf00      	nop
 80049a4:	200005e8 	.word	0x200005e8

080049a8 <_realloc_r>:
 80049a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80049ac:	4680      	mov	r8, r0
 80049ae:	4614      	mov	r4, r2
 80049b0:	460e      	mov	r6, r1
 80049b2:	b921      	cbnz	r1, 80049be <_realloc_r+0x16>
 80049b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80049b8:	4611      	mov	r1, r2
 80049ba:	f7ff bf81 	b.w	80048c0 <_malloc_r>
 80049be:	b92a      	cbnz	r2, 80049cc <_realloc_r+0x24>
 80049c0:	f7ff ff12 	bl	80047e8 <_free_r>
 80049c4:	4625      	mov	r5, r4
 80049c6:	4628      	mov	r0, r5
 80049c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80049cc:	f000 f838 	bl	8004a40 <_malloc_usable_size_r>
 80049d0:	4284      	cmp	r4, r0
 80049d2:	4607      	mov	r7, r0
 80049d4:	d802      	bhi.n	80049dc <_realloc_r+0x34>
 80049d6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80049da:	d812      	bhi.n	8004a02 <_realloc_r+0x5a>
 80049dc:	4621      	mov	r1, r4
 80049de:	4640      	mov	r0, r8
 80049e0:	f7ff ff6e 	bl	80048c0 <_malloc_r>
 80049e4:	4605      	mov	r5, r0
 80049e6:	2800      	cmp	r0, #0
 80049e8:	d0ed      	beq.n	80049c6 <_realloc_r+0x1e>
 80049ea:	42bc      	cmp	r4, r7
 80049ec:	4622      	mov	r2, r4
 80049ee:	4631      	mov	r1, r6
 80049f0:	bf28      	it	cs
 80049f2:	463a      	movcs	r2, r7
 80049f4:	f7ff fed0 	bl	8004798 <memcpy>
 80049f8:	4631      	mov	r1, r6
 80049fa:	4640      	mov	r0, r8
 80049fc:	f7ff fef4 	bl	80047e8 <_free_r>
 8004a00:	e7e1      	b.n	80049c6 <_realloc_r+0x1e>
 8004a02:	4635      	mov	r5, r6
 8004a04:	e7df      	b.n	80049c6 <_realloc_r+0x1e>
	...

08004a08 <_sbrk_r>:
 8004a08:	b538      	push	{r3, r4, r5, lr}
 8004a0a:	4d06      	ldr	r5, [pc, #24]	; (8004a24 <_sbrk_r+0x1c>)
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	4604      	mov	r4, r0
 8004a10:	4608      	mov	r0, r1
 8004a12:	602b      	str	r3, [r5, #0]
 8004a14:	f7fc fd48 	bl	80014a8 <_sbrk>
 8004a18:	1c43      	adds	r3, r0, #1
 8004a1a:	d102      	bne.n	8004a22 <_sbrk_r+0x1a>
 8004a1c:	682b      	ldr	r3, [r5, #0]
 8004a1e:	b103      	cbz	r3, 8004a22 <_sbrk_r+0x1a>
 8004a20:	6023      	str	r3, [r4, #0]
 8004a22:	bd38      	pop	{r3, r4, r5, pc}
 8004a24:	200005f0 	.word	0x200005f0

08004a28 <__malloc_lock>:
 8004a28:	4801      	ldr	r0, [pc, #4]	; (8004a30 <__malloc_lock+0x8>)
 8004a2a:	f000 b811 	b.w	8004a50 <__retarget_lock_acquire_recursive>
 8004a2e:	bf00      	nop
 8004a30:	200005f4 	.word	0x200005f4

08004a34 <__malloc_unlock>:
 8004a34:	4801      	ldr	r0, [pc, #4]	; (8004a3c <__malloc_unlock+0x8>)
 8004a36:	f000 b80c 	b.w	8004a52 <__retarget_lock_release_recursive>
 8004a3a:	bf00      	nop
 8004a3c:	200005f4 	.word	0x200005f4

08004a40 <_malloc_usable_size_r>:
 8004a40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004a44:	1f18      	subs	r0, r3, #4
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	bfbc      	itt	lt
 8004a4a:	580b      	ldrlt	r3, [r1, r0]
 8004a4c:	18c0      	addlt	r0, r0, r3
 8004a4e:	4770      	bx	lr

08004a50 <__retarget_lock_acquire_recursive>:
 8004a50:	4770      	bx	lr

08004a52 <__retarget_lock_release_recursive>:
 8004a52:	4770      	bx	lr

08004a54 <_init>:
 8004a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a56:	bf00      	nop
 8004a58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a5a:	bc08      	pop	{r3}
 8004a5c:	469e      	mov	lr, r3
 8004a5e:	4770      	bx	lr

08004a60 <_fini>:
 8004a60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a62:	bf00      	nop
 8004a64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a66:	bc08      	pop	{r3}
 8004a68:	469e      	mov	lr, r3
 8004a6a:	4770      	bx	lr
